// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dpos_msg.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	dpos_msg.proto

It has these top-level messages:
	CycleBoundaryInfo
	SuperNode
	VoteItem
	DPosVote
	DPosVoteReply
	DPosNotify
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CycleBoundaryInfo struct {
	Cycle      int64  `protobuf:"varint,1,opt,name=cycle" json:"cycle,omitempty"`
	StopHeight int64  `protobuf:"varint,2,opt,name=stopHeight" json:"stopHeight,omitempty"`
	StopHash   string `protobuf:"bytes,3,opt,name=stopHash" json:"stopHash,omitempty"`
}

func (m *CycleBoundaryInfo) Reset()                    { *m = CycleBoundaryInfo{} }
func (m *CycleBoundaryInfo) String() string            { return proto.CompactTextString(m) }
func (*CycleBoundaryInfo) ProtoMessage()               {}
func (*CycleBoundaryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CycleBoundaryInfo) GetCycle() int64 {
	if m != nil {
		return m.Cycle
	}
	return 0
}

func (m *CycleBoundaryInfo) GetStopHeight() int64 {
	if m != nil {
		return m.StopHeight
	}
	return 0
}

func (m *CycleBoundaryInfo) GetStopHash() string {
	if m != nil {
		return m.StopHash
	}
	return ""
}

type SuperNode struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey  []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *SuperNode) Reset()                    { *m = SuperNode{} }
func (m *SuperNode) String() string            { return proto.CompactTextString(m) }
func (*SuperNode) ProtoMessage()               {}
func (*SuperNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SuperNode) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SuperNode) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type VoteItem struct {
	VotedNodeIndex   int32              `protobuf:"varint,1,opt,name=votedNodeIndex" json:"votedNodeIndex,omitempty"`
	VotedNodeAddress []byte             `protobuf:"bytes,2,opt,name=votedNodeAddress,proto3" json:"votedNodeAddress,omitempty"`
	Cycle            int64              `protobuf:"varint,3,opt,name=cycle" json:"cycle,omitempty"`
	CycleStart       int64              `protobuf:"varint,4,opt,name=cycleStart" json:"cycleStart,omitempty"`
	CycleStop        int64              `protobuf:"varint,5,opt,name=cycleStop" json:"cycleStop,omitempty"`
	PeriodStart      int64              `protobuf:"varint,6,opt,name=periodStart" json:"periodStart,omitempty"`
	PeriodStop       int64              `protobuf:"varint,7,opt,name=periodStop" json:"periodStop,omitempty"`
	Height           int64              `protobuf:"varint,8,opt,name=height" json:"height,omitempty"`
	VoteID           []byte             `protobuf:"bytes,9,opt,name=voteID,proto3" json:"voteID,omitempty"`
	LastCBInfo       *CycleBoundaryInfo `protobuf:"bytes,10,opt,name=lastCBInfo" json:"lastCBInfo,omitempty"`
	ShuffleType      int64              `protobuf:"varint,11,opt,name=shuffleType" json:"shuffleType,omitempty"`
	Validators       []*SuperNode       `protobuf:"bytes,12,rep,name=validators" json:"validators,omitempty"`
	VrfValidators    []*SuperNode       `protobuf:"bytes,13,rep,name=vrfValidators" json:"vrfValidators,omitempty"`
	NoVrfValidators  []*SuperNode       `protobuf:"bytes,14,rep,name=noVrfValidators" json:"noVrfValidators,omitempty"`
}

func (m *VoteItem) Reset()                    { *m = VoteItem{} }
func (m *VoteItem) String() string            { return proto.CompactTextString(m) }
func (*VoteItem) ProtoMessage()               {}
func (*VoteItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VoteItem) GetVotedNodeIndex() int32 {
	if m != nil {
		return m.VotedNodeIndex
	}
	return 0
}

func (m *VoteItem) GetVotedNodeAddress() []byte {
	if m != nil {
		return m.VotedNodeAddress
	}
	return nil
}

func (m *VoteItem) GetCycle() int64 {
	if m != nil {
		return m.Cycle
	}
	return 0
}

func (m *VoteItem) GetCycleStart() int64 {
	if m != nil {
		return m.CycleStart
	}
	return 0
}

func (m *VoteItem) GetCycleStop() int64 {
	if m != nil {
		return m.CycleStop
	}
	return 0
}

func (m *VoteItem) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *VoteItem) GetPeriodStop() int64 {
	if m != nil {
		return m.PeriodStop
	}
	return 0
}

func (m *VoteItem) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteItem) GetVoteID() []byte {
	if m != nil {
		return m.VoteID
	}
	return nil
}

func (m *VoteItem) GetLastCBInfo() *CycleBoundaryInfo {
	if m != nil {
		return m.LastCBInfo
	}
	return nil
}

func (m *VoteItem) GetShuffleType() int64 {
	if m != nil {
		return m.ShuffleType
	}
	return 0
}

func (m *VoteItem) GetValidators() []*SuperNode {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *VoteItem) GetVrfValidators() []*SuperNode {
	if m != nil {
		return m.VrfValidators
	}
	return nil
}

func (m *VoteItem) GetNoVrfValidators() []*SuperNode {
	if m != nil {
		return m.NoVrfValidators
	}
	return nil
}

// DPosVote Dpos共识的节点投票，为达成共识用。
type DPosVote struct {
	VoteItem         *VoteItem `protobuf:"bytes,1,opt,name=voteItem" json:"voteItem,omitempty"`
	VoteTimestamp    int64     `protobuf:"varint,2,opt,name=voteTimestamp" json:"voteTimestamp,omitempty"`
	VoterNodeIndex   int32     `protobuf:"varint,3,opt,name=voterNodeIndex" json:"voterNodeIndex,omitempty"`
	VoterNodeAddress []byte    `protobuf:"bytes,4,opt,name=voterNodeAddress,proto3" json:"voterNodeAddress,omitempty"`
	Signature        []byte    `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DPosVote) Reset()                    { *m = DPosVote{} }
func (m *DPosVote) String() string            { return proto.CompactTextString(m) }
func (*DPosVote) ProtoMessage()               {}
func (*DPosVote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DPosVote) GetVoteItem() *VoteItem {
	if m != nil {
		return m.VoteItem
	}
	return nil
}

func (m *DPosVote) GetVoteTimestamp() int64 {
	if m != nil {
		return m.VoteTimestamp
	}
	return 0
}

func (m *DPosVote) GetVoterNodeIndex() int32 {
	if m != nil {
		return m.VoterNodeIndex
	}
	return 0
}

func (m *DPosVote) GetVoterNodeAddress() []byte {
	if m != nil {
		return m.VoterNodeAddress
	}
	return nil
}

func (m *DPosVote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DPosVoteReply struct {
	Vote *DPosVote `protobuf:"bytes,1,opt,name=vote" json:"vote,omitempty"`
}

func (m *DPosVoteReply) Reset()                    { *m = DPosVoteReply{} }
func (m *DPosVoteReply) String() string            { return proto.CompactTextString(m) }
func (*DPosVoteReply) ProtoMessage()               {}
func (*DPosVoteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DPosVoteReply) GetVote() *DPosVote {
	if m != nil {
		return m.Vote
	}
	return nil
}

// DPosNotify Dpos委托节点出块周期结束时，通知其他节点进行高度确认及新节点投票。
type DPosNotify struct {
	Vote              *VoteItem `protobuf:"bytes,1,opt,name=vote" json:"vote,omitempty"`
	HeightStop        int64     `protobuf:"varint,2,opt,name=heightStop" json:"heightStop,omitempty"`
	HashStop          []byte    `protobuf:"bytes,3,opt,name=hashStop,proto3" json:"hashStop,omitempty"`
	NotifyTimestamp   int64     `protobuf:"varint,4,opt,name=notifyTimestamp" json:"notifyTimestamp,omitempty"`
	NotifyNodeIndex   int32     `protobuf:"varint,5,opt,name=notifyNodeIndex" json:"notifyNodeIndex,omitempty"`
	NotifyNodeAddress []byte    `protobuf:"bytes,6,opt,name=notifyNodeAddress,proto3" json:"notifyNodeAddress,omitempty"`
	Signature         []byte    `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DPosNotify) Reset()                    { *m = DPosNotify{} }
func (m *DPosNotify) String() string            { return proto.CompactTextString(m) }
func (*DPosNotify) ProtoMessage()               {}
func (*DPosNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DPosNotify) GetVote() *VoteItem {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *DPosNotify) GetHeightStop() int64 {
	if m != nil {
		return m.HeightStop
	}
	return 0
}

func (m *DPosNotify) GetHashStop() []byte {
	if m != nil {
		return m.HashStop
	}
	return nil
}

func (m *DPosNotify) GetNotifyTimestamp() int64 {
	if m != nil {
		return m.NotifyTimestamp
	}
	return 0
}

func (m *DPosNotify) GetNotifyNodeIndex() int32 {
	if m != nil {
		return m.NotifyNodeIndex
	}
	return 0
}

func (m *DPosNotify) GetNotifyNodeAddress() []byte {
	if m != nil {
		return m.NotifyNodeAddress
	}
	return nil
}

func (m *DPosNotify) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*CycleBoundaryInfo)(nil), "types.CycleBoundaryInfo")
	proto.RegisterType((*SuperNode)(nil), "types.SuperNode")
	proto.RegisterType((*VoteItem)(nil), "types.VoteItem")
	proto.RegisterType((*DPosVote)(nil), "types.DPosVote")
	proto.RegisterType((*DPosVoteReply)(nil), "types.DPosVoteReply")
	proto.RegisterType((*DPosNotify)(nil), "types.DPosNotify")
}

func init() { proto.RegisterFile("dpos_msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xdd, 0x8a, 0x13, 0x31,
	0x14, 0xa6, 0x3b, 0xfd, 0x3d, 0xfd, 0xd9, 0xdd, 0x20, 0x12, 0x44, 0xa4, 0x8c, 0x22, 0x45, 0xa5,
	0x48, 0x15, 0x11, 0xc1, 0x0b, 0x77, 0xf7, 0xc2, 0x22, 0x2c, 0x32, 0xbb, 0xf4, 0x56, 0xb2, 0x3b,
	0x69, 0x67, 0xa0, 0x6d, 0x42, 0x92, 0x16, 0xe7, 0x21, 0x7c, 0x0d, 0x5f, 0xc7, 0x57, 0x92, 0x9c,
	0xcc, 0x4c, 0xa6, 0x53, 0x7a, 0x37, 0xdf, 0x77, 0x7e, 0x92, 0xf3, 0x9d, 0x2f, 0x03, 0xa3, 0x58,
	0x0a, 0xfd, 0x6b, 0xa3, 0x57, 0x53, 0xa9, 0x84, 0x11, 0xa4, 0x65, 0x32, 0xc9, 0x75, 0xc8, 0xe1,
	0xf2, 0x3a, 0x7b, 0x5c, 0xf3, 0x2b, 0xb1, 0xdb, 0xc6, 0x4c, 0x65, 0xf3, 0xed, 0x52, 0x90, 0x27,
	0xd0, 0x7a, 0xb4, 0x24, 0x6d, 0x8c, 0x1b, 0x93, 0x20, 0x72, 0x80, 0xbc, 0x00, 0xd0, 0x46, 0xc8,
	0xef, 0x3c, 0x5d, 0x25, 0x86, 0x9e, 0x61, 0xa8, 0xc2, 0x90, 0x67, 0xd0, 0x45, 0xc4, 0x74, 0x42,
	0x83, 0x71, 0x63, 0xd2, 0x8b, 0x4a, 0x1c, 0x7e, 0x85, 0xde, 0xdd, 0x4e, 0x72, 0x75, 0x2b, 0x62,
	0x4e, 0x28, 0x74, 0x58, 0x1c, 0x2b, 0xae, 0x35, 0x1e, 0x30, 0x88, 0x0a, 0x48, 0x9e, 0x42, 0x5b,
	0xee, 0x1e, 0x7e, 0xf0, 0x0c, 0xdb, 0x0f, 0xa2, 0x1c, 0x85, 0x7f, 0x9b, 0xd0, 0x5d, 0x08, 0xc3,
	0xe7, 0x86, 0x6f, 0xc8, 0x6b, 0x18, 0xed, 0x85, 0xe1, 0xb1, 0xed, 0x35, 0xdf, 0xc6, 0xfc, 0x37,
	0x76, 0x69, 0x45, 0x35, 0x96, 0xbc, 0x81, 0x8b, 0x92, 0xf9, 0x96, 0x9f, 0xe7, 0xda, 0x1e, 0xf1,
	0x7e, 0xe2, 0xa0, 0x36, 0x31, 0x7e, 0xdc, 0x19, 0xa6, 0x0c, 0x6d, 0xba, 0x89, 0x3d, 0x43, 0x9e,
	0x43, 0x2f, 0x47, 0x42, 0xd2, 0x16, 0x86, 0x3d, 0x41, 0xc6, 0xd0, 0x97, 0x5c, 0xa5, 0x22, 0x76,
	0xe5, 0x6d, 0x8c, 0x57, 0x29, 0xdb, 0xbf, 0x80, 0x42, 0xd2, 0x8e, 0xeb, 0xef, 0x19, 0x2b, 0x47,
	0xe2, 0xd4, 0xee, 0x62, 0x2c, 0x47, 0x96, 0xb7, 0x13, 0xcc, 0x6f, 0x68, 0xcf, 0xc9, 0xe4, 0x10,
	0xf9, 0x0c, 0xb0, 0x66, 0xda, 0x5c, 0x5f, 0xd9, 0x2d, 0x52, 0x18, 0x37, 0x26, 0xfd, 0x19, 0x9d,
	0xe2, 0xa2, 0xa7, 0x47, 0x5b, 0x8e, 0x2a, 0xb9, 0xf6, 0xae, 0x3a, 0xd9, 0x2d, 0x97, 0x6b, 0x7e,
	0x9f, 0x49, 0x4e, 0xfb, 0xee, 0xae, 0x15, 0x8a, 0xbc, 0x07, 0xd8, 0xb3, 0x75, 0x1a, 0x33, 0x23,
	0x94, 0xa6, 0x83, 0x71, 0x30, 0xe9, 0xcf, 0x2e, 0xf2, 0xde, 0xe5, 0x6a, 0xa3, 0x4a, 0x0e, 0xf9,
	0x04, 0xc3, 0xbd, 0x5a, 0x2e, 0x7c, 0xd1, 0xf0, 0x44, 0xd1, 0x61, 0x1a, 0xf9, 0x02, 0xe7, 0x5b,
	0xb1, 0x38, 0xa8, 0x1c, 0x9d, 0xa8, 0xac, 0x27, 0x86, 0xff, 0x1a, 0xd0, 0xbd, 0xf9, 0x29, 0xb4,
	0x35, 0x0b, 0x79, 0x0b, 0xdd, 0x7d, 0x6e, 0x1a, 0xb4, 0x48, 0x7f, 0x76, 0x9e, 0x77, 0x28, 0xbc,
	0x14, 0x95, 0x09, 0xe4, 0x15, 0x0c, 0xed, 0xf7, 0x7d, 0xba, 0xe1, 0xda, 0xb0, 0x8d, 0xcc, 0x0d,
	0x7e, 0x48, 0x16, 0xde, 0x53, 0xde, 0x7b, 0x81, 0xf7, 0x9e, 0x3a, 0xf2, 0x9e, 0xaa, 0x7a, 0xaf,
	0xe9, 0xbd, 0x57, 0xe5, 0xad, 0x8b, 0x74, 0xba, 0xda, 0x32, 0xb3, 0x53, 0x1c, 0x5d, 0x34, 0x88,
	0x3c, 0x11, 0x7e, 0x84, 0x61, 0x31, 0x50, 0xc4, 0xe5, 0x3a, 0x23, 0x2f, 0xa1, 0x69, 0x5b, 0xd4,
	0x26, 0x2a, 0x73, 0x30, 0x18, 0xfe, 0x39, 0x03, 0xb0, 0xd4, 0xad, 0x30, 0xe9, 0xf2, 0x54, 0x4d,
	0xa9, 0x02, 0x06, 0xad, 0x1b, 0x9d, 0xbf, 0xd0, 0x8d, 0xf9, 0xfb, 0xf6, 0x8c, 0x7d, 0xdf, 0x09,
	0xd3, 0x09, 0x46, 0x03, 0xbc, 0x66, 0x89, 0xc9, 0xc4, 0xee, 0xcc, 0x1e, 0xe5, 0xf5, 0x73, 0xcf,
	0xa5, 0x4e, 0xfb, 0x4c, 0x2f, 0x61, 0x0b, 0x25, 0xac, 0xd3, 0xe4, 0x1d, 0x5c, 0x7a, 0xaa, 0x10,
	0xb1, 0x8d, 0x07, 0x1f, 0x07, 0x0e, 0x55, 0xec, 0xd4, 0x54, 0x7c, 0x68, 0xe3, 0x4f, 0xef, 0xc3,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x49, 0x1a, 0xb6, 0x06, 0x05, 0x00, 0x00,
}
