syntax = "proto3";

import "transaction.proto";

package types;

//竞猜游戏内容
message GuessGame {
    string gameId        = 1;  //游戏ID
    int32 status         = 2;  //游戏的状态：创建->投注->截止投注->开奖
    int32 preStatus      = 3;
    int64  startTime     = 4;  //创建游戏的时间
    int64  startHeight   = 5;  //创建游戏的时间
    string startTxHash   = 6;  //创建游戏的交易hash
    string topic         = 7;  //主题
    string category      = 8;  //分类
    string options       = 9;  //选项
    int64 maxBetHeight   = 10;  //截止下注的块高
    int64 maxBetsOneTime = 11; //单次可以下多少注，默认100
    int64 maxBetsNumber  = 12; //最多可以下多少注
    int64 devFeeFactor   = 13; //开发者抽成比例
    string devFeeAddr    = 14; //开发者地址
    int64 platFeeFactor  = 15; //平台抽成比例
    string platFeeAddr   = 16; //平台地址
    int64 expireHeight   = 17; //游戏过期区块高度
    string adminAddr     = 18; //游戏创建者地址,只有该地址可以开奖
    int64 betsNumber     = 19; //已下注数,如果数量达到maxBetsNumber，则不允许再下注
    repeated GuessPlayer plays = 20; //参与游戏下注的玩家投注信息
    string result        = 21;        //公布的中奖结果
    GuessBetStat betStat = 22;
    int64 index          = 23;
    int64 preIndex       = 24;
    bool drivenByAdmin   = 25;
}

message GuessPlayer {
    string addr = 1;
    GuessBet bet = 2;
}

message GuessBet {
    string option = 1;
    int64  betsNumber = 2;
    bool    isWinner = 3;
    int64  profit = 4;
    int64 index = 5;
    int64 preIndex = 6;
}

message GuessBetStat {
    int64 totalBetTimes = 1;
    int64 totalBetsNumber = 2;
    repeated GuessBetStatItem items = 3;
}

message GuessBetStatItem {
    string option = 1;
    int64 betsNumber = 2;
    int64 betsTimes = 3;
}

//游戏状态
message GuessGameAction {
    oneof value {
        GuessGameStart start     = 1;
        GuessGameBet bet         = 2;
        GuessGameStopBet stopBet = 3;
        GuessGameAbort  abort    = 4;
        GuessGamePublish publish = 5;
        GuessGameQuery query     = 6;
    }
    int32 ty = 7;
}

//游戏启动
message GuessGameStart{
    string topic     = 1;
    string options      = 2;
    string category     = 3;
    int64 maxBetHeight  = 4;
    int64 maxBetsOneTime= 5;
    int64 maxBetsNumber = 6;
    int64 devFeeFactor   = 7; //开发者抽成比例
    string devFeeAddr    = 8; //开发者地址
    int64 platFeeFactor  = 9; //平台抽成比例
    string platFeeAddr   = 10; //平台地址
    int64 expireHeight   = 11;
    bool drivenByAdmin   = 12;
}

//参与游戏下注
message GuessGameBet{
    string gameId     = 1;
    string option     = 2;
    int64  betsNum    = 3;
}

//游戏停止下注
message GuessGameStopBet{
    string gameId     = 1;
}

//游戏异常终止,退还下注
message GuessGameAbort{
    string gameId     = 1;
}

//游戏结果揭晓
message GuessGamePublish{
    string gameId     = 1;
    string result     = 2;
}

//查询游戏结果
message GuessGameQuery{
    string gameId     = 1;
    uint32 ty          = 2;
}


message QueryGuessGameInfo {
    string gameId = 1;
    string addr   = 2;
    int32  status = 3;
    int64  index  = 4;
    string adminAddr = 5;
    string category = 6;
}

message ReplyGuessGameInfo {
    GuessGame game = 1;
}

message QueryGuessGameInfos {
    repeated string gameIds = 1;
}

message ReplyGuessGameInfos {
    repeated GuessGame games = 1;
}

message ReceiptGuessGame {
    string   gameId           = 1;
    int32   preStatus        = 2;
    int32   status           = 3;
    string   addr             = 4;
    string   adminAddr        = 5;
    int64    preIndex         = 6;
    int64    index            = 7;
    string   category         = 8;
    bool     statusChange     = 9;
}

message GuessStartTxReq {
    string topic              = 1;
    string options            = 2;
    string category           = 3;
    int64  maxHeight          = 4;
    int64 maxBetHeight        = 5;
    int64 maxBetsOneTime      = 6;
    int64 maxBetsNumber       = 7;
    int64  devFeeFactor       = 8;
    string devFeeAddr         = 9;
    int64  platFeeFactor      = 10;
    string platFeeAddr        = 11;
    int64 expireHeight        = 12;
    int64 fee                 = 13;
}

message GuessBetTxReq {
    string gameId    = 1;
    string option    = 2;
    int64  bets      = 3;
    int64 fee        = 4;
}

message GuessStopBetTxReq {
    string gameId    = 1;
    int64 fee        = 2;
}

message GuessAbortTxReq {
    string gameId    = 1;
    int64 fee        = 2;
}

message GuessPublishTxReq {
    string gameId    = 1;
    string result    = 2;
    int64 fee        = 3;
}

// 索引value值
message GuessGameRecord {
    string gameId = 1;
    int32  status = 2;
    int64  index  = 3;
}

message GuessGameIndexRecord {
    string gameId = 1;
    int64  index  = 2;
}

message GuessGameRecords {
    repeated GuessGameRecord records = 1;
}


// guess 对外提供服务的接口
service guess {
    //游戏开始
    rpc GuessStart(GuessGameStart) returns (UnsignTx) {}
    //游戏下注
    rpc GuessBet(GuessGameBet) returns (UnsignTx) {}
    //游戏终止下注
    rpc GuessStopBet(GuessGameStopBet) returns (UnsignTx) {}
    //游戏异常终止
    rpc GuessAbort(GuessGameAbort) returns (UnsignTx) {}
    //游戏结束
    rpc GuessPublish(GuessGamePublish) returns (UnsignTx) {}
}
