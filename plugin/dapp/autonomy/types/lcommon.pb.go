// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lcommon.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VoteResult struct {
	// 总票数
	TotalVotes int32 `protobuf:"varint,1,opt,name=totalVotes" json:"totalVotes,omitempty"`
	// 赞成票
	ApproveVotes int32 `protobuf:"varint,2,opt,name=approveVotes" json:"approveVotes,omitempty"`
	// 反对票
	OpposeVotes int32 `protobuf:"varint,3,opt,name=opposeVotes" json:"opposeVotes,omitempty"`
	// 是否通过
	Pass bool `protobuf:"varint,4,opt,name=pass" json:"pass,omitempty"`
}

func (m *VoteResult) Reset()                    { *m = VoteResult{} }
func (m *VoteResult) String() string            { return proto.CompactTextString(m) }
func (*VoteResult) ProtoMessage()               {}
func (*VoteResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *VoteResult) GetTotalVotes() int32 {
	if m != nil {
		return m.TotalVotes
	}
	return 0
}

func (m *VoteResult) GetApproveVotes() int32 {
	if m != nil {
		return m.ApproveVotes
	}
	return 0
}

func (m *VoteResult) GetOpposeVotes() int32 {
	if m != nil {
		return m.OpposeVotes
	}
	return 0
}

func (m *VoteResult) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

type PublicVote struct {
	// 是否需要公示
	Publicity bool `protobuf:"varint,1,opt,name=publicity" json:"publicity,omitempty"`
	// 总票数
	TotalVotes int32 `protobuf:"varint,2,opt,name=totalVotes" json:"totalVotes,omitempty"`
	// 全体持票人反对票
	OpposeVotes int32 `protobuf:"varint,3,opt,name=opposeVotes" json:"opposeVotes,omitempty"`
	// 是否通过
	PubPass bool `protobuf:"varint,4,opt,name=pubPass" json:"pubPass,omitempty"`
}

func (m *PublicVote) Reset()                    { *m = PublicVote{} }
func (m *PublicVote) String() string            { return proto.CompactTextString(m) }
func (*PublicVote) ProtoMessage()               {}
func (*PublicVote) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PublicVote) GetPublicity() bool {
	if m != nil {
		return m.Publicity
	}
	return false
}

func (m *PublicVote) GetTotalVotes() int32 {
	if m != nil {
		return m.TotalVotes
	}
	return 0
}

func (m *PublicVote) GetOpposeVotes() int32 {
	if m != nil {
		return m.OpposeVotes
	}
	return 0
}

func (m *PublicVote) GetPubPass() bool {
	if m != nil {
		return m.PubPass
	}
	return false
}

type VotesRecord struct {
	Address []string `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (m *VotesRecord) Reset()                    { *m = VotesRecord{} }
func (m *VotesRecord) String() string            { return proto.CompactTextString(m) }
func (*VotesRecord) ProtoMessage()               {}
func (*VotesRecord) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *VotesRecord) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

type RuleConfig struct {
	// 董事会成员参与率,以%为单位,只保留整数部分
	BoardAttendRatio int32 `protobuf:"varint,1,opt,name=boardAttendRatio" json:"boardAttendRatio,omitempty"`
	// 董事会成员赞成率
	BoardApproveRatio int32 `protobuf:"varint,2,opt,name=boardApproveRatio" json:"boardApproveRatio,omitempty"`
	// 全体持票人否决率
	PubOpposeRatio int32 `protobuf:"varint,3,opt,name=pubOpposeRatio" json:"pubOpposeRatio,omitempty"`
	// 提案金额
	ProposalAmount int64 `protobuf:"varint,4,opt,name=proposalAmount" json:"proposalAmount,omitempty"`
	// 重大项目公示金额阈值
	LargeProjectAmount int64 `protobuf:"varint,5,opt,name=largeProjectAmount" json:"largeProjectAmount,omitempty"`
	// 重大项目公示时间（以区块数为单位）
	PublicPeriod int32 `protobuf:"varint,6,opt,name=publicPeriod" json:"publicPeriod,omitempty"`
}

func (m *RuleConfig) Reset()                    { *m = RuleConfig{} }
func (m *RuleConfig) String() string            { return proto.CompactTextString(m) }
func (*RuleConfig) ProtoMessage()               {}
func (*RuleConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *RuleConfig) GetBoardAttendRatio() int32 {
	if m != nil {
		return m.BoardAttendRatio
	}
	return 0
}

func (m *RuleConfig) GetBoardApproveRatio() int32 {
	if m != nil {
		return m.BoardApproveRatio
	}
	return 0
}

func (m *RuleConfig) GetPubOpposeRatio() int32 {
	if m != nil {
		return m.PubOpposeRatio
	}
	return 0
}

func (m *RuleConfig) GetProposalAmount() int64 {
	if m != nil {
		return m.ProposalAmount
	}
	return 0
}

func (m *RuleConfig) GetLargeProjectAmount() int64 {
	if m != nil {
		return m.LargeProjectAmount
	}
	return 0
}

func (m *RuleConfig) GetPublicPeriod() int32 {
	if m != nil {
		return m.PublicPeriod
	}
	return 0
}

type ActiveBoard struct {
	Boards      []string `protobuf:"bytes,1,rep,name=boards" json:"boards,omitempty"`
	Revboards   []string `protobuf:"bytes,2,rep,name=revboards" json:"revboards,omitempty"`
	Amount      int64    `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	StartHeight int64    `protobuf:"varint,4,opt,name=startHeight" json:"startHeight,omitempty"`
}

func (m *ActiveBoard) Reset()                    { *m = ActiveBoard{} }
func (m *ActiveBoard) String() string            { return proto.CompactTextString(m) }
func (*ActiveBoard) ProtoMessage()               {}
func (*ActiveBoard) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ActiveBoard) GetBoards() []string {
	if m != nil {
		return m.Boards
	}
	return nil
}

func (m *ActiveBoard) GetRevboards() []string {
	if m != nil {
		return m.Revboards
	}
	return nil
}

func (m *ActiveBoard) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ActiveBoard) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*VoteResult)(nil), "types.VoteResult")
	proto.RegisterType((*PublicVote)(nil), "types.PublicVote")
	proto.RegisterType((*VotesRecord)(nil), "types.VotesRecord")
	proto.RegisterType((*RuleConfig)(nil), "types.RuleConfig")
	proto.RegisterType((*ActiveBoard)(nil), "types.ActiveBoard")
}

func init() { proto.RegisterFile("lcommon.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0x86, 0x21, 0xc9, 0x76, 0xed, 0x73, 0x5b, 0xb4, 0x1c, 0x0a, 0x0d, 0x45, 0x61, 0x68, 0x68,
	0x8d, 0xa2, 0xf0, 0xd2, 0x27, 0x70, 0xb2, 0x64, 0x8b, 0xc0, 0x21, 0x3b, 0x25, 0x31, 0x8e, 0x02,
	0x59, 0x47, 0x90, 0x27, 0x03, 0x1e, 0xb2, 0x66, 0xc8, 0x53, 0x07, 0x3c, 0x4a, 0xb0, 0x62, 0x07,
	0xc8, 0xa6, 0xfb, 0xee, 0x13, 0xf0, 0xdf, 0x1d, 0xe1, 0x4b, 0x53, 0xe2, 0x7e, 0x8f, 0xed, 0xc6,
	0x58, 0x24, 0x14, 0x53, 0x3a, 0x1a, 0xed, 0xb2, 0xe7, 0x08, 0xe0, 0x0e, 0x49, 0x4b, 0xed, 0xba,
	0x86, 0xc4, 0x2f, 0x00, 0x42, 0x52, 0x8d, 0x47, 0x2e, 0x8d, 0x56, 0xd1, 0x7a, 0x2a, 0x47, 0x44,
	0x64, 0xf0, 0x59, 0x19, 0x63, 0xf1, 0xa0, 0x83, 0x11, 0xb3, 0xf1, 0x86, 0x89, 0x15, 0x2c, 0xd1,
	0x18, 0x74, 0xbd, 0x92, 0xb0, 0x32, 0x46, 0x42, 0xc0, 0xc4, 0x28, 0xe7, 0xd2, 0xc9, 0x2a, 0x5a,
	0xcf, 0x25, 0x7f, 0x73, 0x90, 0xbc, 0x2b, 0x9a, 0xba, 0xf4, 0x8e, 0xf8, 0x09, 0x0b, 0xc3, 0x55,
	0x4d, 0x47, 0xce, 0x31, 0x97, 0x27, 0x70, 0x16, 0x33, 0xbe, 0x88, 0xf9, 0x71, 0x84, 0x14, 0x3e,
	0x99, 0xae, 0xc8, 0x4f, 0x29, 0x86, 0x32, 0xfb, 0x03, 0x4b, 0x56, 0xa4, 0x2e, 0xd1, 0x56, 0x5e,
	0x54, 0x55, 0x65, 0xb5, 0xf3, 0xeb, 0x48, 0xd6, 0x0b, 0x39, 0x94, 0xd9, 0x4b, 0x0c, 0x20, 0xbb,
	0x46, 0x5f, 0x63, 0x7b, 0x5f, 0xef, 0xc4, 0x5f, 0xf8, 0x56, 0xa0, 0xb2, 0xd5, 0x96, 0x48, 0xb7,
	0x95, 0x54, 0x54, 0x63, 0xbf, 0xc0, 0x0b, 0x2e, 0xfe, 0xc1, 0xf7, 0xc0, 0xc2, 0xde, 0x82, 0x1c,
	0xc6, 0xb8, 0x6c, 0x88, 0xdf, 0xf0, 0xd5, 0x74, 0xc5, 0x2d, 0xa7, 0x0f, 0x6a, 0x18, 0xe8, 0x8c,
	0xb2, 0x67, 0xd1, 0xa0, 0x53, 0xcd, 0x76, 0x8f, 0x5d, 0x4b, 0x3c, 0x5a, 0x22, 0xcf, 0xa8, 0xd8,
	0x80, 0x68, 0x94, 0xdd, 0xe9, 0xdc, 0xe2, 0xa3, 0x2e, 0xa9, 0x77, 0xa7, 0xec, 0xbe, 0xd3, 0xf1,
	0x47, 0x0f, 0xab, 0xcf, 0xb5, 0xad, 0xb1, 0x4a, 0x67, 0xe1, 0xe8, 0x63, 0x96, 0x3d, 0xc1, 0x72,
	0x5b, 0x52, 0x7d, 0xd0, 0x57, 0x3e, 0xbe, 0xf8, 0x01, 0x33, 0x9e, 0x63, 0x58, 0x5a, 0x5f, 0xf9,
	0xb3, 0x5a, 0x7d, 0xe8, 0x5b, 0x31, 0xb7, 0x4e, 0xc0, 0xff, 0xa5, 0x42, 0x98, 0x84, 0xc3, 0xf4,
	0x95, 0x3f, 0xa7, 0x23, 0x65, 0xe9, 0x46, 0xd7, 0xbb, 0x87, 0x61, 0xaa, 0x31, 0x2a, 0x66, 0xfc,
	0xa8, 0xff, 0xbf, 0x06, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xdc, 0x0b, 0x33, 0xe5, 0x02, 0x00, 0x00,
}
