// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tendermint.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	tendermint.proto
	valnode.proto

It has these top-level messages:
	BlockID
	TendermintBitArray
	Vote
	TendermintCommit
	TendermintBlockInfo
	BlockSize
	TxSize
	BlockGossip
	EvidenceParams
	ConsensusParams
	Validator
	ValidatorSet
	State
	DuplicateVoteEvidence
	EvidenceEnvelope
	EvidenceData
	TendermintBlockHeader
	TendermintBlock
	Proposal
	NewRoundStepMsg
	ValidBlockMsg
	CommitStepMsg
	ProposalPOLMsg
	HasVoteMsg
	VoteSetMaj23Msg
	VoteSetBitsMsg
	Heartbeat
	IsHealthy
	ValNode
	ValNodes
	ValNodeAction
	ReqNodeInfo
	ReqBlockInfo
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types3 "github.com/33cn/chain33/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockID struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlockID) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type TendermintBitArray struct {
	Bits  int32    `protobuf:"varint,1,opt,name=Bits" json:"Bits,omitempty"`
	Elems []uint64 `protobuf:"varint,2,rep,packed,name=Elems" json:"Elems,omitempty"`
}

func (m *TendermintBitArray) Reset()                    { *m = TendermintBitArray{} }
func (m *TendermintBitArray) String() string            { return proto.CompactTextString(m) }
func (*TendermintBitArray) ProtoMessage()               {}
func (*TendermintBitArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TendermintBitArray) GetBits() int32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *TendermintBitArray) GetElems() []uint64 {
	if m != nil {
		return m.Elems
	}
	return nil
}

type Vote struct {
	ValidatorAddress []byte   `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"`
	ValidatorIndex   int32    `protobuf:"varint,2,opt,name=ValidatorIndex" json:"ValidatorIndex,omitempty"`
	Height           int64    `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
	Round            int32    `protobuf:"varint,4,opt,name=Round" json:"Round,omitempty"`
	Timestamp        int64    `protobuf:"varint,5,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Type             uint32   `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty"`
	BlockID          *BlockID `protobuf:"bytes,7,opt,name=BlockID" json:"BlockID,omitempty"`
	Signature        []byte   `protobuf:"bytes,8,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Vote) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *Vote) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Vote) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Vote) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Vote) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Vote) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Vote) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *Vote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TendermintCommit struct {
	BlockID    *BlockID `protobuf:"bytes,1,opt,name=BlockID" json:"BlockID,omitempty"`
	Precommits []*Vote  `protobuf:"bytes,2,rep,name=Precommits" json:"Precommits,omitempty"`
}

func (m *TendermintCommit) Reset()                    { *m = TendermintCommit{} }
func (m *TendermintCommit) String() string            { return proto.CompactTextString(m) }
func (*TendermintCommit) ProtoMessage()               {}
func (*TendermintCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TendermintCommit) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *TendermintCommit) GetPrecommits() []*Vote {
	if m != nil {
		return m.Precommits
	}
	return nil
}

type TendermintBlockInfo struct {
	State    *State           `protobuf:"bytes,2,opt,name=State" json:"State,omitempty"`
	Proposal *Proposal        `protobuf:"bytes,3,opt,name=Proposal" json:"Proposal,omitempty"`
	Block    *TendermintBlock `protobuf:"bytes,4,opt,name=block" json:"block,omitempty"`
}

func (m *TendermintBlockInfo) Reset()                    { *m = TendermintBlockInfo{} }
func (m *TendermintBlockInfo) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlockInfo) ProtoMessage()               {}
func (*TendermintBlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TendermintBlockInfo) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *TendermintBlockInfo) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *TendermintBlockInfo) GetBlock() *TendermintBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

type BlockSize struct {
	MaxBytes int32 `protobuf:"varint,1,opt,name=MaxBytes" json:"MaxBytes,omitempty"`
	MaxTxs   int32 `protobuf:"varint,2,opt,name=MaxTxs" json:"MaxTxs,omitempty"`
	MaxGas   int64 `protobuf:"varint,3,opt,name=MaxGas" json:"MaxGas,omitempty"`
}

func (m *BlockSize) Reset()                    { *m = BlockSize{} }
func (m *BlockSize) String() string            { return proto.CompactTextString(m) }
func (*BlockSize) ProtoMessage()               {}
func (*BlockSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockSize) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *BlockSize) GetMaxTxs() int32 {
	if m != nil {
		return m.MaxTxs
	}
	return 0
}

func (m *BlockSize) GetMaxGas() int64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

type TxSize struct {
	MaxBytes int32 `protobuf:"varint,1,opt,name=MaxBytes" json:"MaxBytes,omitempty"`
	MaxGas   int64 `protobuf:"varint,2,opt,name=MaxGas" json:"MaxGas,omitempty"`
}

func (m *TxSize) Reset()                    { *m = TxSize{} }
func (m *TxSize) String() string            { return proto.CompactTextString(m) }
func (*TxSize) ProtoMessage()               {}
func (*TxSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TxSize) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *TxSize) GetMaxGas() int64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

type BlockGossip struct {
	BlockPartSizeBytes int32 `protobuf:"varint,1,opt,name=BlockPartSizeBytes" json:"BlockPartSizeBytes,omitempty"`
}

func (m *BlockGossip) Reset()                    { *m = BlockGossip{} }
func (m *BlockGossip) String() string            { return proto.CompactTextString(m) }
func (*BlockGossip) ProtoMessage()               {}
func (*BlockGossip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BlockGossip) GetBlockPartSizeBytes() int32 {
	if m != nil {
		return m.BlockPartSizeBytes
	}
	return 0
}

type EvidenceParams struct {
	MaxAge int64 `protobuf:"varint,1,opt,name=MaxAge" json:"MaxAge,omitempty"`
}

func (m *EvidenceParams) Reset()                    { *m = EvidenceParams{} }
func (m *EvidenceParams) String() string            { return proto.CompactTextString(m) }
func (*EvidenceParams) ProtoMessage()               {}
func (*EvidenceParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EvidenceParams) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

type ConsensusParams struct {
	BlockSize      *BlockSize      `protobuf:"bytes,1,opt,name=BlockSize" json:"BlockSize,omitempty"`
	TxSize         *TxSize         `protobuf:"bytes,2,opt,name=TxSize" json:"TxSize,omitempty"`
	BlockGossip    *BlockGossip    `protobuf:"bytes,3,opt,name=BlockGossip" json:"BlockGossip,omitempty"`
	EvidenceParams *EvidenceParams `protobuf:"bytes,4,opt,name=EvidenceParams" json:"EvidenceParams,omitempty"`
}

func (m *ConsensusParams) Reset()                    { *m = ConsensusParams{} }
func (m *ConsensusParams) String() string            { return proto.CompactTextString(m) }
func (*ConsensusParams) ProtoMessage()               {}
func (*ConsensusParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ConsensusParams) GetBlockSize() *BlockSize {
	if m != nil {
		return m.BlockSize
	}
	return nil
}

func (m *ConsensusParams) GetTxSize() *TxSize {
	if m != nil {
		return m.TxSize
	}
	return nil
}

func (m *ConsensusParams) GetBlockGossip() *BlockGossip {
	if m != nil {
		return m.BlockGossip
	}
	return nil
}

func (m *ConsensusParams) GetEvidenceParams() *EvidenceParams {
	if m != nil {
		return m.EvidenceParams
	}
	return nil
}

type Validator struct {
	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PubKey      []byte `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	VotingPower int64  `protobuf:"varint,3,opt,name=VotingPower" json:"VotingPower,omitempty"`
	Accum       int64  `protobuf:"varint,4,opt,name=Accum" json:"Accum,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Validator) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Validator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetVotingPower() int64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *Validator) GetAccum() int64 {
	if m != nil {
		return m.Accum
	}
	return 0
}

type ValidatorSet struct {
	Validators []*Validator `protobuf:"bytes,1,rep,name=Validators" json:"Validators,omitempty"`
	Proposer   *Validator   `protobuf:"bytes,2,opt,name=Proposer" json:"Proposer,omitempty"`
}

func (m *ValidatorSet) Reset()                    { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string            { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()               {}
func (*ValidatorSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ValidatorSet) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidatorSet) GetProposer() *Validator {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type State struct {
	ChainID                          string           `protobuf:"bytes,1,opt,name=ChainID" json:"ChainID,omitempty"`
	LastBlockHeight                  int64            `protobuf:"varint,2,opt,name=LastBlockHeight" json:"LastBlockHeight,omitempty"`
	LastBlockTotalTx                 int64            `protobuf:"varint,3,opt,name=LastBlockTotalTx" json:"LastBlockTotalTx,omitempty"`
	LastBlockID                      *BlockID         `protobuf:"bytes,4,opt,name=LastBlockID" json:"LastBlockID,omitempty"`
	LastBlockTime                    int64            `protobuf:"varint,5,opt,name=LastBlockTime" json:"LastBlockTime,omitempty"`
	Validators                       *ValidatorSet    `protobuf:"bytes,6,opt,name=Validators" json:"Validators,omitempty"`
	LastValidators                   *ValidatorSet    `protobuf:"bytes,7,opt,name=LastValidators" json:"LastValidators,omitempty"`
	LastHeightValidatorsChanged      int64            `protobuf:"varint,8,opt,name=LastHeightValidatorsChanged" json:"LastHeightValidatorsChanged,omitempty"`
	ConsensusParams                  *ConsensusParams `protobuf:"bytes,9,opt,name=ConsensusParams" json:"ConsensusParams,omitempty"`
	LastHeightConsensusParamsChanged int64            `protobuf:"varint,10,opt,name=LastHeightConsensusParamsChanged" json:"LastHeightConsensusParamsChanged,omitempty"`
	LastResultsHash                  []byte           `protobuf:"bytes,11,opt,name=LastResultsHash,proto3" json:"LastResultsHash,omitempty"`
	AppHash                          []byte           `protobuf:"bytes,12,opt,name=AppHash,proto3" json:"AppHash,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *State) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *State) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *State) GetLastBlockTotalTx() int64 {
	if m != nil {
		return m.LastBlockTotalTx
	}
	return 0
}

func (m *State) GetLastBlockID() *BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return nil
}

func (m *State) GetLastBlockTime() int64 {
	if m != nil {
		return m.LastBlockTime
	}
	return 0
}

func (m *State) GetValidators() *ValidatorSet {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *State) GetLastValidators() *ValidatorSet {
	if m != nil {
		return m.LastValidators
	}
	return nil
}

func (m *State) GetLastHeightValidatorsChanged() int64 {
	if m != nil {
		return m.LastHeightValidatorsChanged
	}
	return 0
}

func (m *State) GetConsensusParams() *ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return nil
}

func (m *State) GetLastHeightConsensusParamsChanged() int64 {
	if m != nil {
		return m.LastHeightConsensusParamsChanged
	}
	return 0
}

func (m *State) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *State) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

type DuplicateVoteEvidence struct {
	PubKey string `protobuf:"bytes,1,opt,name=pubKey" json:"pubKey,omitempty"`
	VoteA  *Vote  `protobuf:"bytes,2,opt,name=voteA" json:"voteA,omitempty"`
	VoteB  *Vote  `protobuf:"bytes,3,opt,name=voteB" json:"voteB,omitempty"`
}

func (m *DuplicateVoteEvidence) Reset()                    { *m = DuplicateVoteEvidence{} }
func (m *DuplicateVoteEvidence) String() string            { return proto.CompactTextString(m) }
func (*DuplicateVoteEvidence) ProtoMessage()               {}
func (*DuplicateVoteEvidence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DuplicateVoteEvidence) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *DuplicateVoteEvidence) GetVoteA() *Vote {
	if m != nil {
		return m.VoteA
	}
	return nil
}

func (m *DuplicateVoteEvidence) GetVoteB() *Vote {
	if m != nil {
		return m.VoteB
	}
	return nil
}

type EvidenceEnvelope struct {
	TypeName string `protobuf:"bytes,1,opt,name=typeName" json:"typeName,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EvidenceEnvelope) Reset()                    { *m = EvidenceEnvelope{} }
func (m *EvidenceEnvelope) String() string            { return proto.CompactTextString(m) }
func (*EvidenceEnvelope) ProtoMessage()               {}
func (*EvidenceEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *EvidenceEnvelope) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *EvidenceEnvelope) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EvidenceData struct {
	Evidence []*EvidenceEnvelope `protobuf:"bytes,1,rep,name=evidence" json:"evidence,omitempty"`
}

func (m *EvidenceData) Reset()                    { *m = EvidenceData{} }
func (m *EvidenceData) String() string            { return proto.CompactTextString(m) }
func (*EvidenceData) ProtoMessage()               {}
func (*EvidenceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EvidenceData) GetEvidence() []*EvidenceEnvelope {
	if m != nil {
		return m.Evidence
	}
	return nil
}

type TendermintBlockHeader struct {
	ChainID         string   `protobuf:"bytes,1,opt,name=chainID" json:"chainID,omitempty"`
	Height          int64    `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Round           int64    `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Time            int64    `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	NumTxs          int64    `protobuf:"varint,5,opt,name=numTxs" json:"numTxs,omitempty"`
	LastBlockID     *BlockID `protobuf:"bytes,6,opt,name=lastBlockID" json:"lastBlockID,omitempty"`
	TotalTxs        int64    `protobuf:"varint,7,opt,name=totalTxs" json:"totalTxs,omitempty"`
	LastCommitHash  []byte   `protobuf:"bytes,8,opt,name=lastCommitHash,proto3" json:"lastCommitHash,omitempty"`
	ValidatorsHash  []byte   `protobuf:"bytes,9,opt,name=validatorsHash,proto3" json:"validatorsHash,omitempty"`
	ConsensusHash   []byte   `protobuf:"bytes,10,opt,name=consensusHash,proto3" json:"consensusHash,omitempty"`
	AppHash         []byte   `protobuf:"bytes,11,opt,name=appHash,proto3" json:"appHash,omitempty"`
	LastResultsHash []byte   `protobuf:"bytes,12,opt,name=lastResultsHash,proto3" json:"lastResultsHash,omitempty"`
	EvidenceHash    []byte   `protobuf:"bytes,13,opt,name=evidenceHash,proto3" json:"evidenceHash,omitempty"`
	ProposerAddr    []byte   `protobuf:"bytes,14,opt,name=proposerAddr,proto3" json:"proposerAddr,omitempty"`
}

func (m *TendermintBlockHeader) Reset()                    { *m = TendermintBlockHeader{} }
func (m *TendermintBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlockHeader) ProtoMessage()               {}
func (*TendermintBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TendermintBlockHeader) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *TendermintBlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TendermintBlockHeader) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *TendermintBlockHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TendermintBlockHeader) GetNumTxs() int64 {
	if m != nil {
		return m.NumTxs
	}
	return 0
}

func (m *TendermintBlockHeader) GetLastBlockID() *BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return nil
}

func (m *TendermintBlockHeader) GetTotalTxs() int64 {
	if m != nil {
		return m.TotalTxs
	}
	return 0
}

func (m *TendermintBlockHeader) GetLastCommitHash() []byte {
	if m != nil {
		return m.LastCommitHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetValidatorsHash() []byte {
	if m != nil {
		return m.ValidatorsHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetConsensusHash() []byte {
	if m != nil {
		return m.ConsensusHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetEvidenceHash() []byte {
	if m != nil {
		return m.EvidenceHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetProposerAddr() []byte {
	if m != nil {
		return m.ProposerAddr
	}
	return nil
}

type TendermintBlock struct {
	Header     *TendermintBlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Data       *types3.Block          `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Evidence   *EvidenceData          `protobuf:"bytes,3,opt,name=evidence" json:"evidence,omitempty"`
	LastCommit *TendermintCommit      `protobuf:"bytes,4,opt,name=lastCommit" json:"lastCommit,omitempty"`
}

func (m *TendermintBlock) Reset()                    { *m = TendermintBlock{} }
func (m *TendermintBlock) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlock) ProtoMessage()               {}
func (*TendermintBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TendermintBlock) GetHeader() *TendermintBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TendermintBlock) GetData() *types3.Block {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TendermintBlock) GetEvidence() *EvidenceData {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *TendermintBlock) GetLastCommit() *TendermintCommit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type Proposal struct {
	Height     int64    `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round      int32    `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Timestamp  int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	POLRound   int32    `protobuf:"varint,4,opt,name=POLRound" json:"POLRound,omitempty"`
	POLBlockID *BlockID `protobuf:"bytes,5,opt,name=POLBlockID" json:"POLBlockID,omitempty"`
	Signature  []byte   `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Blockhash  []byte   `protobuf:"bytes,7,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Proposal) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Proposal) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Proposal) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Proposal) GetPOLRound() int32 {
	if m != nil {
		return m.POLRound
	}
	return 0
}

func (m *Proposal) GetPOLBlockID() *BlockID {
	if m != nil {
		return m.POLBlockID
	}
	return nil
}

func (m *Proposal) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Proposal) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

type NewRoundStepMsg struct {
	Height                int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round                 int32 `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Step                  int32 `protobuf:"varint,3,opt,name=step" json:"step,omitempty"`
	SecondsSinceStartTime int32 `protobuf:"varint,4,opt,name=secondsSinceStartTime" json:"secondsSinceStartTime,omitempty"`
	LastCommitRound       int32 `protobuf:"varint,5,opt,name=lastCommitRound" json:"lastCommitRound,omitempty"`
}

func (m *NewRoundStepMsg) Reset()                    { *m = NewRoundStepMsg{} }
func (m *NewRoundStepMsg) String() string            { return proto.CompactTextString(m) }
func (*NewRoundStepMsg) ProtoMessage()               {}
func (*NewRoundStepMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NewRoundStepMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NewRoundStepMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NewRoundStepMsg) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *NewRoundStepMsg) GetSecondsSinceStartTime() int32 {
	if m != nil {
		return m.SecondsSinceStartTime
	}
	return 0
}

func (m *NewRoundStepMsg) GetLastCommitRound() int32 {
	if m != nil {
		return m.LastCommitRound
	}
	return 0
}

type ValidBlockMsg struct {
	Height    int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round     int32  `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Blockhash []byte `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	IsCommit  bool   `protobuf:"varint,4,opt,name=isCommit" json:"isCommit,omitempty"`
}

func (m *ValidBlockMsg) Reset()                    { *m = ValidBlockMsg{} }
func (m *ValidBlockMsg) String() string            { return proto.CompactTextString(m) }
func (*ValidBlockMsg) ProtoMessage()               {}
func (*ValidBlockMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ValidBlockMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ValidBlockMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ValidBlockMsg) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ValidBlockMsg) GetIsCommit() bool {
	if m != nil {
		return m.IsCommit
	}
	return false
}

type CommitStepMsg struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *CommitStepMsg) Reset()                    { *m = CommitStepMsg{} }
func (m *CommitStepMsg) String() string            { return proto.CompactTextString(m) }
func (*CommitStepMsg) ProtoMessage()               {}
func (*CommitStepMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CommitStepMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ProposalPOLMsg struct {
	Height           int64               `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	ProposalPOLRound int32               `protobuf:"varint,2,opt,name=proposalPOLRound" json:"proposalPOLRound,omitempty"`
	ProposalPOL      *TendermintBitArray `protobuf:"bytes,3,opt,name=proposalPOL" json:"proposalPOL,omitempty"`
}

func (m *ProposalPOLMsg) Reset()                    { *m = ProposalPOLMsg{} }
func (m *ProposalPOLMsg) String() string            { return proto.CompactTextString(m) }
func (*ProposalPOLMsg) ProtoMessage()               {}
func (*ProposalPOLMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ProposalPOLMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProposalPOLMsg) GetProposalPOLRound() int32 {
	if m != nil {
		return m.ProposalPOLRound
	}
	return 0
}

func (m *ProposalPOLMsg) GetProposalPOL() *TendermintBitArray {
	if m != nil {
		return m.ProposalPOL
	}
	return nil
}

type HasVoteMsg struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round  int32 `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type   int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Index  int32 `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
}

func (m *HasVoteMsg) Reset()                    { *m = HasVoteMsg{} }
func (m *HasVoteMsg) String() string            { return proto.CompactTextString(m) }
func (*HasVoteMsg) ProtoMessage()               {}
func (*HasVoteMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *HasVoteMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *HasVoteMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *HasVoteMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *HasVoteMsg) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type VoteSetMaj23Msg struct {
	Height  int64    `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round   int32    `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type    int32    `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	BlockID *BlockID `protobuf:"bytes,4,opt,name=blockID" json:"blockID,omitempty"`
}

func (m *VoteSetMaj23Msg) Reset()                    { *m = VoteSetMaj23Msg{} }
func (m *VoteSetMaj23Msg) String() string            { return proto.CompactTextString(m) }
func (*VoteSetMaj23Msg) ProtoMessage()               {}
func (*VoteSetMaj23Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *VoteSetMaj23Msg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetMaj23Msg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetMaj23Msg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VoteSetMaj23Msg) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

type VoteSetBitsMsg struct {
	Height  int64               `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round   int32               `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type    int32               `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	BlockID *BlockID            `protobuf:"bytes,4,opt,name=blockID" json:"blockID,omitempty"`
	Votes   *TendermintBitArray `protobuf:"bytes,5,opt,name=votes" json:"votes,omitempty"`
}

func (m *VoteSetBitsMsg) Reset()                    { *m = VoteSetBitsMsg{} }
func (m *VoteSetBitsMsg) String() string            { return proto.CompactTextString(m) }
func (*VoteSetBitsMsg) ProtoMessage()               {}
func (*VoteSetBitsMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *VoteSetBitsMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetBitsMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetBitsMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VoteSetBitsMsg) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *VoteSetBitsMsg) GetVotes() *TendermintBitArray {
	if m != nil {
		return m.Votes
	}
	return nil
}

type Heartbeat struct {
	ValidatorAddress []byte `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	ValidatorIndex   int32  `protobuf:"varint,2,opt,name=validatorIndex" json:"validatorIndex,omitempty"`
	Height           int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Round            int32  `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	Sequence         int32  `protobuf:"varint,5,opt,name=sequence" json:"sequence,omitempty"`
	Signature        []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Heartbeat) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *Heartbeat) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Heartbeat) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Heartbeat) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Heartbeat) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Heartbeat) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type IsHealthy struct {
	IsHealthy bool `protobuf:"varint,1,opt,name=isHealthy" json:"isHealthy,omitempty"`
}

func (m *IsHealthy) Reset()                    { *m = IsHealthy{} }
func (m *IsHealthy) String() string            { return proto.CompactTextString(m) }
func (*IsHealthy) ProtoMessage()               {}
func (*IsHealthy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *IsHealthy) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func init() {
	proto.RegisterType((*BlockID)(nil), "types.BlockID")
	proto.RegisterType((*TendermintBitArray)(nil), "types.TendermintBitArray")
	proto.RegisterType((*Vote)(nil), "types.Vote")
	proto.RegisterType((*TendermintCommit)(nil), "types.TendermintCommit")
	proto.RegisterType((*TendermintBlockInfo)(nil), "types.TendermintBlockInfo")
	proto.RegisterType((*BlockSize)(nil), "types.BlockSize")
	proto.RegisterType((*TxSize)(nil), "types.TxSize")
	proto.RegisterType((*BlockGossip)(nil), "types.BlockGossip")
	proto.RegisterType((*EvidenceParams)(nil), "types.EvidenceParams")
	proto.RegisterType((*ConsensusParams)(nil), "types.ConsensusParams")
	proto.RegisterType((*Validator)(nil), "types.Validator")
	proto.RegisterType((*ValidatorSet)(nil), "types.ValidatorSet")
	proto.RegisterType((*State)(nil), "types.State")
	proto.RegisterType((*DuplicateVoteEvidence)(nil), "types.DuplicateVoteEvidence")
	proto.RegisterType((*EvidenceEnvelope)(nil), "types.EvidenceEnvelope")
	proto.RegisterType((*EvidenceData)(nil), "types.EvidenceData")
	proto.RegisterType((*TendermintBlockHeader)(nil), "types.TendermintBlockHeader")
	proto.RegisterType((*TendermintBlock)(nil), "types.TendermintBlock")
	proto.RegisterType((*Proposal)(nil), "types.Proposal")
	proto.RegisterType((*NewRoundStepMsg)(nil), "types.NewRoundStepMsg")
	proto.RegisterType((*ValidBlockMsg)(nil), "types.ValidBlockMsg")
	proto.RegisterType((*CommitStepMsg)(nil), "types.CommitStepMsg")
	proto.RegisterType((*ProposalPOLMsg)(nil), "types.ProposalPOLMsg")
	proto.RegisterType((*HasVoteMsg)(nil), "types.HasVoteMsg")
	proto.RegisterType((*VoteSetMaj23Msg)(nil), "types.VoteSetMaj23Msg")
	proto.RegisterType((*VoteSetBitsMsg)(nil), "types.VoteSetBitsMsg")
	proto.RegisterType((*Heartbeat)(nil), "types.Heartbeat")
	proto.RegisterType((*IsHealthy)(nil), "types.IsHealthy")
}

func init() { proto.RegisterFile("tendermint.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdd, 0x6e, 0x1b, 0xb7,
	0x12, 0xc6, 0x5a, 0x3f, 0x96, 0x46, 0xb2, 0x2c, 0x30, 0xc7, 0x89, 0x4e, 0x8e, 0x0f, 0xa0, 0x12,
	0xfd, 0x51, 0x93, 0xc0, 0x09, 0xec, 0x00, 0xbd, 0x48, 0x53, 0xc4, 0xb2, 0x83, 0xd8, 0xad, 0x9d,
	0x08, 0x94, 0x90, 0x5e, 0xd3, 0x12, 0x2b, 0x6d, 0x2b, 0xed, 0x6e, 0x97, 0x94, 0x62, 0x17, 0xe8,
	0x4d, 0xdf, 0xa0, 0x40, 0x5f, 0xa3, 0x57, 0x7d, 0x88, 0x3e, 0x40, 0xd1, 0xab, 0xa2, 0x7d, 0x96,
	0x82, 0x43, 0xee, 0x8a, 0xbb, 0x52, 0x9c, 0xa6, 0x28, 0x7a, 0xa7, 0xf9, 0xf8, 0x91, 0x43, 0xce,
	0x7c, 0x33, 0xe4, 0x0a, 0x9a, 0x4a, 0x04, 0x23, 0x11, 0xcf, 0xfc, 0x40, 0xed, 0x45, 0x71, 0xa8,
	0x42, 0x52, 0x52, 0x57, 0x91, 0x90, 0xb7, 0x9b, 0x17, 0xd3, 0x70, 0xf8, 0xd5, 0x70, 0xc2, 0xfd,
	0xc0, 0x0c, 0xd0, 0xff, 0xc3, 0x66, 0x57, 0x63, 0xa7, 0xc7, 0x84, 0x40, 0xf1, 0x84, 0xcb, 0x49,
	0xcb, 0x6b, 0x7b, 0x9d, 0x3a, 0xc3, 0xdf, 0xf4, 0x13, 0x20, 0x83, 0x74, 0xad, 0xae, 0xaf, 0x0e,
	0xe3, 0x98, 0x5f, 0x69, 0x66, 0xd7, 0x57, 0x12, 0x99, 0x25, 0x86, 0xbf, 0xc9, 0x7f, 0xa0, 0xf4,
	0x74, 0x2a, 0x66, 0xb2, 0xb5, 0xd1, 0x2e, 0x74, 0x8a, 0xcc, 0x18, 0xf4, 0xbb, 0x0d, 0x28, 0xbe,
	0x0c, 0x95, 0x20, 0x77, 0xa0, 0xf9, 0x92, 0x4f, 0xfd, 0x11, 0x57, 0x61, 0x7c, 0x38, 0x1a, 0xc5,
	0x42, 0x4a, 0xeb, 0x68, 0x05, 0x27, 0xef, 0x43, 0x23, 0xc5, 0x4e, 0x83, 0x91, 0xb8, 0x6c, 0x6d,
	0xa0, 0xa3, 0x1c, 0x4a, 0x6e, 0x42, 0xf9, 0x44, 0xf8, 0xe3, 0x89, 0x6a, 0x15, 0xda, 0x5e, 0xa7,
	0xc0, 0xac, 0xa5, 0xb7, 0xc2, 0xc2, 0x79, 0x30, 0x6a, 0x15, 0x71, 0x9a, 0x31, 0xc8, 0x2e, 0x54,
	0x07, 0xfe, 0x4c, 0x48, 0xc5, 0x67, 0x51, 0xab, 0x84, 0x13, 0x96, 0x80, 0x3e, 0xd2, 0xe0, 0x2a,
	0x12, 0xad, 0x72, 0xdb, 0xeb, 0x6c, 0x31, 0xfc, 0x4d, 0x3a, 0x69, 0x6c, 0x5a, 0x9b, 0x6d, 0xaf,
	0x53, 0xdb, 0x6f, 0xec, 0x61, 0x18, 0xf7, 0x2c, 0xca, 0xd2, 0xd0, 0xed, 0x42, 0xb5, 0xef, 0x8f,
	0x03, 0xae, 0xe6, 0xb1, 0x68, 0x55, 0xf0, 0x58, 0x4b, 0x80, 0xfa, 0xd0, 0x5c, 0x06, 0xf1, 0x28,
	0x9c, 0xcd, 0x7c, 0xe5, 0xae, 0xed, 0x5d, 0xbf, 0xf6, 0x5d, 0x80, 0x5e, 0x2c, 0x86, 0x38, 0xcd,
	0x44, 0xb7, 0xb6, 0x5f, 0xb3, 0x64, 0x1d, 0x5a, 0xe6, 0x0c, 0xd3, 0x1f, 0x3c, 0xb8, 0xe1, 0x24,
	0x0c, 0x97, 0x08, 0xbe, 0x08, 0x09, 0x85, 0x52, 0x5f, 0x71, 0x25, 0x30, 0x92, 0xb5, 0xfd, 0xba,
	0x9d, 0x8f, 0x18, 0x33, 0x43, 0xe4, 0x2e, 0x54, 0x7a, 0x71, 0x18, 0x85, 0x92, 0x4f, 0x31, 0xa0,
	0xb5, 0xfd, 0x6d, 0x4b, 0x4b, 0x60, 0x96, 0x12, 0xc8, 0x3d, 0x28, 0xa1, 0x96, 0x30, 0xc6, 0xb5,
	0xfd, 0x9b, 0x96, 0x99, 0xf3, 0xcd, 0x0c, 0x89, 0x7e, 0x0e, 0x55, 0xb4, 0xfb, 0xfe, 0x37, 0x82,
	0xdc, 0x86, 0xca, 0x39, 0xbf, 0xec, 0x5e, 0x29, 0x91, 0x28, 0x28, 0xb5, 0x75, 0x4a, 0xcf, 0xf9,
	0xe5, 0xe0, 0x52, 0xda, 0x94, 0x5b, 0xcb, 0xe2, 0xcf, 0xb8, 0x4c, 0x52, 0x6d, 0x2c, 0xfa, 0x31,
	0x94, 0x07, 0x97, 0x7f, 0x71, 0x55, 0x3d, 0x7b, 0x23, 0x33, 0xfb, 0x31, 0xd4, 0x70, 0x5b, 0xcf,
	0x42, 0x29, 0xfd, 0x88, 0xec, 0x01, 0x41, 0xb3, 0xc7, 0x63, 0xa5, 0xd7, 0x74, 0x17, 0x5b, 0x33,
	0x42, 0x3b, 0xd0, 0x78, 0xba, 0xf0, 0x47, 0x22, 0x18, 0x8a, 0x1e, 0x8f, 0xf9, 0x2c, 0x71, 0x74,
	0x38, 0x16, 0x38, 0xcb, 0x38, 0x3a, 0x1c, 0x0b, 0xfa, 0xbb, 0x07, 0xdb, 0x47, 0x61, 0x20, 0x45,
	0x20, 0xe7, 0xd2, 0x72, 0xf7, 0x9c, 0x98, 0x58, 0x0d, 0x34, 0x5d, 0x0d, 0x68, 0x9c, 0x39, 0x61,
	0x7b, 0x2f, 0x39, 0xaa, 0xcd, 0xe1, 0x56, 0x12, 0x72, 0x04, 0x59, 0x12, 0x87, 0x87, 0x99, 0x33,
	0xd9, 0x44, 0x12, 0x77, 0x61, 0x33, 0xc2, 0x32, 0x47, 0x7f, 0x9c, 0x3f, 0x8a, 0xcd, 0xeb, 0x8e,
	0x9d, 0x98, 0x1d, 0x64, 0x39, 0x32, 0x9d, 0x43, 0x35, 0xad, 0x4d, 0xd2, 0x82, 0xcd, 0x6c, 0x85,
	0x27, 0xa6, 0x0e, 0x4f, 0x6f, 0x7e, 0xf1, 0x99, 0xb8, 0xc2, 0x23, 0xd4, 0x99, 0xb5, 0x48, 0x1b,
	0x6a, 0x2f, 0x43, 0xe5, 0x07, 0xe3, 0x5e, 0xf8, 0x4a, 0xc4, 0x36, 0xc5, 0x2e, 0xa4, 0x4b, 0xfa,
	0x70, 0x38, 0x9c, 0xcf, 0x70, 0x5b, 0x05, 0x66, 0x0c, 0x1a, 0x40, 0x3d, 0x75, 0xdb, 0x17, 0x8a,
	0x3c, 0x00, 0x48, 0x6d, 0xed, 0xbc, 0xe0, 0xc4, 0x34, 0x1d, 0x60, 0x0e, 0x87, 0xdc, 0x4b, 0x34,
	0x2f, 0x62, 0x1b, 0xd6, 0x55, 0x7e, 0xca, 0xa0, 0xbf, 0x16, 0x6d, 0x19, 0xe9, 0x33, 0x1e, 0xe9,
	0x2e, 0x6a, 0xcb, 0xb7, 0xca, 0x12, 0x93, 0x74, 0x60, 0xfb, 0x8c, 0x4b, 0x23, 0x7f, 0xdb, 0x9d,
	0x8c, 0xe8, 0xf2, 0xb0, 0x6e, 0x89, 0x29, 0x34, 0x08, 0x15, 0x9f, 0x0e, 0x2e, 0xed, 0xd1, 0x57,
	0x70, 0xf2, 0x00, 0x6a, 0x29, 0x76, 0x7a, 0x6c, 0x93, 0x93, 0x6f, 0x19, 0x2e, 0x85, 0xbc, 0x0b,
	0x5b, 0xcb, 0x55, 0xfc, 0x99, 0xb0, 0x2d, 0x2f, 0x0b, 0x92, 0x83, 0x4c, 0xc4, 0xca, 0xb8, 0xec,
	0x8d, 0x7c, 0x04, 0xfa, 0x42, 0x65, 0x82, 0xf6, 0x08, 0x1a, 0x7a, 0x15, 0x67, 0xe2, 0xe6, 0xeb,
	0x27, 0xe6, 0xa8, 0xe4, 0x09, 0xfc, 0x4f, 0x23, 0x26, 0x06, 0x4b, 0xfc, 0x68, 0xc2, 0x83, 0xb1,
	0x18, 0x61, 0xf3, 0x2c, 0xb0, 0xeb, 0x28, 0xe4, 0xc9, 0x4a, 0x2d, 0xb5, 0xaa, 0x99, 0x26, 0x94,
	0x1b, 0x65, 0x2b, 0xa5, 0xf7, 0x29, 0xb4, 0x97, 0x0e, 0x72, 0x83, 0xc9, 0x46, 0x00, 0x37, 0xf2,
	0x46, 0x5e, 0x92, 0x6f, 0x26, 0xe4, 0x7c, 0xaa, 0x24, 0x5e, 0xa0, 0x35, 0x14, 0x77, 0x1e, 0xc6,
	0xba, 0x88, 0x22, 0x64, 0xd4, 0x6d, 0x5d, 0x18, 0x93, 0xce, 0x61, 0xe7, 0x78, 0x1e, 0x4d, 0xfd,
	0x21, 0x57, 0x42, 0xb7, 0xf4, 0xa4, 0xba, 0x74, 0xc1, 0x44, 0xa6, 0x60, 0x8c, 0xca, 0xac, 0x45,
	0xde, 0x81, 0xd2, 0x22, 0x54, 0xe2, 0xd0, 0x6a, 0x36, 0x73, 0x1d, 0x98, 0x91, 0x84, 0xd2, 0xb5,
	0x1d, 0x60, 0x95, 0xd2, 0xa5, 0x5d, 0x68, 0x26, 0x9e, 0x9e, 0x06, 0x0b, 0x31, 0x0d, 0x23, 0x6c,
	0xa3, 0x9a, 0xf8, 0x9c, 0xcf, 0x84, 0xf5, 0x99, 0xda, 0xfa, 0x8e, 0x1c, 0x71, 0xc5, 0x6d, 0xf1,
	0xe2, 0x6f, 0x7a, 0x04, 0xf5, 0x64, 0x8d, 0x63, 0xae, 0x38, 0x39, 0x80, 0x8a, 0xb0, 0xb6, 0x2d,
	0xc0, 0x5b, 0xb9, 0x16, 0x92, 0xb8, 0x62, 0x29, 0x91, 0xfe, 0x56, 0x80, 0x9d, 0xdc, 0xcd, 0x71,
	0x22, 0xf8, 0x48, 0x60, 0x2f, 0x19, 0x66, 0xeb, 0xcc, 0x9a, 0x3a, 0x34, 0x13, 0xb7, 0xbc, 0xac,
	0xa5, 0x3b, 0x45, 0x8c, 0x97, 0xbf, 0x29, 0x25, 0x63, 0xe8, 0xad, 0x2b, 0x5d, 0x04, 0xa6, 0x7d,
	0xe0, 0x6f, 0xbd, 0x42, 0x30, 0x9f, 0xe9, 0xbb, 0xc6, 0x94, 0x86, 0xb5, 0x74, 0xad, 0x4d, 0x9d,
	0x5a, 0x2b, 0xaf, 0xaf, 0x35, 0x87, 0x82, 0x41, 0x33, 0x85, 0x6a, 0x4a, 0xa1, 0xc0, 0x52, 0x5b,
	0x3f, 0x66, 0x34, 0xd5, 0x5c, 0xfb, 0x98, 0x7c, 0xf3, 0x3e, 0xc8, 0xa1, 0x9a, 0xb7, 0x48, 0xa5,
	0x8e, 0xbc, 0xaa, 0xe1, 0x65, 0x51, 0x5d, 0xd7, 0xc3, 0x44, 0x89, 0x48, 0x03, 0xa4, 0x65, 0x41,
	0x1d, 0x37, 0x6e, 0xb5, 0x66, 0xd4, 0x98, 0x98, 0x5a, 0xaf, 0xd3, 0x9c, 0x5e, 0x8d, 0x1a, 0xf3,
	0x30, 0xa1, 0x50, 0x4f, 0x32, 0x84, 0xb4, 0x2d, 0xa4, 0x65, 0x30, 0xcd, 0x89, 0x6c, 0x77, 0xd4,
	0x4d, 0xbe, 0xd5, 0x30, 0x1c, 0x17, 0xa3, 0xbf, 0x78, 0xb0, 0x9d, 0xcb, 0x2e, 0x79, 0xa8, 0xb3,
	0xa7, 0x33, 0x6c, 0x6f, 0xbe, 0xdd, 0xf5, 0xef, 0x07, 0xa3, 0x02, 0x66, 0xb9, 0xa4, 0xed, 0x08,
	0x70, 0xf9, 0x88, 0x31, 0x2f, 0x0d, 0x1c, 0x21, 0xf7, 0x1d, 0xf9, 0x15, 0x32, 0x4d, 0xc9, 0x55,
	0xe9, 0x52, 0x7a, 0xe4, 0x23, 0x80, 0x65, 0x22, 0x6c, 0x5f, 0xbd, 0xb5, 0xb2, 0x19, 0x33, 0xcc,
	0x1c, 0x2a, 0xfd, 0xc3, 0x5b, 0x3e, 0x97, 0x1c, 0x31, 0x7a, 0xeb, 0xc5, 0x68, 0x5e, 0x33, 0x56,
	0x8c, 0xbb, 0x50, 0x55, 0xe9, 0x4b, 0xd4, 0xc8, 0x74, 0x09, 0x68, 0x31, 0xf5, 0x5e, 0x9c, 0xb9,
	0x0f, 0xd8, 0xd4, 0x26, 0x7b, 0x00, 0xbd, 0x17, 0x67, 0x89, 0x32, 0x4b, 0x6b, 0x95, 0xe9, 0x30,
	0xb4, 0x27, 0x99, 0xbe, 0x4b, 0xcb, 0xe6, 0x5d, 0x9a, 0x02, 0x7a, 0x14, 0x9f, 0x67, 0x13, 0x9d,
	0xdd, 0x4d, 0x33, 0x9a, 0x02, 0xf4, 0x27, 0x0f, 0xb6, 0x9f, 0x8b, 0x57, 0xe8, 0xb8, 0xaf, 0x44,
	0x74, 0x2e, 0xc7, 0x6f, 0x79, 0x4e, 0x02, 0x45, 0xa9, 0x84, 0x39, 0x62, 0x89, 0xe1, 0x6f, 0xf2,
	0x10, 0x76, 0xa4, 0x18, 0x86, 0xc1, 0x48, 0xf6, 0xfd, 0x60, 0x28, 0xfa, 0x8a, 0xc7, 0x6a, 0x90,
	0x54, 0x66, 0x89, 0xad, 0x1f, 0x4c, 0x44, 0x6b, 0xd3, 0x80, 0x9e, 0x4a, 0xc8, 0xcf, 0xc3, 0xf4,
	0x15, 0x6c, 0xe1, 0x8d, 0x81, 0x11, 0x78, 0xfb, 0x2d, 0x67, 0x42, 0x52, 0xc8, 0x85, 0x44, 0xa7,
	0xc6, 0x97, 0x8e, 0x54, 0x2a, 0x2c, 0xb5, 0xe9, 0x07, 0xb0, 0x65, 0x7e, 0xbd, 0x21, 0x56, 0xf4,
	0x7b, 0x0f, 0x1a, 0x89, 0x70, 0x7a, 0x2f, 0xce, 0xae, 0xdb, 0xe3, 0x1d, 0x68, 0x46, 0x4b, 0x26,
	0x73, 0xb6, 0xbb, 0x82, 0x93, 0x47, 0x50, 0x73, 0x30, 0x2b, 0xfe, 0xff, 0xae, 0x96, 0x95, 0xfd,
	0x86, 0x63, 0x2e, 0x9b, 0x8e, 0x00, 0x4e, 0xb8, 0xd4, 0x77, 0xc3, 0xdf, 0xca, 0xb2, 0x76, 0x92,
	0x64, 0x59, 0xff, 0xd6, 0x4c, 0x1f, 0x3f, 0xdc, 0xec, 0x17, 0x18, 0x1a, 0xf4, 0x5b, 0xd8, 0xd6,
	0x2e, 0xfa, 0x42, 0x9d, 0xf3, 0x2f, 0xf7, 0x0f, 0xfe, 0x19, 0x57, 0x1d, 0xd8, 0xbc, 0xb8, 0xf6,
	0x55, 0x94, 0x0c, 0xd3, 0x1f, 0x3d, 0x68, 0x58, 0xff, 0xfa, 0x8b, 0xf5, 0x5f, 0x76, 0x4f, 0xee,
	0x9b, 0x0b, 0x59, 0xda, 0xb2, 0xbd, 0x26, 0x35, 0x86, 0x47, 0x7f, 0xf6, 0xa0, 0x7a, 0x22, 0x78,
	0xac, 0x2e, 0x04, 0x47, 0x2d, 0x2c, 0x5e, 0xf3, 0x01, 0xbd, 0x58, 0xf3, 0x01, 0xbd, 0x58, 0xfb,
	0x01, 0xbd, 0x58, 0xf9, 0x80, 0x9e, 0x64, 0x3e, 0xa0, 0xf3, 0xc7, 0x2f, 0xba, 0xc7, 0xbf, 0x0d,
	0x15, 0x29, 0xbe, 0x9e, 0x63, 0x6f, 0x35, 0xd5, 0x97, 0xda, 0xd7, 0x37, 0x1a, 0xfa, 0x21, 0x54,
	0x4f, 0xe5, 0x89, 0xe0, 0x53, 0x35, 0xb9, 0xd2, 0x54, 0x3f, 0x31, 0xf0, 0x04, 0x15, 0xb6, 0x04,
	0x2e, 0xca, 0xf8, 0xb7, 0xc4, 0xc1, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0xaa, 0x95, 0x93,
	0xc3, 0x10, 0x00, 0x00,
}
