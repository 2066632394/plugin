syntax = "proto3";
package types;
option go_package = "../types";

message Exchange {}

message ExchangeAction {
  oneof value {
    LimitOrder  limitOrder = 1;
    MarketOrder marketOrder = 2;
    RevokeOrder revokeOrder = 3;
  }
  int32 ty = 6;
}
//限价订单
message LimitOrder {
  //交易对
  asset leftAsset = 1;
  //交易对
  asset rightAsset = 2;
  //价格
  int64 price = 3;
  //总量
  int64 amount = 4;
  //操作， 1为买，2为卖
  int32 op = 5;
}

//市价委托
message MarketOrder {
  //资产1
  asset leftAsset = 1;
  //资产2
  asset rightAsset = 2;
  //总量
  int64 amount = 3;
  //操作， 1为买，2为卖
  int32 op = 4;
}

//撤回订单
message RevokeOrder {
  //订单号
  int64 orderID = 1;
}
//资产类型
message asset {
  string execer = 1;
  string symbol = 2;
}

//订单信息
message Order {
  int64 orderID = 1;
  oneof value {
    LimitOrder  limitOrder = 2;
    MarketOrder marketOrder = 3;
  }
  //挂单类型
  int32 ty = 4;
  //已经成交的数量
  int64 executed = 5;
  //成交均价
  int64 AVG_price = 6;
  //余额
  int64 balance = 7;
  //状态,0 挂单中ordered， 1 完成completed， 2撤回 revoked
  int32 status = 8;
  //用户地址
  string addr = 9;
  //更新时间
  int64 updateTime = 10;
  //索引
  int64 index = 11;
  //手续费率
  int32 rate = 12;
  //手续费
  int64 digestedFee = 13;
  //最小手续费
  int64 minFee = 14;
  //挂单hash
  string hash = 15;
  //撤单hash
  string revokeHash = 16;
  //创建时间
  int64 createTime = 17;
}

//查询接口
message QueryMarketDepth {
  //资产1
  asset leftAsset = 1;
  //资产2
  asset rightAsset = 2;
  //操作， 1为买，2为卖
  int32 op = 3;
  // 这里用价格作为索引值
  string primaryKey = 4;
  //单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
  int32 count = 5;
}
//市场深度
message MarketDepth {
  //资产1
  asset leftAsset = 1;
  //资产2
  asset rightAsset = 2;
  //价格
  int64 price = 3;
  //总量
  int64 amount = 4;
  //操作， 1为买，2为卖
  int32 op = 5;
}
//查询接口返回的市场深度列表
message MarketDepthList {
  repeated MarketDepth list = 1;
  string               primaryKey = 2;
}

//查询最新得成交信息,外部接口
message QueryHistoryOrderList {
  //资产1
  asset leftAsset = 1;
  //资产2
  asset rightAsset = 2;
  // 索引值
  string primaryKey = 3;
  //单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
  int32 count = 4;
  // 0降序，1升序，默认降序
  int32 direction = 5;
}

//根据orderID去查询订单信息
message QueryOrder {
  int64 orderID = 1;
}
//根据地址，状态查询用户自己的挂单信息
message QueryOrderList {
  //挂单状态必填(默认是0,只查询ordered挂单中的)
  int32 status = 1;
  //用户地址信息，必填
  string address = 2;
  // 主键索引
  string primaryKey = 3;
  //单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
  int32 count = 4;
  // 0降序，1升序，默认降序
  int32 direction = 5;
}
//订单列表
message OrderList {
  repeated Order list = 1;
  string         primaryKey = 2;
}

// exchange执行票据日志
message ReceiptExchange {
  Order    order = 1;
  repeated Order matchOrders = 2;
  int64          index = 3;
}

//某条链上的代币余额
message ChainBalance {
  string chainType = 1; //BTY ETH
  map<int32, int32> tokenBalanceMap = 2;//<tokenId, index>
  repeated TokenBalance tokenBalances = 3;
  bytes rootHash = 4; //Balance Tree的hash
}

//某个token的余额
message TokenBalance {
  int32 tokenId = 1;
  int64 balance = 2;
}

message AccountTree {
  int32 index = 1;//当前的叶子索引
  int32 totalIndex = 2;  //总计叶子索引
  int32 maxCurrentIndex = 3;  //当前索引最大值，超过最大值会进行归档
  map<string, RootInfo> rootMap = 4;//历史归档的所有roots,key=root hash,value = rootInfo
  map<int32, bytes> rootIndexMap = 5;//历史归档的所有roots索引，index = RootInfo.startIndex / 1024
  map<string, int32> addressMap  = 6;
  map <int32, Leaf> leaveMap = 7; //当前未归档的叶子
  repeated SubTree subTrees = 8; //当前未归档的子树
  bytes merkleRootHash = 9; //当前的总rootHash
}

message Leaf {
  bytes rootHash = 1; //归档Merkle Tree的根hash
  int32 accountId = 2; //accountId其实就是叶子的totalIndex
  map<string, int32> chainBalanceMap = 3;
  repeated ChainBalance chainBalances = 4;
  string ethAddress = 5; //账户对应的以太坊地址
  PubKey publicKey = 6; //twistededwards pubKey
}

message PubKey {
  string x = 1;
  string y = 2;
}

message RootInfo {
  int32 height = 1; //归档的高度
  int32 startIndex = 2; //开始的全局index
}

message SubTree {
  int32 height = 1;
  bytes rootHash = 2; //子树的根hash
}

message AccountTreeProof {
  bytes rootHash = 1;
  repeated bytes proofSet = 2;
  uint64 proofIndex = 3;
  uint64 numLeaves = 4;
}

message Deposit {
  string chainType = 1;
  int32 tokenId = 2;
  uint64 amount = 3;
}

message Withdraw {
  string chainType = 1;
  int32 tokenId = 2;
  uint64 amount = 3;
}

message Transfer {
  string chainType = 1;
  int32 tokenId = 2;
  uint64 amount = 3;
}

message TransferToNew {
  string chainType = 1;
  int32 tokenId = 2;
  uint64 amount = 3;
}

message ForceQuit {
  string chainType = 2;
  int32 tokenId = 3;
}

// account变动执行票据日志
message ReceiptAccount {
  int32 accountId = 1;
  uint64 balance = 2;
  int64  index = 3;
}

service exchange {}
