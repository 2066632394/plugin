// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.1
// source: witness.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZkDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId            uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount             string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress         string       `protobuf:"bytes,3,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Chain33Addr        string       `protobuf:"bytes,4,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	EthPriorityQueueId int64        `protobuf:"varint,5,opt,name=ethPriorityQueueId,proto3" json:"ethPriorityQueueId,omitempty"` //需要在合约保证id连续
	Signature          *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainTitleId       uint64       `protobuf:"varint,7,opt,name=chainTitleId,proto3" json:"chainTitleId,omitempty"`
}

func (x *ZkDeposit) Reset() {
	*x = ZkDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkDeposit) ProtoMessage() {}

func (x *ZkDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkDeposit.ProtoReflect.Descriptor instead.
func (*ZkDeposit) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{0}
}

func (x *ZkDeposit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkDeposit) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *ZkDeposit) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *ZkDeposit) GetEthPriorityQueueId() int64 {
	if x != nil {
		return x.EthPriorityQueueId
	}
	return 0
}

func (x *ZkDeposit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkDeposit) GetChainTitleId() uint64 {
	if x != nil {
		return x.ChainTitleId
	}
	return 0
}

type ZkWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee       *ZkSwapFee   `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkWithdraw) Reset() {
	*x = ZkWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkWithdraw) ProtoMessage() {}

func (x *ZkWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkWithdraw.ProtoReflect.Descriptor instead.
func (*ZkWithdraw) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{1}
}

func (x *ZkWithdraw) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkWithdraw) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkWithdraw) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkWithdraw) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkWithdraw) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkContractToTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkContractToTree) Reset() {
	*x = ZkContractToTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkContractToTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkContractToTree) ProtoMessage() {}

func (x *ZkContractToTree) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkContractToTree.ProtoReflect.Descriptor instead.
func (*ZkContractToTree) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{2}
}

func (x *ZkContractToTree) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkContractToTree) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkContractToTree) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkContractToTree) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTreeToContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTreeToContract) Reset() {
	*x = ZkTreeToContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTreeToContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTreeToContract) ProtoMessage() {}

func (x *ZkTreeToContract) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTreeToContract.ProtoReflect.Descriptor instead.
func (*ZkTreeToContract) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{3}
}

func (x *ZkTreeToContract) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTreeToContract) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTreeToContract) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkTreeToContract) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount        string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId uint64       `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToAccountId   uint64       `protobuf:"varint,4,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Signature     *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee           *ZkSwapFee   `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkTransfer) Reset() {
	*x = ZkTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransfer) ProtoMessage() {}

func (x *ZkTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransfer.ProtoReflect.Descriptor instead.
func (*ZkTransfer) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{4}
}

func (x *ZkTransfer) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTransfer) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransfer) GetToAccountId() uint64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *ZkTransfer) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkTransfer) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkTransferToNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId          uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount           string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId    uint64       `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToEthAddress     string       `protobuf:"bytes,4,opt,name=toEthAddress,proto3" json:"toEthAddress,omitempty"`
	ToChain33Address string       `protobuf:"bytes,5,opt,name=toChain33Address,proto3" json:"toChain33Address,omitempty"`
	Signature        *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee              *ZkSwapFee   `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkTransferToNew) Reset() {
	*x = ZkTransferToNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransferToNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransferToNew) ProtoMessage() {}

func (x *ZkTransferToNew) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransferToNew.ProtoReflect.Descriptor instead.
func (*ZkTransferToNew) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{5}
}

func (x *ZkTransferToNew) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransferToNew) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTransferToNew) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransferToNew) GetToEthAddress() string {
	if x != nil {
		return x.ToEthAddress
	}
	return ""
}

func (x *ZkTransferToNew) GetToChain33Address() string {
	if x != nil {
		return x.ToChain33Address
	}
	return ""
}

func (x *ZkTransferToNew) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkTransferToNew) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkProxyExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	ProxyId   uint64       `protobuf:"varint,2,opt,name=proxyId,proto3" json:"proxyId,omitempty"`   //代理id，扣手续费
	TargetId  uint64       `protobuf:"varint,3,opt,name=targetId,proto3" json:"targetId,omitempty"` //目标id
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee       *ZkSwapFee   `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkProxyExit) Reset() {
	*x = ZkProxyExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkProxyExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkProxyExit) ProtoMessage() {}

func (x *ZkProxyExit) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkProxyExit.ProtoReflect.Descriptor instead.
func (*ZkProxyExit) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{6}
}

func (x *ZkProxyExit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkProxyExit) GetProxyId() uint64 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

func (x *ZkProxyExit) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ZkProxyExit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkProxyExit) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkSetPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint64       `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	PubKey    *ZkPubKey    `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	PubKeyTy  uint64       `protobuf:"varint,3,opt,name=pubKeyTy,proto3" json:"pubKeyTy,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkSetPubKey) Reset() {
	*x = ZkSetPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSetPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSetPubKey) ProtoMessage() {}

func (x *ZkSetPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSetPubKey.ProtoReflect.Descriptor instead.
func (*ZkSetPubKey) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{7}
}

func (x *ZkSetPubKey) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkSetPubKey) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkSetPubKey) GetPubKeyTy() uint64 {
	if x != nil {
		return x.PubKeyTy
	}
	return 0
}

func (x *ZkSetPubKey) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkFullExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId            uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AccountId          uint64       `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	EthPriorityQueueId int64        `protobuf:"varint,3,opt,name=ethPriorityQueueId,proto3" json:"ethPriorityQueueId,omitempty"`
	Signature          *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainTitleId       uint64       `protobuf:"varint,5,opt,name=chainTitleId,proto3" json:"chainTitleId,omitempty"`
	Fee                *ZkSwapFee   `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkFullExit) Reset() {
	*x = ZkFullExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkFullExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkFullExit) ProtoMessage() {}

func (x *ZkFullExit) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkFullExit.ProtoReflect.Descriptor instead.
func (*ZkFullExit) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{8}
}

func (x *ZkFullExit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkFullExit) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkFullExit) GetEthPriorityQueueId() int64 {
	if x != nil {
		return x.EthPriorityQueueId
	}
	return 0
}

func (x *ZkFullExit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkFullExit) GetChainTitleId() uint64 {
	if x != nil {
		return x.ChainTitleId
	}
	return 0
}

func (x *ZkFullExit) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature *ZkSignature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkSwap) Reset() {
	*x = ZkSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSwap) ProtoMessage() {}

func (x *ZkSwap) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSwap.ProtoReflect.Descriptor instead.
func (*ZkSwap) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{9}
}

func (x *ZkSwap) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkMintNFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountId uint64       `protobuf:"varint,1,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	RecipientId   uint64       `protobuf:"varint,2,opt,name=recipientId,proto3" json:"recipientId,omitempty"`
	ContentHash   string       `protobuf:"bytes,3,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
	ErcProtocol   uint64       `protobuf:"varint,4,opt,name=ercProtocol,proto3" json:"ercProtocol,omitempty"`
	Amount        uint64       `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Signature     *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee           *ZkSwapFee   `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkMintNFT) Reset() {
	*x = ZkMintNFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkMintNFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkMintNFT) ProtoMessage() {}

func (x *ZkMintNFT) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkMintNFT.ProtoReflect.Descriptor instead.
func (*ZkMintNFT) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{10}
}

func (x *ZkMintNFT) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkMintNFT) GetRecipientId() uint64 {
	if x != nil {
		return x.RecipientId
	}
	return 0
}

func (x *ZkMintNFT) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *ZkMintNFT) GetErcProtocol() uint64 {
	if x != nil {
		return x.ErcProtocol
	}
	return 0
}

func (x *ZkMintNFT) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ZkMintNFT) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkMintNFT) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkWithdrawNFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountId uint64       `protobuf:"varint,1,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	NFTTokenId    uint64       `protobuf:"varint,2,opt,name=NFTTokenId,proto3" json:"NFTTokenId,omitempty"`
	Amount        uint64       `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Signature     *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee           *ZkSwapFee   `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkWithdrawNFT) Reset() {
	*x = ZkWithdrawNFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkWithdrawNFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkWithdrawNFT) ProtoMessage() {}

func (x *ZkWithdrawNFT) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkWithdrawNFT.ProtoReflect.Descriptor instead.
func (*ZkWithdrawNFT) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{11}
}

func (x *ZkWithdrawNFT) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkWithdrawNFT) GetNFTTokenId() uint64 {
	if x != nil {
		return x.NFTTokenId
	}
	return 0
}

func (x *ZkWithdrawNFT) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ZkWithdrawNFT) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkWithdrawNFT) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkTransferNFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountId uint64       `protobuf:"varint,1,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	RecipientId   uint64       `protobuf:"varint,2,opt,name=recipientId,proto3" json:"recipientId,omitempty"`
	NFTTokenId    uint64       `protobuf:"varint,3,opt,name=NFTTokenId,proto3" json:"NFTTokenId,omitempty"`
	Amount        uint64       `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Signature     *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee           *ZkSwapFee   `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkTransferNFT) Reset() {
	*x = ZkTransferNFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransferNFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransferNFT) ProtoMessage() {}

func (x *ZkTransferNFT) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransferNFT.ProtoReflect.Descriptor instead.
func (*ZkTransferNFT) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{12}
}

func (x *ZkTransferNFT) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransferNFT) GetRecipientId() uint64 {
	if x != nil {
		return x.RecipientId
	}
	return 0
}

func (x *ZkTransferNFT) GetNFTTokenId() uint64 {
	if x != nil {
		return x.NFTTokenId
	}
	return 0
}

func (x *ZkTransferNFT) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ZkTransferNFT) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkTransferNFT) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey   *ZkPubKey `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	SignInfo string    `protobuf:"bytes,2,opt,name=signInfo,proto3" json:"signInfo,omitempty"`
	Msg      *ZkMsg    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ZkSignature) Reset() {
	*x = ZkSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSignature) ProtoMessage() {}

func (x *ZkSignature) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSignature.ProtoReflect.Descriptor instead.
func (*ZkSignature) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{13}
}

func (x *ZkSignature) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkSignature) GetSignInfo() string {
	if x != nil {
		return x.SignInfo
	}
	return ""
}

func (x *ZkSignature) GetMsg() *ZkMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ZkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second string `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
	Third  string `protobuf:"bytes,3,opt,name=third,proto3" json:"third,omitempty"`
}

func (x *ZkMsg) Reset() {
	*x = ZkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkMsg) ProtoMessage() {}

func (x *ZkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkMsg.ProtoReflect.Descriptor instead.
func (*ZkMsg) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{14}
}

func (x *ZkMsg) GetFirst() string {
	if x != nil {
		return x.First
	}
	return ""
}

func (x *ZkMsg) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

func (x *ZkMsg) GetThird() string {
	if x != nil {
		return x.Third
	}
	return ""
}

type ZkPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y string `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ZkPubKey) Reset() {
	*x = ZkPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkPubKey) ProtoMessage() {}

func (x *ZkPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkPubKey.ProtoReflect.Descriptor instead.
func (*ZkPubKey) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{15}
}

func (x *ZkPubKey) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *ZkPubKey) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

type ZkSwapFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MakerFee string `protobuf:"bytes,1,opt,name=makerFee,proto3" json:"makerFee,omitempty"`
	TakerFee string `protobuf:"bytes,2,opt,name=takerFee,proto3" json:"takerFee,omitempty"`
	TokenId  uint64 `protobuf:"varint,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"` //默认是操作的币种，如果不同，则在此设置，比如NFT的交换
}

func (x *ZkSwapFee) Reset() {
	*x = ZkSwapFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSwapFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSwapFee) ProtoMessage() {}

func (x *ZkSwapFee) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSwapFee.ProtoReflect.Descriptor instead.
func (*ZkSwapFee) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{16}
}

func (x *ZkSwapFee) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *ZkSwapFee) GetTakerFee() string {
	if x != nil {
		return x.TakerFee
	}
	return ""
}

func (x *ZkSwapFee) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

type SiblingPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	Helper []string `protobuf:"bytes,2,rep,name=helper,proto3" json:"helper,omitempty"`
}

func (x *SiblingPath) Reset() {
	*x = SiblingPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiblingPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiblingPath) ProtoMessage() {}

func (x *SiblingPath) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiblingPath.ProtoReflect.Descriptor instead.
func (*SiblingPath) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{17}
}

func (x *SiblingPath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SiblingPath) GetHelper() []string {
	if x != nil {
		return x.Helper
	}
	return nil
}

type AccountProxyPubKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//代理地址都由用户自己指定，不能由代理地址指定，代理地址只能处理有限指定的操作
	Normal *ZkPubKey `protobuf:"bytes,1,opt,name=normal,proto3" json:"normal,omitempty"`
	System *ZkPubKey `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
	Super  *ZkPubKey `protobuf:"bytes,3,opt,name=super,proto3" json:"super,omitempty"`
}

func (x *AccountProxyPubKeys) Reset() {
	*x = AccountProxyPubKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountProxyPubKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountProxyPubKeys) ProtoMessage() {}

func (x *AccountProxyPubKeys) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountProxyPubKeys.ProtoReflect.Descriptor instead.
func (*AccountProxyPubKeys) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{18}
}

func (x *AccountProxyPubKeys) GetNormal() *ZkPubKey {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *AccountProxyPubKeys) GetSystem() *ZkPubKey {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *AccountProxyPubKeys) GetSuper() *ZkPubKey {
	if x != nil {
		return x.Super
	}
	return nil
}

type AccountWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EthAddr       string               `protobuf:"bytes,2,opt,name=ethAddr,proto3" json:"ethAddr,omitempty"`
	Chain33Addr   string               `protobuf:"bytes,3,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	TokenTreeRoot string               `protobuf:"bytes,4,opt,name=tokenTreeRoot,proto3" json:"tokenTreeRoot,omitempty"` //sub chain token tree root
	PubKey        *ZkPubKey            `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Sibling       *SiblingPath         `protobuf:"bytes,6,opt,name=sibling,proto3" json:"sibling,omitempty"`
	ProxyPubKeys  *AccountProxyPubKeys `protobuf:"bytes,7,opt,name=proxyPubKeys,proto3" json:"proxyPubKeys,omitempty"`
}

func (x *AccountWitness) Reset() {
	*x = AccountWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountWitness) ProtoMessage() {}

func (x *AccountWitness) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountWitness.ProtoReflect.Descriptor instead.
func (*AccountWitness) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{19}
}

func (x *AccountWitness) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AccountWitness) GetEthAddr() string {
	if x != nil {
		return x.EthAddr
	}
	return ""
}

func (x *AccountWitness) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *AccountWitness) GetTokenTreeRoot() string {
	if x != nil {
		return x.TokenTreeRoot
	}
	return ""
}

func (x *AccountWitness) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *AccountWitness) GetSibling() *SiblingPath {
	if x != nil {
		return x.Sibling
	}
	return nil
}

func (x *AccountWitness) GetProxyPubKeys() *AccountProxyPubKeys {
	if x != nil {
		return x.ProxyPubKeys
	}
	return nil
}

type TokenWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`          //eth contract define token ID
	Balance string       `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"` //eth balance u128
	Sibling *SiblingPath `protobuf:"bytes,3,opt,name=sibling,proto3" json:"sibling,omitempty"`
}

func (x *TokenWitness) Reset() {
	*x = TokenWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWitness) ProtoMessage() {}

func (x *TokenWitness) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWitness.ProtoReflect.Descriptor instead.
func (*TokenWitness) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{20}
}

func (x *TokenWitness) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TokenWitness) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TokenWitness) GetSibling() *SiblingPath {
	if x != nil {
		return x.Sibling
	}
	return nil
}

//one operation branch
type OperationMetaBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountWitness *AccountWitness `protobuf:"bytes,1,opt,name=accountWitness,proto3" json:"accountWitness,omitempty"`
	TokenWitness   *TokenWitness   `protobuf:"bytes,2,opt,name=tokenWitness,proto3" json:"tokenWitness,omitempty"`
}

func (x *OperationMetaBranch) Reset() {
	*x = OperationMetaBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetaBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetaBranch) ProtoMessage() {}

func (x *OperationMetaBranch) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetaBranch.ProtoReflect.Descriptor instead.
func (*OperationMetaBranch) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{21}
}

func (x *OperationMetaBranch) GetAccountWitness() *AccountWitness {
	if x != nil {
		return x.AccountWitness
	}
	return nil
}

func (x *OperationMetaBranch) GetTokenWitness() *TokenWitness {
	if x != nil {
		return x.TokenWitness
	}
	return nil
}

// before and after operation data
type OperationPairBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *OperationMetaBranch `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *OperationMetaBranch `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *OperationPairBranch) Reset() {
	*x = OperationPairBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationPairBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationPairBranch) ProtoMessage() {}

func (x *OperationPairBranch) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationPairBranch.ProtoReflect.Descriptor instead.
func (*OperationPairBranch) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{22}
}

func (x *OperationPairBranch) GetBefore() *OperationMetaBranch {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *OperationPairBranch) GetAfter() *OperationMetaBranch {
	if x != nil {
		return x.After
	}
	return nil
}

type OperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64   `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxIndex     uint32   `protobuf:"varint,2,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	OpIndex     uint32   `protobuf:"varint,3,opt,name=opIndex,proto3" json:"opIndex,omitempty"`
	TxType      uint32   `protobuf:"varint,4,opt,name=txType,proto3" json:"txType,omitempty"`
	TxHash      string   `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Roots       []string `protobuf:"bytes,11,rep,name=roots,proto3" json:"roots,omitempty"` //每个操作后的root
	//每个operation data由一对 操作前后数据组成，不同操作可以有多个操作数据，deposit:1,transfer:2
	OperationBranches []*OperationPairBranch `protobuf:"bytes,12,rep,name=operationBranches,proto3" json:"operationBranches,omitempty"`
	//操作特殊数据,像订单数据
	SpecialInfo *OperationSpecialInfo `protobuf:"bytes,13,opt,name=specialInfo,proto3" json:"specialInfo,omitempty"`
	//记录deposit或fullExit对应的eth priorityId，方便查询对应区块高度和证明Id
	EthPriorityId int64 `protobuf:"varint,14,opt,name=ethPriorityId,proto3" json:"ethPriorityId,omitempty"`
}

func (x *OperationInfo) Reset() {
	*x = OperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInfo) ProtoMessage() {}

func (x *OperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInfo.ProtoReflect.Descriptor instead.
func (*OperationInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{23}
}

func (x *OperationInfo) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *OperationInfo) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *OperationInfo) GetOpIndex() uint32 {
	if x != nil {
		return x.OpIndex
	}
	return 0
}

func (x *OperationInfo) GetTxType() uint32 {
	if x != nil {
		return x.TxType
	}
	return 0
}

func (x *OperationInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OperationInfo) GetRoots() []string {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *OperationInfo) GetOperationBranches() []*OperationPairBranch {
	if x != nil {
		return x.OperationBranches
	}
	return nil
}

func (x *OperationInfo) GetSpecialInfo() *OperationSpecialInfo {
	if x != nil {
		return x.SpecialInfo
	}
	return nil
}

func (x *OperationInfo) GetEthPriorityId() int64 {
	if x != nil {
		return x.EthPriorityId
	}
	return 0
}

type ZkProxyExitSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyID   uint64       `protobuf:"varint,1,opt,name=proxyID,proto3" json:"proxyID,omitempty"`
	TargetId  uint64       `protobuf:"varint,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	TokenID   uint64       `protobuf:"varint,3,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount    string       `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee       *ZkSwapFee   `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkProxyExitSpecialInfo) Reset() {
	*x = ZkProxyExitSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkProxyExitSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkProxyExitSpecialInfo) ProtoMessage() {}

func (x *ZkProxyExitSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkProxyExitSpecialInfo.ProtoReflect.Descriptor instead.
func (*ZkProxyExitSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{24}
}

func (x *ZkProxyExitSpecialInfo) GetProxyID() uint64 {
	if x != nil {
		return x.ProxyID
	}
	return 0
}

func (x *ZkProxyExitSpecialInfo) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ZkProxyExitSpecialInfo) GetTokenID() uint64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *ZkProxyExitSpecialInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkProxyExitSpecialInfo) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkProxyExitSpecialInfo) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkFullExitSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint64       `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TokenID   uint64       `protobuf:"varint,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount    string       `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeAmount string       `protobuf:"bytes,4,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkFullExitSpecialInfo) Reset() {
	*x = ZkFullExitSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkFullExitSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkFullExitSpecialInfo) ProtoMessage() {}

func (x *ZkFullExitSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkFullExitSpecialInfo.ProtoReflect.Descriptor instead.
func (*ZkFullExitSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{25}
}

func (x *ZkFullExitSpecialInfo) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *ZkFullExitSpecialInfo) GetTokenID() uint64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *ZkFullExitSpecialInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkFullExitSpecialInfo) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *ZkFullExitSpecialInfo) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkFeeSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint64       `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TokenID   uint64       `protobuf:"varint,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount    string       `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkFeeSpecialInfo) Reset() {
	*x = ZkFeeSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkFeeSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkFeeSpecialInfo) ProtoMessage() {}

func (x *ZkFeeSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkFeeSpecialInfo.ProtoReflect.Descriptor instead.
func (*ZkFeeSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{26}
}

func (x *ZkFeeSpecialInfo) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *ZkFeeSpecialInfo) GetTokenID() uint64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *ZkFeeSpecialInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkFeeSpecialInfo) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkMintNFTSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MintAcctId     uint64       `protobuf:"varint,1,opt,name=mintAcctId,proto3" json:"mintAcctId,omitempty"`
	RecipientId    uint64       `protobuf:"varint,2,opt,name=recipientId,proto3" json:"recipientId,omitempty"`
	ErcProtocol    uint64       `protobuf:"varint,3,opt,name=ercProtocol,proto3" json:"ercProtocol,omitempty"`
	ContentHash    []string     `protobuf:"bytes,4,rep,name=contentHash,proto3" json:"contentHash,omitempty"`
	NewNFTTokenID  uint64       `protobuf:"varint,5,opt,name=newNFTTokenID,proto3" json:"newNFTTokenID,omitempty"`
	CreateSerialId uint64       `protobuf:"varint,6,opt,name=createSerialId,proto3" json:"createSerialId,omitempty"`
	Amount         string       `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Signature      *ZkSignature `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee            *ZkSwapFee   `protobuf:"bytes,9,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkMintNFTSpecialInfo) Reset() {
	*x = ZkMintNFTSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkMintNFTSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkMintNFTSpecialInfo) ProtoMessage() {}

func (x *ZkMintNFTSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkMintNFTSpecialInfo.ProtoReflect.Descriptor instead.
func (*ZkMintNFTSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{27}
}

func (x *ZkMintNFTSpecialInfo) GetMintAcctId() uint64 {
	if x != nil {
		return x.MintAcctId
	}
	return 0
}

func (x *ZkMintNFTSpecialInfo) GetRecipientId() uint64 {
	if x != nil {
		return x.RecipientId
	}
	return 0
}

func (x *ZkMintNFTSpecialInfo) GetErcProtocol() uint64 {
	if x != nil {
		return x.ErcProtocol
	}
	return 0
}

func (x *ZkMintNFTSpecialInfo) GetContentHash() []string {
	if x != nil {
		return x.ContentHash
	}
	return nil
}

func (x *ZkMintNFTSpecialInfo) GetNewNFTTokenID() uint64 {
	if x != nil {
		return x.NewNFTTokenID
	}
	return 0
}

func (x *ZkMintNFTSpecialInfo) GetCreateSerialId() uint64 {
	if x != nil {
		return x.CreateSerialId
	}
	return 0
}

func (x *ZkMintNFTSpecialInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkMintNFTSpecialInfo) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkMintNFTSpecialInfo) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkWithdrawNFTSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAcctId     uint64       `protobuf:"varint,1,opt,name=fromAcctId,proto3" json:"fromAcctId,omitempty"`
	NFTTokenID     uint64       `protobuf:"varint,2,opt,name=NFTTokenID,proto3" json:"NFTTokenID,omitempty"`
	WithdrawAmount string       `protobuf:"bytes,3,opt,name=withdrawAmount,proto3" json:"withdrawAmount,omitempty"`
	CreatorAcctId  uint64       `protobuf:"varint,4,opt,name=creatorAcctId,proto3" json:"creatorAcctId,omitempty"`
	ErcProtocol    uint64       `protobuf:"varint,5,opt,name=ercProtocol,proto3" json:"ercProtocol,omitempty"`
	ContentHash    []string     `protobuf:"bytes,6,rep,name=contentHash,proto3" json:"contentHash,omitempty"`
	CreateSerialId uint64       `protobuf:"varint,7,opt,name=createSerialId,proto3" json:"createSerialId,omitempty"`
	InitMintAmount string       `protobuf:"bytes,8,opt,name=initMintAmount,proto3" json:"initMintAmount,omitempty"`
	Signature      *ZkSignature `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	Fee            *ZkSwapFee   `protobuf:"bytes,10,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkWithdrawNFTSpecialInfo) Reset() {
	*x = ZkWithdrawNFTSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkWithdrawNFTSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkWithdrawNFTSpecialInfo) ProtoMessage() {}

func (x *ZkWithdrawNFTSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkWithdrawNFTSpecialInfo.ProtoReflect.Descriptor instead.
func (*ZkWithdrawNFTSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{28}
}

func (x *ZkWithdrawNFTSpecialInfo) GetFromAcctId() uint64 {
	if x != nil {
		return x.FromAcctId
	}
	return 0
}

func (x *ZkWithdrawNFTSpecialInfo) GetNFTTokenID() uint64 {
	if x != nil {
		return x.NFTTokenID
	}
	return 0
}

func (x *ZkWithdrawNFTSpecialInfo) GetWithdrawAmount() string {
	if x != nil {
		return x.WithdrawAmount
	}
	return ""
}

func (x *ZkWithdrawNFTSpecialInfo) GetCreatorAcctId() uint64 {
	if x != nil {
		return x.CreatorAcctId
	}
	return 0
}

func (x *ZkWithdrawNFTSpecialInfo) GetErcProtocol() uint64 {
	if x != nil {
		return x.ErcProtocol
	}
	return 0
}

func (x *ZkWithdrawNFTSpecialInfo) GetContentHash() []string {
	if x != nil {
		return x.ContentHash
	}
	return nil
}

func (x *ZkWithdrawNFTSpecialInfo) GetCreateSerialId() uint64 {
	if x != nil {
		return x.CreateSerialId
	}
	return 0
}

func (x *ZkWithdrawNFTSpecialInfo) GetInitMintAmount() string {
	if x != nil {
		return x.InitMintAmount
	}
	return ""
}

func (x *ZkWithdrawNFTSpecialInfo) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZkWithdrawNFTSpecialInfo) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type ZkSwapOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctId    uint64       `protobuf:"varint,1,opt,name=acctId,proto3" json:"acctId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	RatioSell string       `protobuf:"bytes,3,opt,name=ratioSell,proto3" json:"ratioSell,omitempty"`
	RatioBuy  string       `protobuf:"bytes,4,opt,name=ratioBuy,proto3" json:"ratioBuy,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkSwapOrderInfo) Reset() {
	*x = ZkSwapOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSwapOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSwapOrderInfo) ProtoMessage() {}

func (x *ZkSwapOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSwapOrderInfo.ProtoReflect.Descriptor instead.
func (*ZkSwapOrderInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{29}
}

func (x *ZkSwapOrderInfo) GetAcctId() uint64 {
	if x != nil {
		return x.AcctId
	}
	return 0
}

func (x *ZkSwapOrderInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkSwapOrderInfo) GetRatioSell() string {
	if x != nil {
		return x.RatioSell
	}
	return ""
}

func (x *ZkSwapOrderInfo) GetRatioBuy() string {
	if x != nil {
		return x.RatioBuy
	}
	return ""
}

func (x *ZkSwapOrderInfo) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkSwapSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTokenId     uint64           `protobuf:"varint,1,opt,name=leftTokenId,proto3" json:"leftTokenId,omitempty"` //BTY-USDT 对
	RightTokenID    uint64           `protobuf:"varint,2,opt,name=rightTokenID,proto3" json:"rightTokenID,omitempty"`
	LeftDealAmount  string           `protobuf:"bytes,3,opt,name=leftDealAmount,proto3" json:"leftDealAmount,omitempty"`
	RightDealAmount string           `protobuf:"bytes,4,opt,name=rightDealAmount,proto3" json:"rightDealAmount,omitempty"`
	Maker           *ZkSwapOrderInfo `protobuf:"bytes,5,opt,name=maker,proto3" json:"maker,omitempty"`
	Taker           *ZkSwapOrderInfo `protobuf:"bytes,6,opt,name=taker,proto3" json:"taker,omitempty"`
	Fee             *ZkSwapFee       `protobuf:"bytes,10,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ZkSwapSpecialInfo) Reset() {
	*x = ZkSwapSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSwapSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSwapSpecialInfo) ProtoMessage() {}

func (x *ZkSwapSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSwapSpecialInfo.ProtoReflect.Descriptor instead.
func (*ZkSwapSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{30}
}

func (x *ZkSwapSpecialInfo) GetLeftTokenId() uint64 {
	if x != nil {
		return x.LeftTokenId
	}
	return 0
}

func (x *ZkSwapSpecialInfo) GetRightTokenID() uint64 {
	if x != nil {
		return x.RightTokenID
	}
	return 0
}

func (x *ZkSwapSpecialInfo) GetLeftDealAmount() string {
	if x != nil {
		return x.LeftDealAmount
	}
	return ""
}

func (x *ZkSwapSpecialInfo) GetRightDealAmount() string {
	if x != nil {
		return x.RightDealAmount
	}
	return ""
}

func (x *ZkSwapSpecialInfo) GetMaker() *ZkSwapOrderInfo {
	if x != nil {
		return x.Maker
	}
	return nil
}

func (x *ZkSwapSpecialInfo) GetTaker() *ZkSwapOrderInfo {
	if x != nil {
		return x.Taker
	}
	return nil
}

func (x *ZkSwapSpecialInfo) GetFee() *ZkSwapFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type OperationSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  repeated OperationSpecialData specialDatas = 111;
	//
	// Types that are assignable to Value:
	//	*OperationSpecialInfo_Deposit
	//	*OperationSpecialInfo_Withdraw
	//	*OperationSpecialInfo_Transfer
	//	*OperationSpecialInfo_TransferToNew
	//	*OperationSpecialInfo_ProxyExit
	//	*OperationSpecialInfo_SetPubKey
	//	*OperationSpecialInfo_FullExit
	//	*OperationSpecialInfo_Swap
	//	*OperationSpecialInfo_ContractToTree
	//	*OperationSpecialInfo_TreeToContract
	//	*OperationSpecialInfo_Fee
	//	*OperationSpecialInfo_MintNFT
	//	*OperationSpecialInfo_WithdrawNFT
	//	*OperationSpecialInfo_TransferNFT
	Value isOperationSpecialInfo_Value `protobuf_oneof:"value"`
}

func (x *OperationSpecialInfo) Reset() {
	*x = OperationSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSpecialInfo) ProtoMessage() {}

func (x *OperationSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSpecialInfo.ProtoReflect.Descriptor instead.
func (*OperationSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{31}
}

func (m *OperationSpecialInfo) GetValue() isOperationSpecialInfo_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *OperationSpecialInfo) GetDeposit() *ZkDeposit {
	if x, ok := x.GetValue().(*OperationSpecialInfo_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *OperationSpecialInfo) GetWithdraw() *ZkWithdraw {
	if x, ok := x.GetValue().(*OperationSpecialInfo_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *OperationSpecialInfo) GetTransfer() *ZkTransfer {
	if x, ok := x.GetValue().(*OperationSpecialInfo_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *OperationSpecialInfo) GetTransferToNew() *ZkTransferToNew {
	if x, ok := x.GetValue().(*OperationSpecialInfo_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (x *OperationSpecialInfo) GetProxyExit() *ZkProxyExitSpecialInfo {
	if x, ok := x.GetValue().(*OperationSpecialInfo_ProxyExit); ok {
		return x.ProxyExit
	}
	return nil
}

func (x *OperationSpecialInfo) GetSetPubKey() *ZkSetPubKey {
	if x, ok := x.GetValue().(*OperationSpecialInfo_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (x *OperationSpecialInfo) GetFullExit() *ZkFullExitSpecialInfo {
	if x, ok := x.GetValue().(*OperationSpecialInfo_FullExit); ok {
		return x.FullExit
	}
	return nil
}

func (x *OperationSpecialInfo) GetSwap() *ZkSwapSpecialInfo {
	if x, ok := x.GetValue().(*OperationSpecialInfo_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *OperationSpecialInfo) GetContractToTree() *ZkContractToTree {
	if x, ok := x.GetValue().(*OperationSpecialInfo_ContractToTree); ok {
		return x.ContractToTree
	}
	return nil
}

func (x *OperationSpecialInfo) GetTreeToContract() *ZkTreeToContract {
	if x, ok := x.GetValue().(*OperationSpecialInfo_TreeToContract); ok {
		return x.TreeToContract
	}
	return nil
}

func (x *OperationSpecialInfo) GetFee() *ZkFeeSpecialInfo {
	if x, ok := x.GetValue().(*OperationSpecialInfo_Fee); ok {
		return x.Fee
	}
	return nil
}

func (x *OperationSpecialInfo) GetMintNFT() *ZkMintNFTSpecialInfo {
	if x, ok := x.GetValue().(*OperationSpecialInfo_MintNFT); ok {
		return x.MintNFT
	}
	return nil
}

func (x *OperationSpecialInfo) GetWithdrawNFT() *ZkWithdrawNFTSpecialInfo {
	if x, ok := x.GetValue().(*OperationSpecialInfo_WithdrawNFT); ok {
		return x.WithdrawNFT
	}
	return nil
}

func (x *OperationSpecialInfo) GetTransferNFT() *ZkTransferNFT {
	if x, ok := x.GetValue().(*OperationSpecialInfo_TransferNFT); ok {
		return x.TransferNFT
	}
	return nil
}

type isOperationSpecialInfo_Value interface {
	isOperationSpecialInfo_Value()
}

type OperationSpecialInfo_Deposit struct {
	Deposit *ZkDeposit `protobuf:"bytes,1,opt,name=deposit,proto3,oneof"`
}

type OperationSpecialInfo_Withdraw struct {
	Withdraw *ZkWithdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type OperationSpecialInfo_Transfer struct {
	Transfer *ZkTransfer `protobuf:"bytes,3,opt,name=transfer,proto3,oneof"`
}

type OperationSpecialInfo_TransferToNew struct {
	TransferToNew *ZkTransferToNew `protobuf:"bytes,4,opt,name=transferToNew,proto3,oneof"`
}

type OperationSpecialInfo_ProxyExit struct {
	ProxyExit *ZkProxyExitSpecialInfo `protobuf:"bytes,5,opt,name=proxyExit,proto3,oneof"`
}

type OperationSpecialInfo_SetPubKey struct {
	SetPubKey *ZkSetPubKey `protobuf:"bytes,6,opt,name=setPubKey,proto3,oneof"`
}

type OperationSpecialInfo_FullExit struct {
	FullExit *ZkFullExitSpecialInfo `protobuf:"bytes,7,opt,name=fullExit,proto3,oneof"`
}

type OperationSpecialInfo_Swap struct {
	Swap *ZkSwapSpecialInfo `protobuf:"bytes,8,opt,name=swap,proto3,oneof"`
}

type OperationSpecialInfo_ContractToTree struct {
	ContractToTree *ZkContractToTree `protobuf:"bytes,9,opt,name=contractToTree,proto3,oneof"`
}

type OperationSpecialInfo_TreeToContract struct {
	TreeToContract *ZkTreeToContract `protobuf:"bytes,10,opt,name=treeToContract,proto3,oneof"`
}

type OperationSpecialInfo_Fee struct {
	Fee *ZkFeeSpecialInfo `protobuf:"bytes,11,opt,name=fee,proto3,oneof"` //fee action
}

type OperationSpecialInfo_MintNFT struct {
	MintNFT *ZkMintNFTSpecialInfo `protobuf:"bytes,12,opt,name=mintNFT,proto3,oneof"`
}

type OperationSpecialInfo_WithdrawNFT struct {
	WithdrawNFT *ZkWithdrawNFTSpecialInfo `protobuf:"bytes,13,opt,name=withdrawNFT,proto3,oneof"`
}

type OperationSpecialInfo_TransferNFT struct {
	TransferNFT *ZkTransferNFT `protobuf:"bytes,14,opt,name=transferNFT,proto3,oneof"`
}

func (*OperationSpecialInfo_Deposit) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_Withdraw) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_Transfer) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_TransferToNew) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_ProxyExit) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_SetPubKey) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_FullExit) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_Swap) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_ContractToTree) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_TreeToContract) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_Fee) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_MintNFT) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_WithdrawNFT) isOperationSpecialInfo_Value() {}

func (*OperationSpecialInfo_TransferNFT) isOperationSpecialInfo_Value() {}

type OrderPricePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sell string `protobuf:"bytes,1,opt,name=sell,proto3" json:"sell,omitempty"`
	Buy  string `protobuf:"bytes,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (x *OrderPricePair) Reset() {
	*x = OrderPricePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPricePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPricePair) ProtoMessage() {}

func (x *OrderPricePair) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPricePair.ProtoReflect.Descriptor instead.
func (*OrderPricePair) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{32}
}

func (x *OrderPricePair) GetSell() string {
	if x != nil {
		return x.Sell
	}
	return ""
}

func (x *OrderPricePair) GetBuy() string {
	if x != nil {
		return x.Buy
	}
	return ""
}

type OperationSpecialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     uint64            `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	RecipientID   uint64            `protobuf:"varint,2,opt,name=recipientID,proto3" json:"recipientID,omitempty"`    //accountID侧设置的recipientID
	RecipientAddr string            `protobuf:"bytes,3,opt,name=recipientAddr,proto3" json:"recipientAddr,omitempty"` //accountID侧设置的recipientAddr
	Amount        []string          `protobuf:"bytes,4,rep,name=amount,proto3" json:"amount,omitempty"`               //accountID侧最初设置的amount
	ChainID       []uint32          `protobuf:"varint,5,rep,packed,name=chainID,proto3" json:"chainID,omitempty"`
	TokenID       []uint64          `protobuf:"varint,6,rep,packed,name=tokenID,proto3" json:"tokenID,omitempty"`
	PricePair     []*OrderPricePair `protobuf:"bytes,7,rep,name=pricePair,proto3" json:"pricePair,omitempty"`
	SigData       *ZkSignature      `protobuf:"bytes,8,opt,name=sigData,proto3" json:"sigData,omitempty"`
	ContentHash   []string          `protobuf:"bytes,9,rep,name=contentHash,proto3" json:"contentHash,omitempty"`
	PubKeyType    uint64            `protobuf:"varint,10,opt,name=pubKeyType,proto3" json:"pubKeyType,omitempty"`
	PubKey        *ZkPubKey         `protobuf:"bytes,11,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (x *OperationSpecialData) Reset() {
	*x = OperationSpecialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSpecialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSpecialData) ProtoMessage() {}

func (x *OperationSpecialData) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSpecialData.ProtoReflect.Descriptor instead.
func (*OperationSpecialData) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{33}
}

func (x *OperationSpecialData) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationSpecialData) GetRecipientID() uint64 {
	if x != nil {
		return x.RecipientID
	}
	return 0
}

func (x *OperationSpecialData) GetRecipientAddr() string {
	if x != nil {
		return x.RecipientAddr
	}
	return ""
}

func (x *OperationSpecialData) GetAmount() []string {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OperationSpecialData) GetChainID() []uint32 {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *OperationSpecialData) GetTokenID() []uint64 {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *OperationSpecialData) GetPricePair() []*OrderPricePair {
	if x != nil {
		return x.PricePair
	}
	return nil
}

func (x *OperationSpecialData) GetSigData() *ZkSignature {
	if x != nil {
		return x.SigData
	}
	return nil
}

func (x *OperationSpecialData) GetContentHash() []string {
	if x != nil {
		return x.ContentHash
	}
	return nil
}

func (x *OperationSpecialData) GetPubKeyType() uint64 {
	if x != nil {
		return x.PubKeyType
	}
	return 0
}

func (x *OperationSpecialData) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

var File_witness_proto protoreflect.FileDescriptor

var file_witness_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x5a, 0x6b, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33,
	0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x0a, 0x5a, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x5a,
	0x6b, 0x54, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x5a, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70,
	0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x5a, 0x6b, 0x53,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xee, 0x01,
	0x0a, 0x0a, 0x5a, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x3a,
	0x0a, 0x06, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x5a,
	0x6b, 0x4d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x5a, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x4e, 0x46, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x46,
	0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70,
	0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x5a, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x46, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x22, 0x72, 0x0a, 0x0b, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4d, 0x73, 0x67, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x4b, 0x0a, 0x05, 0x5a, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x22, 0x26, 0x0a, 0x08, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x79, 0x22, 0x5d, 0x0a, 0x09, 0x5a, 0x6b, 0x53,
	0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73,
	0x22, 0x66, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x37, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xda, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x6f, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x5a, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78,
	0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53,
	0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x15,
	0x5a, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x5a, 0x6b, 0x46, 0x65, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd8, 0x02, 0x0a,
	0x14, 0x5a, 0x6b, 0x4d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x72,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x65, 0x77, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x46,
	0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x18, 0x5a, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x46, 0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x0f, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x75, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xab, 0x02, 0x0a,
	0x11, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74,
	0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77,
	0x61, 0x70, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xb9, 0x06, 0x0a, 0x14, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x4e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e,
	0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x4e, 0x65, 0x77, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x53, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x73, 0x77,
	0x61, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f,
	0x54, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x54,
	0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x6f, 0x54, 0x72, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x46, 0x65, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x4d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x12, 0x43,
	0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x46, 0x54, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x46, 0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4e, 0x46, 0x54, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e,
	0x46, 0x54, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x46, 0x54, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x46, 0x54, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x79, 0x22, 0x96,
	0x03, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x33, 0x63, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x70, 0x70, 0x2f, 0x7a, 0x6b,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_witness_proto_rawDescOnce sync.Once
	file_witness_proto_rawDescData = file_witness_proto_rawDesc
)

func file_witness_proto_rawDescGZIP() []byte {
	file_witness_proto_rawDescOnce.Do(func() {
		file_witness_proto_rawDescData = protoimpl.X.CompressGZIP(file_witness_proto_rawDescData)
	})
	return file_witness_proto_rawDescData
}

var file_witness_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_witness_proto_goTypes = []interface{}{
	(*ZkDeposit)(nil),                // 0: types.ZkDeposit
	(*ZkWithdraw)(nil),               // 1: types.ZkWithdraw
	(*ZkContractToTree)(nil),         // 2: types.ZkContractToTree
	(*ZkTreeToContract)(nil),         // 3: types.ZkTreeToContract
	(*ZkTransfer)(nil),               // 4: types.ZkTransfer
	(*ZkTransferToNew)(nil),          // 5: types.ZkTransferToNew
	(*ZkProxyExit)(nil),              // 6: types.ZkProxyExit
	(*ZkSetPubKey)(nil),              // 7: types.ZkSetPubKey
	(*ZkFullExit)(nil),               // 8: types.ZkFullExit
	(*ZkSwap)(nil),                   // 9: types.ZkSwap
	(*ZkMintNFT)(nil),                // 10: types.ZkMintNFT
	(*ZkWithdrawNFT)(nil),            // 11: types.ZkWithdrawNFT
	(*ZkTransferNFT)(nil),            // 12: types.ZkTransferNFT
	(*ZkSignature)(nil),              // 13: types.ZkSignature
	(*ZkMsg)(nil),                    // 14: types.ZkMsg
	(*ZkPubKey)(nil),                 // 15: types.ZkPubKey
	(*ZkSwapFee)(nil),                // 16: types.ZkSwapFee
	(*SiblingPath)(nil),              // 17: types.SiblingPath
	(*AccountProxyPubKeys)(nil),      // 18: types.AccountProxyPubKeys
	(*AccountWitness)(nil),           // 19: types.AccountWitness
	(*TokenWitness)(nil),             // 20: types.TokenWitness
	(*OperationMetaBranch)(nil),      // 21: types.OperationMetaBranch
	(*OperationPairBranch)(nil),      // 22: types.OperationPairBranch
	(*OperationInfo)(nil),            // 23: types.OperationInfo
	(*ZkProxyExitSpecialInfo)(nil),   // 24: types.ZkProxyExitSpecialInfo
	(*ZkFullExitSpecialInfo)(nil),    // 25: types.ZkFullExitSpecialInfo
	(*ZkFeeSpecialInfo)(nil),         // 26: types.ZkFeeSpecialInfo
	(*ZkMintNFTSpecialInfo)(nil),     // 27: types.ZkMintNFTSpecialInfo
	(*ZkWithdrawNFTSpecialInfo)(nil), // 28: types.ZkWithdrawNFTSpecialInfo
	(*ZkSwapOrderInfo)(nil),          // 29: types.ZkSwapOrderInfo
	(*ZkSwapSpecialInfo)(nil),        // 30: types.ZkSwapSpecialInfo
	(*OperationSpecialInfo)(nil),     // 31: types.OperationSpecialInfo
	(*OrderPricePair)(nil),           // 32: types.OrderPricePair
	(*OperationSpecialData)(nil),     // 33: types.OperationSpecialData
}
var file_witness_proto_depIdxs = []int32{
	13, // 0: types.ZkDeposit.signature:type_name -> types.ZkSignature
	13, // 1: types.ZkWithdraw.signature:type_name -> types.ZkSignature
	16, // 2: types.ZkWithdraw.fee:type_name -> types.ZkSwapFee
	13, // 3: types.ZkContractToTree.signature:type_name -> types.ZkSignature
	13, // 4: types.ZkTreeToContract.signature:type_name -> types.ZkSignature
	13, // 5: types.ZkTransfer.signature:type_name -> types.ZkSignature
	16, // 6: types.ZkTransfer.fee:type_name -> types.ZkSwapFee
	13, // 7: types.ZkTransferToNew.signature:type_name -> types.ZkSignature
	16, // 8: types.ZkTransferToNew.fee:type_name -> types.ZkSwapFee
	13, // 9: types.ZkProxyExit.signature:type_name -> types.ZkSignature
	16, // 10: types.ZkProxyExit.fee:type_name -> types.ZkSwapFee
	15, // 11: types.ZkSetPubKey.pubKey:type_name -> types.ZkPubKey
	13, // 12: types.ZkSetPubKey.signature:type_name -> types.ZkSignature
	13, // 13: types.ZkFullExit.signature:type_name -> types.ZkSignature
	16, // 14: types.ZkFullExit.fee:type_name -> types.ZkSwapFee
	13, // 15: types.ZkSwap.signature:type_name -> types.ZkSignature
	13, // 16: types.ZkMintNFT.signature:type_name -> types.ZkSignature
	16, // 17: types.ZkMintNFT.fee:type_name -> types.ZkSwapFee
	13, // 18: types.ZkWithdrawNFT.signature:type_name -> types.ZkSignature
	16, // 19: types.ZkWithdrawNFT.fee:type_name -> types.ZkSwapFee
	13, // 20: types.ZkTransferNFT.signature:type_name -> types.ZkSignature
	16, // 21: types.ZkTransferNFT.fee:type_name -> types.ZkSwapFee
	15, // 22: types.ZkSignature.pubKey:type_name -> types.ZkPubKey
	14, // 23: types.ZkSignature.msg:type_name -> types.ZkMsg
	15, // 24: types.AccountProxyPubKeys.normal:type_name -> types.ZkPubKey
	15, // 25: types.AccountProxyPubKeys.system:type_name -> types.ZkPubKey
	15, // 26: types.AccountProxyPubKeys.super:type_name -> types.ZkPubKey
	15, // 27: types.AccountWitness.pubKey:type_name -> types.ZkPubKey
	17, // 28: types.AccountWitness.sibling:type_name -> types.SiblingPath
	18, // 29: types.AccountWitness.proxyPubKeys:type_name -> types.AccountProxyPubKeys
	17, // 30: types.TokenWitness.sibling:type_name -> types.SiblingPath
	19, // 31: types.OperationMetaBranch.accountWitness:type_name -> types.AccountWitness
	20, // 32: types.OperationMetaBranch.tokenWitness:type_name -> types.TokenWitness
	21, // 33: types.OperationPairBranch.before:type_name -> types.OperationMetaBranch
	21, // 34: types.OperationPairBranch.after:type_name -> types.OperationMetaBranch
	22, // 35: types.OperationInfo.operationBranches:type_name -> types.OperationPairBranch
	31, // 36: types.OperationInfo.specialInfo:type_name -> types.OperationSpecialInfo
	13, // 37: types.ZkProxyExitSpecialInfo.signature:type_name -> types.ZkSignature
	16, // 38: types.ZkProxyExitSpecialInfo.fee:type_name -> types.ZkSwapFee
	13, // 39: types.ZkFullExitSpecialInfo.signature:type_name -> types.ZkSignature
	13, // 40: types.ZkFeeSpecialInfo.signature:type_name -> types.ZkSignature
	13, // 41: types.ZkMintNFTSpecialInfo.signature:type_name -> types.ZkSignature
	16, // 42: types.ZkMintNFTSpecialInfo.fee:type_name -> types.ZkSwapFee
	13, // 43: types.ZkWithdrawNFTSpecialInfo.signature:type_name -> types.ZkSignature
	16, // 44: types.ZkWithdrawNFTSpecialInfo.fee:type_name -> types.ZkSwapFee
	13, // 45: types.ZkSwapOrderInfo.signature:type_name -> types.ZkSignature
	29, // 46: types.ZkSwapSpecialInfo.maker:type_name -> types.ZkSwapOrderInfo
	29, // 47: types.ZkSwapSpecialInfo.taker:type_name -> types.ZkSwapOrderInfo
	16, // 48: types.ZkSwapSpecialInfo.fee:type_name -> types.ZkSwapFee
	0,  // 49: types.OperationSpecialInfo.deposit:type_name -> types.ZkDeposit
	1,  // 50: types.OperationSpecialInfo.withdraw:type_name -> types.ZkWithdraw
	4,  // 51: types.OperationSpecialInfo.transfer:type_name -> types.ZkTransfer
	5,  // 52: types.OperationSpecialInfo.transferToNew:type_name -> types.ZkTransferToNew
	24, // 53: types.OperationSpecialInfo.proxyExit:type_name -> types.ZkProxyExitSpecialInfo
	7,  // 54: types.OperationSpecialInfo.setPubKey:type_name -> types.ZkSetPubKey
	25, // 55: types.OperationSpecialInfo.fullExit:type_name -> types.ZkFullExitSpecialInfo
	30, // 56: types.OperationSpecialInfo.swap:type_name -> types.ZkSwapSpecialInfo
	2,  // 57: types.OperationSpecialInfo.contractToTree:type_name -> types.ZkContractToTree
	3,  // 58: types.OperationSpecialInfo.treeToContract:type_name -> types.ZkTreeToContract
	26, // 59: types.OperationSpecialInfo.fee:type_name -> types.ZkFeeSpecialInfo
	27, // 60: types.OperationSpecialInfo.mintNFT:type_name -> types.ZkMintNFTSpecialInfo
	28, // 61: types.OperationSpecialInfo.withdrawNFT:type_name -> types.ZkWithdrawNFTSpecialInfo
	12, // 62: types.OperationSpecialInfo.transferNFT:type_name -> types.ZkTransferNFT
	32, // 63: types.OperationSpecialData.pricePair:type_name -> types.OrderPricePair
	13, // 64: types.OperationSpecialData.sigData:type_name -> types.ZkSignature
	15, // 65: types.OperationSpecialData.pubKey:type_name -> types.ZkPubKey
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_witness_proto_init() }
func file_witness_proto_init() {
	if File_witness_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_witness_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkContractToTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTreeToContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransferToNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkProxyExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSetPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkFullExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkMintNFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkWithdrawNFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransferNFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSwapFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiblingPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountProxyPubKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMetaBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationPairBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkProxyExitSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkFullExitSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkFeeSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkMintNFTSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkWithdrawNFTSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSwapOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSwapSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPricePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSpecialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_witness_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*OperationSpecialInfo_Deposit)(nil),
		(*OperationSpecialInfo_Withdraw)(nil),
		(*OperationSpecialInfo_Transfer)(nil),
		(*OperationSpecialInfo_TransferToNew)(nil),
		(*OperationSpecialInfo_ProxyExit)(nil),
		(*OperationSpecialInfo_SetPubKey)(nil),
		(*OperationSpecialInfo_FullExit)(nil),
		(*OperationSpecialInfo_Swap)(nil),
		(*OperationSpecialInfo_ContractToTree)(nil),
		(*OperationSpecialInfo_TreeToContract)(nil),
		(*OperationSpecialInfo_Fee)(nil),
		(*OperationSpecialInfo_MintNFT)(nil),
		(*OperationSpecialInfo_WithdrawNFT)(nil),
		(*OperationSpecialInfo_TransferNFT)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_witness_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_witness_proto_goTypes,
		DependencyIndexes: file_witness_proto_depIdxs,
		MessageInfos:      file_witness_proto_msgTypes,
	}.Build()
	File_witness_proto = out.File
	file_witness_proto_rawDesc = nil
	file_witness_proto_goTypes = nil
	file_witness_proto_depIdxs = nil
}
