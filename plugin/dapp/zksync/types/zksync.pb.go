// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: zksync.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZksyncAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ZksyncAction_Deposit
	//	*ZksyncAction_Withdraw
	//	*ZksyncAction_ContractToLeaf
	//	*ZksyncAction_LeafToContract
	//	*ZksyncAction_Transfer
	//	*ZksyncAction_TransferToNew
	//	*ZksyncAction_ForceQuit
	//	*ZksyncAction_SetPubKey
	Value isZksyncAction_Value `protobuf_oneof:"value"`
	Ty    int32                `protobuf:"varint,9,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *ZksyncAction) Reset() {
	*x = ZksyncAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZksyncAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZksyncAction) ProtoMessage() {}

func (x *ZksyncAction) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZksyncAction.ProtoReflect.Descriptor instead.
func (*ZksyncAction) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{0}
}

func (m *ZksyncAction) GetValue() isZksyncAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ZksyncAction) GetDeposit() *Deposit {
	if x, ok := x.GetValue().(*ZksyncAction_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ZksyncAction) GetWithdraw() *Withdraw {
	if x, ok := x.GetValue().(*ZksyncAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *ZksyncAction) GetContractToLeaf() *ContractToLeaf {
	if x, ok := x.GetValue().(*ZksyncAction_ContractToLeaf); ok {
		return x.ContractToLeaf
	}
	return nil
}

func (x *ZksyncAction) GetLeafToContract() *LeafToContract {
	if x, ok := x.GetValue().(*ZksyncAction_LeafToContract); ok {
		return x.LeafToContract
	}
	return nil
}

func (x *ZksyncAction) GetTransfer() *Transfer {
	if x, ok := x.GetValue().(*ZksyncAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ZksyncAction) GetTransferToNew() *TransferToNew {
	if x, ok := x.GetValue().(*ZksyncAction_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (x *ZksyncAction) GetForceQuit() *ForceQuit {
	if x, ok := x.GetValue().(*ZksyncAction_ForceQuit); ok {
		return x.ForceQuit
	}
	return nil
}

func (x *ZksyncAction) GetSetPubKey() *SetPubKey {
	if x, ok := x.GetValue().(*ZksyncAction_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (x *ZksyncAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

type isZksyncAction_Value interface {
	isZksyncAction_Value()
}

type ZksyncAction_Deposit struct {
	Deposit *Deposit `protobuf:"bytes,1,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction_Withdraw struct {
	Withdraw *Withdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction_ContractToLeaf struct {
	ContractToLeaf *ContractToLeaf `protobuf:"bytes,3,opt,name=contractToLeaf,proto3,oneof"`
}

type ZksyncAction_LeafToContract struct {
	LeafToContract *LeafToContract `protobuf:"bytes,4,opt,name=leafToContract,proto3,oneof"`
}

type ZksyncAction_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction_TransferToNew struct {
	TransferToNew *TransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction_ForceQuit struct {
	ForceQuit *ForceQuit `protobuf:"bytes,7,opt,name=forceQuit,proto3,oneof"`
}

type ZksyncAction_SetPubKey struct {
	SetPubKey *SetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

func (*ZksyncAction_Deposit) isZksyncAction_Value() {}

func (*ZksyncAction_Withdraw) isZksyncAction_Value() {}

func (*ZksyncAction_ContractToLeaf) isZksyncAction_Value() {}

func (*ZksyncAction_LeafToContract) isZksyncAction_Value() {}

func (*ZksyncAction_Transfer) isZksyncAction_Value() {}

func (*ZksyncAction_TransferToNew) isZksyncAction_Value() {}

func (*ZksyncAction_ForceQuit) isZksyncAction_Value() {}

func (*ZksyncAction_SetPubKey) isZksyncAction_Value() {}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey   *PubKey `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	SignInfo []byte  `protobuf:"bytes,2,opt,name=signInfo,proto3" json:"signInfo,omitempty"`
	Msg      *Msg    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{1}
}

func (x *Signature) GetPubKey() *PubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Signature) GetSignInfo() []byte {
	if x != nil {
		return x.SignInfo
	}
	return nil
}

func (x *Signature) GetMsg() *Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second string `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
	Third  string `protobuf:"bytes,3,opt,name=third,proto3" json:"third,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{2}
}

func (x *Msg) GetFirst() string {
	if x != nil {
		return x.First
	}
	return ""
}

func (x *Msg) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

func (x *Msg) GetThird() string {
	if x != nil {
		return x.Third
	}
	return ""
}

type PubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y string `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PubKey) Reset() {
	*x = PubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKey) ProtoMessage() {}

func (x *PubKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKey.ProtoReflect.Descriptor instead.
func (*PubKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{3}
}

func (x *PubKey) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *PubKey) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

//某个token的余额
type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId uint64 `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBalance) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *TokenBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type AccountTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           uint64     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                     //当前的叶子索引
	TotalIndex      uint64     `protobuf:"varint,2,opt,name=totalIndex,proto3" json:"totalIndex,omitempty"`           //总计叶子索引
	MaxCurrentIndex uint64     `protobuf:"varint,3,opt,name=maxCurrentIndex,proto3" json:"maxCurrentIndex,omitempty"` //当前索引最大值，超过最大值会进行归档
	SubTrees        []*SubTree `protobuf:"bytes,8,rep,name=subTrees,proto3" json:"subTrees,omitempty"`                //当前未归档的子树
}

func (x *AccountTree) Reset() {
	*x = AccountTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTree) ProtoMessage() {}

func (x *AccountTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTree.ProtoReflect.Descriptor instead.
func (*AccountTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{5}
}

func (x *AccountTree) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AccountTree) GetTotalIndex() uint64 {
	if x != nil {
		return x.TotalIndex
	}
	return 0
}

func (x *AccountTree) GetMaxCurrentIndex() uint64 {
	if x != nil {
		return x.MaxCurrentIndex
	}
	return 0
}

func (x *AccountTree) GetSubTrees() []*SubTree {
	if x != nil {
		return x.SubTrees
	}
	return nil
}

type Leaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint64   `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`      //accountId其实就是叶子的totalIndex
	EthAddress  string   `protobuf:"bytes,5,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`     //账户对应的以太坊地址
	PubKey      *PubKey  `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`             //eddsa公钥，用于验证身份
	Chain33Addr string   `protobuf:"bytes,7,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`   //chain33地址
	TokenHash   string   `protobuf:"bytes,8,opt,name=tokenHash,proto3" json:"tokenHash,omitempty"`       //叶子下token的hash
	TokenIds    []uint64 `protobuf:"varint,9,rep,packed,name=tokenIds,proto3" json:"tokenIds,omitempty"` //叶子下拥有的tokenId
}

func (x *Leaf) Reset() {
	*x = Leaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaf) ProtoMessage() {}

func (x *Leaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaf.ProtoReflect.Descriptor instead.
func (*Leaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{6}
}

func (x *Leaf) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Leaf) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *Leaf) GetPubKey() *PubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Leaf) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *Leaf) GetTokenHash() string {
	if x != nil {
		return x.TokenHash
	}
	return ""
}

func (x *Leaf) GetTokenIds() []uint64 {
	if x != nil {
		return x.TokenIds
	}
	return nil
}

type RootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash   string `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`      //归档Merkle Tree的根hash
	Height     int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`         //归档的高度
	StartIndex uint64 `protobuf:"varint,3,opt,name=startIndex,proto3" json:"startIndex,omitempty"` //开始的全局index
}

func (x *RootInfo) Reset() {
	*x = RootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootInfo) ProtoMessage() {}

func (x *RootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootInfo.ProtoReflect.Descriptor instead.
func (*RootInfo) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{7}
}

func (x *RootInfo) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *RootInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RootInfo) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

type SubTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	RootHash []byte `protobuf:"bytes,2,opt,name=rootHash,proto3" json:"rootHash,omitempty"` //子树的根hash
}

func (x *SubTree) Reset() {
	*x = SubTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTree) ProtoMessage() {}

func (x *SubTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTree.ProtoReflect.Descriptor instead.
func (*SubTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{8}
}

func (x *SubTree) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SubTree) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

type MerkleTreeProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash string   `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	ProofSet []string `protobuf:"bytes,2,rep,name=proofSet,proto3" json:"proofSet,omitempty"`
	Helpers  []string `protobuf:"bytes,3,rep,name=helpers,proto3" json:"helpers,omitempty"`
}

func (x *MerkleTreeProof) Reset() {
	*x = MerkleTreeProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeProof) ProtoMessage() {}

func (x *MerkleTreeProof) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeProof.ProtoReflect.Descriptor instead.
func (*MerkleTreeProof) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{9}
}

func (x *MerkleTreeProof) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *MerkleTreeProof) GetProofSet() []string {
	if x != nil {
		return x.ProofSet
	}
	return nil
}

func (x *MerkleTreeProof) GetHelpers() []string {
	if x != nil {
		return x.Helpers
	}
	return nil
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId     uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount      string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress  string     `protobuf:"bytes,3,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Chain33Addr string     `protobuf:"bytes,4,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	Signature   *Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{10}
}

func (x *Deposit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *Deposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Deposit) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *Deposit) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *Deposit) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Withdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64     `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{11}
}

func (x *Withdraw) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *Withdraw) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Withdraw) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Withdraw) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ContractToLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64     `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ContractToLeaf) Reset() {
	*x = ContractToLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractToLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractToLeaf) ProtoMessage() {}

func (x *ContractToLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractToLeaf.ProtoReflect.Descriptor instead.
func (*ContractToLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{12}
}

func (x *ContractToLeaf) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ContractToLeaf) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ContractToLeaf) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ContractToLeaf) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type LeafToContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64     `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *LeafToContract) Reset() {
	*x = LeafToContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeafToContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeafToContract) ProtoMessage() {}

func (x *LeafToContract) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeafToContract.ProtoReflect.Descriptor instead.
func (*LeafToContract) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{13}
}

func (x *LeafToContract) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *LeafToContract) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *LeafToContract) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *LeafToContract) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount        string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId uint64     `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToAccountId   uint64     `protobuf:"varint,4,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Signature     *Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{14}
}

func (x *Transfer) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *Transfer) GetToAccountId() uint64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *Transfer) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TransferToNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId          uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount           string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId    uint64     `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToEthAddress     string     `protobuf:"bytes,4,opt,name=toEthAddress,proto3" json:"toEthAddress,omitempty"`
	ToChain33Address string     `protobuf:"bytes,5,opt,name=toChain33Address,proto3" json:"toChain33Address,omitempty"`
	Signature        *Signature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TransferToNew) Reset() {
	*x = TransferToNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToNew) ProtoMessage() {}

func (x *TransferToNew) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToNew.ProtoReflect.Descriptor instead.
func (*TransferToNew) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{15}
}

func (x *TransferToNew) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *TransferToNew) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransferToNew) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *TransferToNew) GetToEthAddress() string {
	if x != nil {
		return x.ToEthAddress
	}
	return ""
}

func (x *TransferToNew) GetToChain33Address() string {
	if x != nil {
		return x.ToChain33Address
	}
	return ""
}

func (x *TransferToNew) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ForceQuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64     `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AccountId uint64     `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ForceQuit) Reset() {
	*x = ForceQuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceQuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceQuit) ProtoMessage() {}

func (x *ForceQuit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceQuit.ProtoReflect.Descriptor instead.
func (*ForceQuit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{16}
}

func (x *ForceQuit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ForceQuit) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ForceQuit) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SetPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint64     `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	PubKey    *PubKey    `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetPubKey) Reset() {
	*x = SetPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPubKey) ProtoMessage() {}

func (x *SetPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPubKey.ProtoReflect.Descriptor instead.
func (*SetPubKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{17}
}

func (x *SetPubKey) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *SetPubKey) GetPubKey() *PubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *SetPubKey) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// leaf merkle proof票据日志
type ReceiptLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaf       *Leaf            `protobuf:"bytes,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Token      *TokenBalance    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TreeProof  *MerkleTreeProof `protobuf:"bytes,3,opt,name=treeProof,proto3" json:"treeProof,omitempty"`
	TokenProof *MerkleTreeProof `protobuf:"bytes,4,opt,name=tokenProof,proto3" json:"tokenProof,omitempty"`
}

func (x *ReceiptLeaf) Reset() {
	*x = ReceiptLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptLeaf) ProtoMessage() {}

func (x *ReceiptLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptLeaf.ProtoReflect.Descriptor instead.
func (*ReceiptLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{18}
}

func (x *ReceiptLeaf) GetLeaf() *Leaf {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *ReceiptLeaf) GetToken() *TokenBalance {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ReceiptLeaf) GetTreeProof() *MerkleTreeProof {
	if x != nil {
		return x.TreeProof
	}
	return nil
}

func (x *ReceiptLeaf) GetTokenProof() *MerkleTreeProof {
	if x != nil {
		return x.TokenProof
	}
	return nil
}

type SiblingPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	Helper []string `protobuf:"bytes,2,rep,name=helper,proto3" json:"helper,omitempty"`
}

func (x *SiblingPath) Reset() {
	*x = SiblingPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiblingPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiblingPath) ProtoMessage() {}

func (x *SiblingPath) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiblingPath.ProtoReflect.Descriptor instead.
func (*SiblingPath) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{19}
}

func (x *SiblingPath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SiblingPath) GetHelper() []string {
	if x != nil {
		return x.Helper
	}
	return nil
}

type AccountWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EthAddr       string       `protobuf:"bytes,2,opt,name=ethAddr,proto3" json:"ethAddr,omitempty"`
	Chain33Addr   string       `protobuf:"bytes,3,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	TokenTreeRoot string       `protobuf:"bytes,4,opt,name=tokenTreeRoot,proto3" json:"tokenTreeRoot,omitempty"` //sub chain token tree root
	PubKey        *PubKey      `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Sibling       *SiblingPath `protobuf:"bytes,6,opt,name=sibling,proto3" json:"sibling,omitempty"`
}

func (x *AccountWitness) Reset() {
	*x = AccountWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountWitness) ProtoMessage() {}

func (x *AccountWitness) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountWitness.ProtoReflect.Descriptor instead.
func (*AccountWitness) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{20}
}

func (x *AccountWitness) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AccountWitness) GetEthAddr() string {
	if x != nil {
		return x.EthAddr
	}
	return ""
}

func (x *AccountWitness) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *AccountWitness) GetTokenTreeRoot() string {
	if x != nil {
		return x.TokenTreeRoot
	}
	return ""
}

func (x *AccountWitness) GetPubKey() *PubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *AccountWitness) GetSibling() *SiblingPath {
	if x != nil {
		return x.Sibling
	}
	return nil
}

type TokenWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`          //eth contract define token ID
	Balance string       `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"` //eth balance u128
	Sibling *SiblingPath `protobuf:"bytes,3,opt,name=sibling,proto3" json:"sibling,omitempty"`
}

func (x *TokenWitness) Reset() {
	*x = TokenWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWitness) ProtoMessage() {}

func (x *TokenWitness) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWitness.ProtoReflect.Descriptor instead.
func (*TokenWitness) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{21}
}

func (x *TokenWitness) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TokenWitness) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TokenWitness) GetSibling() *SiblingPath {
	if x != nil {
		return x.Sibling
	}
	return nil
}

//one operation branch
type OperationMetaBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountWitness *AccountWitness `protobuf:"bytes,1,opt,name=accountWitness,proto3" json:"accountWitness,omitempty"`
	TokenWitness   *TokenWitness   `protobuf:"bytes,2,opt,name=tokenWitness,proto3" json:"tokenWitness,omitempty"`
}

func (x *OperationMetaBranch) Reset() {
	*x = OperationMetaBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetaBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetaBranch) ProtoMessage() {}

func (x *OperationMetaBranch) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetaBranch.ProtoReflect.Descriptor instead.
func (*OperationMetaBranch) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{22}
}

func (x *OperationMetaBranch) GetAccountWitness() *AccountWitness {
	if x != nil {
		return x.AccountWitness
	}
	return nil
}

func (x *OperationMetaBranch) GetTokenWitness() *TokenWitness {
	if x != nil {
		return x.TokenWitness
	}
	return nil
}

// before and after operation data
type OperationPairBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *OperationMetaBranch `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *OperationMetaBranch `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *OperationPairBranch) Reset() {
	*x = OperationPairBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationPairBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationPairBranch) ProtoMessage() {}

func (x *OperationPairBranch) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationPairBranch.ProtoReflect.Descriptor instead.
func (*OperationPairBranch) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{23}
}

func (x *OperationPairBranch) GetBefore() *OperationMetaBranch {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *OperationPairBranch) GetAfter() *OperationMetaBranch {
	if x != nil {
		return x.After
	}
	return nil
}

type OperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64     `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxIndex     uint32     `protobuf:"varint,2,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	TxType      uint32     `protobuf:"varint,3,opt,name=txType,proto3" json:"txType,omitempty"`
	AccountID   uint64     `protobuf:"varint,4,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TokenID     uint64     `protobuf:"varint,5,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount      string     `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	SigData     *Signature `protobuf:"bytes,7,opt,name=sigData,proto3" json:"sigData,omitempty"`
	Roots       []string   `protobuf:"bytes,8,rep,name=roots,proto3" json:"roots,omitempty"` //每个操作后的root
	//每个operation data由一对 操作前后数据组成，不同操作可以有多个操作数据，deposit:1,transfer:2
	OperationBranches []*OperationPairBranch `protobuf:"bytes,9,rep,name=operationBranches,proto3" json:"operationBranches,omitempty"`
	//操作特殊数据,像订单数据
	SpecialInfo *OperationSpecialInfo `protobuf:"bytes,10,opt,name=specialInfo,proto3" json:"specialInfo,omitempty"`
}

func (x *OperationInfo) Reset() {
	*x = OperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInfo) ProtoMessage() {}

func (x *OperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInfo.ProtoReflect.Descriptor instead.
func (*OperationInfo) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{24}
}

func (x *OperationInfo) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *OperationInfo) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *OperationInfo) GetTxType() uint32 {
	if x != nil {
		return x.TxType
	}
	return 0
}

func (x *OperationInfo) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationInfo) GetTokenID() uint64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *OperationInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperationInfo) GetSigData() *Signature {
	if x != nil {
		return x.SigData
	}
	return nil
}

func (x *OperationInfo) GetRoots() []string {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *OperationInfo) GetOperationBranches() []*OperationPairBranch {
	if x != nil {
		return x.OperationBranches
	}
	return nil
}

func (x *OperationInfo) GetSpecialInfo() *OperationSpecialInfo {
	if x != nil {
		return x.SpecialInfo
	}
	return nil
}

type OperationSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecialDatas []*OperationSpecialData `protobuf:"bytes,1,rep,name=specialDatas,proto3" json:"specialDatas,omitempty"`
}

func (x *OperationSpecialInfo) Reset() {
	*x = OperationSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSpecialInfo) ProtoMessage() {}

func (x *OperationSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSpecialInfo.ProtoReflect.Descriptor instead.
func (*OperationSpecialInfo) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{25}
}

func (x *OperationSpecialInfo) GetSpecialDatas() []*OperationSpecialData {
	if x != nil {
		return x.SpecialDatas
	}
	return nil
}

type OrderPricePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sell uint64 `protobuf:"varint,1,opt,name=sell,proto3" json:"sell,omitempty"`
	Buy  uint64 `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (x *OrderPricePair) Reset() {
	*x = OrderPricePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPricePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPricePair) ProtoMessage() {}

func (x *OrderPricePair) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPricePair.ProtoReflect.Descriptor instead.
func (*OrderPricePair) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{26}
}

func (x *OrderPricePair) GetSell() uint64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *OrderPricePair) GetBuy() uint64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

type OperationSpecialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     uint64            `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	RecipientID   uint64            `protobuf:"varint,2,opt,name=recipientID,proto3" json:"recipientID,omitempty"`    //accountID侧设置的recipientID
	RecipientAddr string            `protobuf:"bytes,3,opt,name=recipientAddr,proto3" json:"recipientAddr,omitempty"` //accountID侧设置的recipientAddr
	Amount        []string          `protobuf:"bytes,4,rep,name=amount,proto3" json:"amount,omitempty"`               //accountID侧最初设置的amount
	ChainID       []uint32          `protobuf:"varint,5,rep,packed,name=chainID,proto3" json:"chainID,omitempty"`
	TokenID       []uint64          `protobuf:"varint,6,rep,packed,name=tokenID,proto3" json:"tokenID,omitempty"`
	PricePair     []*OrderPricePair `protobuf:"bytes,7,rep,name=pricePair,proto3" json:"pricePair,omitempty"`
	SigData       *Signature        `protobuf:"bytes,8,opt,name=sigData,proto3" json:"sigData,omitempty"`
}

func (x *OperationSpecialData) Reset() {
	*x = OperationSpecialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSpecialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSpecialData) ProtoMessage() {}

func (x *OperationSpecialData) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSpecialData.ProtoReflect.Descriptor instead.
func (*OperationSpecialData) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{27}
}

func (x *OperationSpecialData) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationSpecialData) GetRecipientID() uint64 {
	if x != nil {
		return x.RecipientID
	}
	return 0
}

func (x *OperationSpecialData) GetRecipientAddr() string {
	if x != nil {
		return x.RecipientAddr
	}
	return ""
}

func (x *OperationSpecialData) GetAmount() []string {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OperationSpecialData) GetChainID() []uint32 {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *OperationSpecialData) GetTokenID() []uint64 {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *OperationSpecialData) GetPricePair() []*OrderPricePair {
	if x != nil {
		return x.PricePair
	}
	return nil
}

func (x *OperationSpecialData) GetSigData() *Signature {
	if x != nil {
		return x.SigData
	}
	return nil
}

var File_zksync_proto protoreflect.FileDescriptor

var file_zksync_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x0c, 0x5a, 0x6b, 0x73, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c,
	0x65, 0x61, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65,
	0x61, 0x66, 0x12, 0x3f, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x4e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77,
	0x12, 0x30, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x49, 0x0a, 0x03, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x22, 0x24, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x79, 0x22, 0x42, 0x0a, 0x0c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x04, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3d, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x63, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74,
	0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x4c,
	0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb4, 0x01,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x73,
	0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09, 0x74,
	0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x39, 0x0a, 0x0b, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x0e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x73, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x8d, 0x01,
	0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6f,
	0x74, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x69, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x14, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x22, 0x36, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x62, 0x75, 0x79, 0x22, 0xa9, 0x02, 0x0a,
	0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x07,
	0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x32, 0x08, 0x0a, 0x06, 0x7a, 0x6b, 0x73, 0x79,
	0x6e, 0x63, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zksync_proto_rawDescOnce sync.Once
	file_zksync_proto_rawDescData = file_zksync_proto_rawDesc
)

func file_zksync_proto_rawDescGZIP() []byte {
	file_zksync_proto_rawDescOnce.Do(func() {
		file_zksync_proto_rawDescData = protoimpl.X.CompressGZIP(file_zksync_proto_rawDescData)
	})
	return file_zksync_proto_rawDescData
}

var file_zksync_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_zksync_proto_goTypes = []interface{}{
	(*ZksyncAction)(nil),         // 0: types.ZksyncAction
	(*Signature)(nil),            // 1: types.Signature
	(*Msg)(nil),                  // 2: types.Msg
	(*PubKey)(nil),               // 3: types.PubKey
	(*TokenBalance)(nil),         // 4: types.TokenBalance
	(*AccountTree)(nil),          // 5: types.AccountTree
	(*Leaf)(nil),                 // 6: types.Leaf
	(*RootInfo)(nil),             // 7: types.RootInfo
	(*SubTree)(nil),              // 8: types.SubTree
	(*MerkleTreeProof)(nil),      // 9: types.MerkleTreeProof
	(*Deposit)(nil),              // 10: types.Deposit
	(*Withdraw)(nil),             // 11: types.Withdraw
	(*ContractToLeaf)(nil),       // 12: types.ContractToLeaf
	(*LeafToContract)(nil),       // 13: types.LeafToContract
	(*Transfer)(nil),             // 14: types.Transfer
	(*TransferToNew)(nil),        // 15: types.TransferToNew
	(*ForceQuit)(nil),            // 16: types.ForceQuit
	(*SetPubKey)(nil),            // 17: types.SetPubKey
	(*ReceiptLeaf)(nil),          // 18: types.ReceiptLeaf
	(*SiblingPath)(nil),          // 19: types.SiblingPath
	(*AccountWitness)(nil),       // 20: types.AccountWitness
	(*TokenWitness)(nil),         // 21: types.TokenWitness
	(*OperationMetaBranch)(nil),  // 22: types.OperationMetaBranch
	(*OperationPairBranch)(nil),  // 23: types.OperationPairBranch
	(*OperationInfo)(nil),        // 24: types.OperationInfo
	(*OperationSpecialInfo)(nil), // 25: types.OperationSpecialInfo
	(*OrderPricePair)(nil),       // 26: types.OrderPricePair
	(*OperationSpecialData)(nil), // 27: types.OperationSpecialData
}
var file_zksync_proto_depIdxs = []int32{
	10, // 0: types.ZksyncAction.deposit:type_name -> types.Deposit
	11, // 1: types.ZksyncAction.withdraw:type_name -> types.Withdraw
	12, // 2: types.ZksyncAction.contractToLeaf:type_name -> types.ContractToLeaf
	13, // 3: types.ZksyncAction.leafToContract:type_name -> types.LeafToContract
	14, // 4: types.ZksyncAction.transfer:type_name -> types.Transfer
	15, // 5: types.ZksyncAction.transferToNew:type_name -> types.TransferToNew
	16, // 6: types.ZksyncAction.forceQuit:type_name -> types.ForceQuit
	17, // 7: types.ZksyncAction.setPubKey:type_name -> types.SetPubKey
	3,  // 8: types.Signature.pubKey:type_name -> types.PubKey
	2,  // 9: types.Signature.msg:type_name -> types.Msg
	8,  // 10: types.AccountTree.subTrees:type_name -> types.SubTree
	3,  // 11: types.Leaf.pubKey:type_name -> types.PubKey
	1,  // 12: types.Deposit.signature:type_name -> types.Signature
	1,  // 13: types.Withdraw.signature:type_name -> types.Signature
	1,  // 14: types.ContractToLeaf.signature:type_name -> types.Signature
	1,  // 15: types.LeafToContract.signature:type_name -> types.Signature
	1,  // 16: types.Transfer.signature:type_name -> types.Signature
	1,  // 17: types.TransferToNew.signature:type_name -> types.Signature
	1,  // 18: types.ForceQuit.signature:type_name -> types.Signature
	3,  // 19: types.SetPubKey.pubKey:type_name -> types.PubKey
	1,  // 20: types.SetPubKey.signature:type_name -> types.Signature
	6,  // 21: types.ReceiptLeaf.leaf:type_name -> types.Leaf
	4,  // 22: types.ReceiptLeaf.token:type_name -> types.TokenBalance
	9,  // 23: types.ReceiptLeaf.treeProof:type_name -> types.MerkleTreeProof
	9,  // 24: types.ReceiptLeaf.tokenProof:type_name -> types.MerkleTreeProof
	3,  // 25: types.AccountWitness.pubKey:type_name -> types.PubKey
	19, // 26: types.AccountWitness.sibling:type_name -> types.SiblingPath
	19, // 27: types.TokenWitness.sibling:type_name -> types.SiblingPath
	20, // 28: types.OperationMetaBranch.accountWitness:type_name -> types.AccountWitness
	21, // 29: types.OperationMetaBranch.tokenWitness:type_name -> types.TokenWitness
	22, // 30: types.OperationPairBranch.before:type_name -> types.OperationMetaBranch
	22, // 31: types.OperationPairBranch.after:type_name -> types.OperationMetaBranch
	1,  // 32: types.OperationInfo.sigData:type_name -> types.Signature
	23, // 33: types.OperationInfo.operationBranches:type_name -> types.OperationPairBranch
	25, // 34: types.OperationInfo.specialInfo:type_name -> types.OperationSpecialInfo
	27, // 35: types.OperationSpecialInfo.specialDatas:type_name -> types.OperationSpecialData
	26, // 36: types.OperationSpecialData.pricePair:type_name -> types.OrderPricePair
	1,  // 37: types.OperationSpecialData.sigData:type_name -> types.Signature
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_zksync_proto_init() }
func file_zksync_proto_init() {
	if File_zksync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zksync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZksyncAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractToLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeafToContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceQuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiblingPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMetaBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationPairBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPricePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSpecialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zksync_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ZksyncAction_Deposit)(nil),
		(*ZksyncAction_Withdraw)(nil),
		(*ZksyncAction_ContractToLeaf)(nil),
		(*ZksyncAction_LeafToContract)(nil),
		(*ZksyncAction_Transfer)(nil),
		(*ZksyncAction_TransferToNew)(nil),
		(*ZksyncAction_ForceQuit)(nil),
		(*ZksyncAction_SetPubKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zksync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zksync_proto_goTypes,
		DependencyIndexes: file_zksync_proto_depIdxs,
		MessageInfos:      file_zksync_proto_msgTypes,
	}.Build()
	File_zksync_proto = out.File
	file_zksync_proto_rawDesc = nil
	file_zksync_proto_goTypes = nil
	file_zksync_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZksyncClient is the client API for Zksync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZksyncClient interface {
}

type zksyncClient struct {
	cc grpc.ClientConnInterface
}

func NewZksyncClient(cc grpc.ClientConnInterface) ZksyncClient {
	return &zksyncClient{cc}
}

// ZksyncServer is the server API for Zksync service.
type ZksyncServer interface {
}

// UnimplementedZksyncServer can be embedded to have forward compatible implementations.
type UnimplementedZksyncServer struct {
}

func RegisterZksyncServer(s *grpc.Server, srv ZksyncServer) {
	s.RegisterService(&_Zksync_serviceDesc, srv)
}

var _Zksync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.zksync",
	HandlerType: (*ZksyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "zksync.proto",
}
