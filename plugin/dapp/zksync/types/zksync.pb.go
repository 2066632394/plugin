// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: zksync.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZksyncAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ZksyncAction_Deposit
	//	*ZksyncAction_Withdraw
	//	*ZksyncAction_ContractToLeaf
	//	*ZksyncAction_LeafToContract
	//	*ZksyncAction_Transfer
	//	*ZksyncAction_TransferToNew
	//	*ZksyncAction_ForceExit
	//	*ZksyncAction_SetPubKey
	Value isZksyncAction_Value `protobuf_oneof:"value"`
	Ty    int32                `protobuf:"varint,9,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *ZksyncAction) Reset() {
	*x = ZksyncAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZksyncAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZksyncAction) ProtoMessage() {}

func (x *ZksyncAction) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZksyncAction.ProtoReflect.Descriptor instead.
func (*ZksyncAction) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{0}
}

func (m *ZksyncAction) GetValue() isZksyncAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ZksyncAction) GetDeposit() *ZkDeposit {
	if x, ok := x.GetValue().(*ZksyncAction_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ZksyncAction) GetWithdraw() *ZkWithdraw {
	if x, ok := x.GetValue().(*ZksyncAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *ZksyncAction) GetContractToLeaf() *ZkContractToLeaf {
	if x, ok := x.GetValue().(*ZksyncAction_ContractToLeaf); ok {
		return x.ContractToLeaf
	}
	return nil
}

func (x *ZksyncAction) GetLeafToContract() *ZkLeafToContract {
	if x, ok := x.GetValue().(*ZksyncAction_LeafToContract); ok {
		return x.LeafToContract
	}
	return nil
}

func (x *ZksyncAction) GetTransfer() *ZkTransfer {
	if x, ok := x.GetValue().(*ZksyncAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ZksyncAction) GetTransferToNew() *ZkTransferToNew {
	if x, ok := x.GetValue().(*ZksyncAction_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (x *ZksyncAction) GetForceExit() *ZkForceExit {
	if x, ok := x.GetValue().(*ZksyncAction_ForceExit); ok {
		return x.ForceExit
	}
	return nil
}

func (x *ZksyncAction) GetSetPubKey() *ZkSetPubKey {
	if x, ok := x.GetValue().(*ZksyncAction_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (x *ZksyncAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

type isZksyncAction_Value interface {
	isZksyncAction_Value()
}

type ZksyncAction_Deposit struct {
	Deposit *ZkDeposit `protobuf:"bytes,1,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction_Withdraw struct {
	Withdraw *ZkWithdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction_ContractToLeaf struct {
	ContractToLeaf *ZkContractToLeaf `protobuf:"bytes,3,opt,name=contractToLeaf,proto3,oneof"`
}

type ZksyncAction_LeafToContract struct {
	LeafToContract *ZkLeafToContract `protobuf:"bytes,4,opt,name=leafToContract,proto3,oneof"`
}

type ZksyncAction_Transfer struct {
	Transfer *ZkTransfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction_TransferToNew struct {
	TransferToNew *ZkTransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction_ForceExit struct {
	ForceExit *ZkForceExit `protobuf:"bytes,7,opt,name=forceExit,proto3,oneof"`
}

type ZksyncAction_SetPubKey struct {
	SetPubKey *ZkSetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

func (*ZksyncAction_Deposit) isZksyncAction_Value() {}

func (*ZksyncAction_Withdraw) isZksyncAction_Value() {}

func (*ZksyncAction_ContractToLeaf) isZksyncAction_Value() {}

func (*ZksyncAction_LeafToContract) isZksyncAction_Value() {}

func (*ZksyncAction_Transfer) isZksyncAction_Value() {}

func (*ZksyncAction_TransferToNew) isZksyncAction_Value() {}

func (*ZksyncAction_ForceExit) isZksyncAction_Value() {}

func (*ZksyncAction_SetPubKey) isZksyncAction_Value() {}

type ZkSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey   *ZkPubKey `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	SignInfo []byte    `protobuf:"bytes,2,opt,name=signInfo,proto3" json:"signInfo,omitempty"`
	Msg      *ZkMsg    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ZkSignature) Reset() {
	*x = ZkSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSignature) ProtoMessage() {}

func (x *ZkSignature) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSignature.ProtoReflect.Descriptor instead.
func (*ZkSignature) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{1}
}

func (x *ZkSignature) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkSignature) GetSignInfo() []byte {
	if x != nil {
		return x.SignInfo
	}
	return nil
}

func (x *ZkSignature) GetMsg() *ZkMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ZkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second string `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
	Third  string `protobuf:"bytes,3,opt,name=third,proto3" json:"third,omitempty"`
}

func (x *ZkMsg) Reset() {
	*x = ZkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkMsg) ProtoMessage() {}

func (x *ZkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkMsg.ProtoReflect.Descriptor instead.
func (*ZkMsg) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{2}
}

func (x *ZkMsg) GetFirst() string {
	if x != nil {
		return x.First
	}
	return ""
}

func (x *ZkMsg) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

func (x *ZkMsg) GetThird() string {
	if x != nil {
		return x.Third
	}
	return ""
}

type ZkPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y string `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ZkPubKey) Reset() {
	*x = ZkPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkPubKey) ProtoMessage() {}

func (x *ZkPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkPubKey.ProtoReflect.Descriptor instead.
func (*ZkPubKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{3}
}

func (x *ZkPubKey) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *ZkPubKey) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

//某个token的余额
type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId uint64 `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBalance) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *TokenBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type AccountTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           uint64     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                     //当前的叶子索引
	TotalIndex      uint64     `protobuf:"varint,2,opt,name=totalIndex,proto3" json:"totalIndex,omitempty"`           //总计叶子索引
	MaxCurrentIndex uint64     `protobuf:"varint,3,opt,name=maxCurrentIndex,proto3" json:"maxCurrentIndex,omitempty"` //当前索引最大值，超过最大值会进行归档
	SubTrees        []*SubTree `protobuf:"bytes,8,rep,name=subTrees,proto3" json:"subTrees,omitempty"`                //当前未归档的子树
}

func (x *AccountTree) Reset() {
	*x = AccountTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTree) ProtoMessage() {}

func (x *AccountTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTree.ProtoReflect.Descriptor instead.
func (*AccountTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{5}
}

func (x *AccountTree) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AccountTree) GetTotalIndex() uint64 {
	if x != nil {
		return x.TotalIndex
	}
	return 0
}

func (x *AccountTree) GetMaxCurrentIndex() uint64 {
	if x != nil {
		return x.MaxCurrentIndex
	}
	return 0
}

func (x *AccountTree) GetSubTrees() []*SubTree {
	if x != nil {
		return x.SubTrees
	}
	return nil
}

type Leaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint64    `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`      //accountId其实就是叶子的totalIndex
	EthAddress  string    `protobuf:"bytes,5,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`     //账户对应的以太坊地址
	PubKey      *ZkPubKey `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`             //eddsa公钥，用于验证身份
	Chain33Addr string    `protobuf:"bytes,7,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`   //chain33地址
	TokenHash   string    `protobuf:"bytes,8,opt,name=tokenHash,proto3" json:"tokenHash,omitempty"`       //叶子下token的hash
	TokenIds    []uint64  `protobuf:"varint,9,rep,packed,name=tokenIds,proto3" json:"tokenIds,omitempty"` //叶子下拥有的tokenId
}

func (x *Leaf) Reset() {
	*x = Leaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaf) ProtoMessage() {}

func (x *Leaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaf.ProtoReflect.Descriptor instead.
func (*Leaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{6}
}

func (x *Leaf) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Leaf) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *Leaf) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Leaf) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *Leaf) GetTokenHash() string {
	if x != nil {
		return x.TokenHash
	}
	return ""
}

func (x *Leaf) GetTokenIds() []uint64 {
	if x != nil {
		return x.TokenIds
	}
	return nil
}

type RootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash   string `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`      //归档Merkle Tree的根hash
	Height     int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`         //归档的高度
	StartIndex uint64 `protobuf:"varint,3,opt,name=startIndex,proto3" json:"startIndex,omitempty"` //开始的全局index
}

func (x *RootInfo) Reset() {
	*x = RootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootInfo) ProtoMessage() {}

func (x *RootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootInfo.ProtoReflect.Descriptor instead.
func (*RootInfo) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{7}
}

func (x *RootInfo) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *RootInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RootInfo) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

type SubTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	RootHash []byte `protobuf:"bytes,2,opt,name=rootHash,proto3" json:"rootHash,omitempty"` //子树的根hash
}

func (x *SubTree) Reset() {
	*x = SubTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTree) ProtoMessage() {}

func (x *SubTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTree.ProtoReflect.Descriptor instead.
func (*SubTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{8}
}

func (x *SubTree) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SubTree) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

type MerkleTreeProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash string   `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	ProofSet []string `protobuf:"bytes,2,rep,name=proofSet,proto3" json:"proofSet,omitempty"`
	Helpers  []string `protobuf:"bytes,3,rep,name=helpers,proto3" json:"helpers,omitempty"`
}

func (x *MerkleTreeProof) Reset() {
	*x = MerkleTreeProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeProof) ProtoMessage() {}

func (x *MerkleTreeProof) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeProof.ProtoReflect.Descriptor instead.
func (*MerkleTreeProof) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{9}
}

func (x *MerkleTreeProof) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *MerkleTreeProof) GetProofSet() []string {
	if x != nil {
		return x.ProofSet
	}
	return nil
}

func (x *MerkleTreeProof) GetHelpers() []string {
	if x != nil {
		return x.Helpers
	}
	return nil
}

type ZkDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId     uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount      string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress  string       `protobuf:"bytes,3,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Chain33Addr string       `protobuf:"bytes,4,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	Signature   *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkDeposit) Reset() {
	*x = ZkDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkDeposit) ProtoMessage() {}

func (x *ZkDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkDeposit.ProtoReflect.Descriptor instead.
func (*ZkDeposit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{10}
}

func (x *ZkDeposit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkDeposit) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *ZkDeposit) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *ZkDeposit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkWithdraw) Reset() {
	*x = ZkWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkWithdraw) ProtoMessage() {}

func (x *ZkWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkWithdraw.ProtoReflect.Descriptor instead.
func (*ZkWithdraw) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{11}
}

func (x *ZkWithdraw) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkWithdraw) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkWithdraw) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkWithdraw) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkContractToLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkContractToLeaf) Reset() {
	*x = ZkContractToLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkContractToLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkContractToLeaf) ProtoMessage() {}

func (x *ZkContractToLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkContractToLeaf.ProtoReflect.Descriptor instead.
func (*ZkContractToLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{12}
}

func (x *ZkContractToLeaf) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkContractToLeaf) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkContractToLeaf) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkContractToLeaf) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkLeafToContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkLeafToContract) Reset() {
	*x = ZkLeafToContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkLeafToContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkLeafToContract) ProtoMessage() {}

func (x *ZkLeafToContract) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkLeafToContract.ProtoReflect.Descriptor instead.
func (*ZkLeafToContract) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{13}
}

func (x *ZkLeafToContract) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkLeafToContract) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkLeafToContract) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkLeafToContract) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount        string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId uint64       `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToAccountId   uint64       `protobuf:"varint,4,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Signature     *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTransfer) Reset() {
	*x = ZkTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransfer) ProtoMessage() {}

func (x *ZkTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransfer.ProtoReflect.Descriptor instead.
func (*ZkTransfer) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{14}
}

func (x *ZkTransfer) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTransfer) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransfer) GetToAccountId() uint64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *ZkTransfer) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTransferToNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId          uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount           string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId    uint64       `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToEthAddress     string       `protobuf:"bytes,4,opt,name=toEthAddress,proto3" json:"toEthAddress,omitempty"`
	ToChain33Address string       `protobuf:"bytes,5,opt,name=toChain33Address,proto3" json:"toChain33Address,omitempty"`
	Signature        *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTransferToNew) Reset() {
	*x = ZkTransferToNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransferToNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransferToNew) ProtoMessage() {}

func (x *ZkTransferToNew) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransferToNew.ProtoReflect.Descriptor instead.
func (*ZkTransferToNew) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{15}
}

func (x *ZkTransferToNew) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransferToNew) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTransferToNew) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransferToNew) GetToEthAddress() string {
	if x != nil {
		return x.ToEthAddress
	}
	return ""
}

func (x *ZkTransferToNew) GetToChain33Address() string {
	if x != nil {
		return x.ToChain33Address
	}
	return ""
}

func (x *ZkTransferToNew) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkForceExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AccountId uint64       `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkForceExit) Reset() {
	*x = ZkForceExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkForceExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkForceExit) ProtoMessage() {}

func (x *ZkForceExit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkForceExit.ProtoReflect.Descriptor instead.
func (*ZkForceExit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{16}
}

func (x *ZkForceExit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkForceExit) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkForceExit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkSetPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint64       `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	PubKey    *ZkPubKey    `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkSetPubKey) Reset() {
	*x = ZkSetPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSetPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSetPubKey) ProtoMessage() {}

func (x *ZkSetPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSetPubKey.ProtoReflect.Descriptor instead.
func (*ZkSetPubKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{17}
}

func (x *ZkSetPubKey) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkSetPubKey) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkSetPubKey) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// leaf merkle proof票据日志
type ZkReceiptLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaf       *Leaf            `protobuf:"bytes,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Token      *TokenBalance    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TreeProof  *MerkleTreeProof `protobuf:"bytes,3,opt,name=treeProof,proto3" json:"treeProof,omitempty"`
	TokenProof *MerkleTreeProof `protobuf:"bytes,4,opt,name=tokenProof,proto3" json:"tokenProof,omitempty"`
}

func (x *ZkReceiptLeaf) Reset() {
	*x = ZkReceiptLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkReceiptLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkReceiptLeaf) ProtoMessage() {}

func (x *ZkReceiptLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkReceiptLeaf.ProtoReflect.Descriptor instead.
func (*ZkReceiptLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{18}
}

func (x *ZkReceiptLeaf) GetLeaf() *Leaf {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *ZkReceiptLeaf) GetToken() *TokenBalance {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ZkReceiptLeaf) GetTreeProof() *MerkleTreeProof {
	if x != nil {
		return x.TreeProof
	}
	return nil
}

func (x *ZkReceiptLeaf) GetTokenProof() *MerkleTreeProof {
	if x != nil {
		return x.TokenProof
	}
	return nil
}

var File_zksync_proto protoreflect.FileDescriptor

var file_zksync_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe5, 0x03, 0x0a, 0x0c, 0x5a, 0x6b, 0x73, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x5a, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x66,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4c, 0x65, 0x61, 0x66, 0x54,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x61,
	0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45,
	0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x72, 0x0a,
	0x0b, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x4b, 0x0a, 0x05, 0x5a, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x22, 0x26,
	0x0a, 0x08, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x79, 0x22, 0x42, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x04, 0x4c, 0x65, 0x61, 0x66, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33,
	0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x3d, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x63, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x5a, 0x6b, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33,
	0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x5a,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10,
	0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x5a, 0x6b, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x5a, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33,
	0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x77, 0x0a, 0x0b, 0x5a, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0b,
	0x5a, 0x6b, 0x53, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x5a, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09, 0x74,
	0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x32, 0x08, 0x0a, 0x06, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zksync_proto_rawDescOnce sync.Once
	file_zksync_proto_rawDescData = file_zksync_proto_rawDesc
)

func file_zksync_proto_rawDescGZIP() []byte {
	file_zksync_proto_rawDescOnce.Do(func() {
		file_zksync_proto_rawDescData = protoimpl.X.CompressGZIP(file_zksync_proto_rawDescData)
	})
	return file_zksync_proto_rawDescData
}

var file_zksync_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_zksync_proto_goTypes = []interface{}{
	(*ZksyncAction)(nil),     // 0: types.ZksyncAction
	(*ZkSignature)(nil),      // 1: types.ZkSignature
	(*ZkMsg)(nil),            // 2: types.ZkMsg
	(*ZkPubKey)(nil),         // 3: types.ZkPubKey
	(*TokenBalance)(nil),     // 4: types.TokenBalance
	(*AccountTree)(nil),      // 5: types.AccountTree
	(*Leaf)(nil),             // 6: types.Leaf
	(*RootInfo)(nil),         // 7: types.RootInfo
	(*SubTree)(nil),          // 8: types.SubTree
	(*MerkleTreeProof)(nil),  // 9: types.MerkleTreeProof
	(*ZkDeposit)(nil),        // 10: types.ZkDeposit
	(*ZkWithdraw)(nil),       // 11: types.ZkWithdraw
	(*ZkContractToLeaf)(nil), // 12: types.ZkContractToLeaf
	(*ZkLeafToContract)(nil), // 13: types.ZkLeafToContract
	(*ZkTransfer)(nil),       // 14: types.ZkTransfer
	(*ZkTransferToNew)(nil),  // 15: types.ZkTransferToNew
	(*ZkForceExit)(nil),      // 16: types.ZkForceExit
	(*ZkSetPubKey)(nil),      // 17: types.ZkSetPubKey
	(*ZkReceiptLeaf)(nil),    // 18: types.ZkReceiptLeaf
}
var file_zksync_proto_depIdxs = []int32{
	10, // 0: types.ZksyncAction.deposit:type_name -> types.ZkDeposit
	11, // 1: types.ZksyncAction.withdraw:type_name -> types.ZkWithdraw
	12, // 2: types.ZksyncAction.contractToLeaf:type_name -> types.ZkContractToLeaf
	13, // 3: types.ZksyncAction.leafToContract:type_name -> types.ZkLeafToContract
	14, // 4: types.ZksyncAction.transfer:type_name -> types.ZkTransfer
	15, // 5: types.ZksyncAction.transferToNew:type_name -> types.ZkTransferToNew
	16, // 6: types.ZksyncAction.forceExit:type_name -> types.ZkForceExit
	17, // 7: types.ZksyncAction.setPubKey:type_name -> types.ZkSetPubKey
	3,  // 8: types.ZkSignature.pubKey:type_name -> types.ZkPubKey
	2,  // 9: types.ZkSignature.msg:type_name -> types.ZkMsg
	8,  // 10: types.AccountTree.subTrees:type_name -> types.SubTree
	3,  // 11: types.Leaf.pubKey:type_name -> types.ZkPubKey
	1,  // 12: types.ZkDeposit.signature:type_name -> types.ZkSignature
	1,  // 13: types.ZkWithdraw.signature:type_name -> types.ZkSignature
	1,  // 14: types.ZkContractToLeaf.signature:type_name -> types.ZkSignature
	1,  // 15: types.ZkLeafToContract.signature:type_name -> types.ZkSignature
	1,  // 16: types.ZkTransfer.signature:type_name -> types.ZkSignature
	1,  // 17: types.ZkTransferToNew.signature:type_name -> types.ZkSignature
	1,  // 18: types.ZkForceExit.signature:type_name -> types.ZkSignature
	3,  // 19: types.ZkSetPubKey.pubKey:type_name -> types.ZkPubKey
	1,  // 20: types.ZkSetPubKey.signature:type_name -> types.ZkSignature
	6,  // 21: types.ZkReceiptLeaf.leaf:type_name -> types.Leaf
	4,  // 22: types.ZkReceiptLeaf.token:type_name -> types.TokenBalance
	9,  // 23: types.ZkReceiptLeaf.treeProof:type_name -> types.MerkleTreeProof
	9,  // 24: types.ZkReceiptLeaf.tokenProof:type_name -> types.MerkleTreeProof
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_zksync_proto_init() }
func file_zksync_proto_init() {
	if File_zksync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zksync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZksyncAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkContractToLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkLeafToContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransferToNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkForceExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSetPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkReceiptLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zksync_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ZksyncAction_Deposit)(nil),
		(*ZksyncAction_Withdraw)(nil),
		(*ZksyncAction_ContractToLeaf)(nil),
		(*ZksyncAction_LeafToContract)(nil),
		(*ZksyncAction_Transfer)(nil),
		(*ZksyncAction_TransferToNew)(nil),
		(*ZksyncAction_ForceExit)(nil),
		(*ZksyncAction_SetPubKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zksync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zksync_proto_goTypes,
		DependencyIndexes: file_zksync_proto_depIdxs,
		MessageInfos:      file_zksync_proto_msgTypes,
	}.Build()
	File_zksync_proto = out.File
	file_zksync_proto_rawDesc = nil
	file_zksync_proto_goTypes = nil
	file_zksync_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZksyncClient is the client API for Zksync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZksyncClient interface {
}

type zksyncClient struct {
	cc grpc.ClientConnInterface
}

func NewZksyncClient(cc grpc.ClientConnInterface) ZksyncClient {
	return &zksyncClient{cc}
}

// ZksyncServer is the server API for Zksync service.
type ZksyncServer interface {
}

// UnimplementedZksyncServer can be embedded to have forward compatible implementations.
type UnimplementedZksyncServer struct {
}

func RegisterZksyncServer(s *grpc.Server, srv ZksyncServer) {
	s.RegisterService(&_Zksync_serviceDesc, srv)
}

var _Zksync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.zksync",
	HandlerType: (*ZksyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "zksync.proto",
}
