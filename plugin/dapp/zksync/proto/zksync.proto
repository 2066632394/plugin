syntax = "proto3";
package types;
option go_package = "../types";

message ZksyncAction {
  oneof value {
    Deposit  deposit = 1;
    Withdraw withdraw = 2;
    ContractToLeaf contractToLeaf = 3;
    LeafToContract leafToContract = 4;
    Transfer transfer = 5;
    TransferToNew transferToNew = 6;
    ForceQuit forceQuit = 7;
    SetPubKey setPubKey = 8;
  }

  int32 ty = 9;
}


message Signature {
  PubKey pubKey = 1;
  bytes signInfo = 2;
  Msg msg = 3;
}

message Msg {
  bytes first = 1;
  bytes second = 2;
  bytes third = 3;
}

message PubKey {
  string  x = 1;
  string  y = 2;
}

//某个token的余额
message TokenBalance {
  uint64 tokenId = 1;
  string balance = 2;
}

message AccountTree {
  uint64 index = 1;//当前的叶子索引
  uint64 totalIndex = 2;  //总计叶子索引
  uint64 maxCurrentIndex = 3;  //当前索引最大值，超过最大值会进行归档
  repeated SubTree subTrees = 8; //当前未归档的子树
}

message Leaf {
  uint64 accountId = 2; //accountId其实就是叶子的totalIndex
  string ethAddress = 5; //账户对应的以太坊地址
  PubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  bytes tokenHash = 8; //叶子下token的hash
  repeated uint64 tokenIds = 9; //叶子下拥有的tokenId
}

message RootInfo {
  bytes rootHash = 1; //归档Merkle Tree的根hash
  int32 height = 2; //归档的高度
  uint64 startIndex = 3; //开始的全局index
}

message SubTree {
  int32 height = 1;
  bytes rootHash = 2; //子树的根hash
}

message MerkleTreeProof {
  bytes rootHash = 1;
  repeated bytes proofSet = 2;
  uint64 proofIndex = 3;
  uint64 numLeaves = 4;
  repeated uint32 helpers = 5;
}

message Deposit {
  uint64 tokenId = 1;
  string amount = 2;
  string ethAddress = 3;
  string chain33Addr = 4;
  Signature signature = 5;
}

message Withdraw {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  Signature signature = 4;
}

message ContractToLeaf {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  Signature signature = 4;
}

message LeafToContract {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  Signature signature = 4;
}

message Transfer {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  uint64 toAccountId = 4;
  Signature signature = 5;
}

message TransferToNew {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  string toEthAddress = 4;
  string toChain33Address = 5;
  Signature signature = 6;
}

message ForceQuit {
  uint64 tokenId = 1;
  uint64 accountId = 2;
  Signature signature = 3;
}

message SetPubKey {
  uint64 accountId = 1;
  PubKey  pubKey = 2;
  Signature signature = 3;
}

// leaf merkle proof票据日志
message ReceiptLeaf {
  uint64 accountId = 1;
  uint64 tokenId = 2;
  string ethAddress = 3;
  string chain33Address = 4;
  string amount = 5;
  string toEthAddress = 6;
  string toChain33Address = 7;


  MerkleTreeProof treeProof = 8;
  MerkleTreeProof tokenProof = 9;

  Signature signature = 10;
}

service zksync{}