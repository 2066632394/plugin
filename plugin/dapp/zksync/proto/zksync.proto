syntax = "proto3";
import "witness.proto";

package types;
option go_package = "../types";

message ZksyncAction {
  oneof value {
    ZkDeposit  deposit = 1;
    ZkWithdraw withdraw = 2;
    ZkContractToLeaf contractToLeaf = 3;
    ZkLeafToContract leafToContract = 4;
    ZkTransfer transfer = 5;
    ZkTransferToNew transferToNew = 6;
    ZkForceExit forceExit = 7;
    ZkSetPubKey setPubKey = 8;
  }

  int32 ty = 9;
}


//某个token的余额
message TokenBalance {
  uint64 tokenId = 1;
  string balance = 2;
}

message AccountTree {
  uint64 index = 1;//当前的叶子索引
  uint64 totalIndex = 2;  //总计叶子索引
  uint64 maxCurrentIndex = 3;  //当前索引最大值，超过最大值会进行归档
  repeated SubTree subTrees = 8; //当前未归档的子树
}

message Leaf {
  uint64 accountId = 2; //accountId其实就是叶子的totalIndex
  string ethAddress = 5; //账户对应的以太坊地址
  ZkPubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  string tokenHash = 8; //叶子下token的hash
  repeated uint64 tokenIds = 9; //叶子下拥有的tokenId
}

message RootInfo {
  string rootHash = 1; //归档Merkle Tree的根hash
  int32 height = 2; //归档的高度
  uint64 startIndex = 3; //开始的全局index
}

message SubTree {
  int32 height = 1;
  bytes rootHash = 2; //子树的根hash
}

message MerkleTreeProof {
  string rootHash = 1;
  repeated string proofSet = 2;
  repeated string helpers = 3;
}

message ZkDeposit {
  uint64 tokenId = 1;
  string amount = 2;
  string ethAddress = 3;
  string chain33Addr = 4;
  ZkSignature signature = 5;
}

message ZkWithdraw {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message ZkContractToLeaf {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message ZkLeafToContract {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message ZkTransfer {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  uint64 toAccountId = 4;
  ZkSignature signature = 5;
}

message ZkTransferToNew {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  string toEthAddress = 4;
  string toChain33Address = 5;
  ZkSignature signature = 6;
}

message ZkForceExit {
  uint64 tokenId = 1;
  uint64 accountId = 2;
  ZkSignature signature = 3;
}

message ZkSetPubKey {
  uint64 accountId = 1;
  ZkPubKey  pubKey = 2;
  ZkSignature signature = 3;
}

// leaf merkle proof票据日志
message ZkReceiptLeaf {
  Leaf leaf = 1;
  TokenBalance token = 2;
  MerkleTreeProof treeProof = 3;
  MerkleTreeProof tokenProof = 4;
}

message ZkQueryReq {
  uint64 accountId = 1;
  uint64 blockHeight = 2;
  uint32 txIndex = 3;
  string ethAddress = 4;
  string chain33Addr = 5;
}

message ZkQueryResp {
  repeated OperationInfo operationInfos = 1;
  repeated Leaf leaves = 2;
}

service zksync{}