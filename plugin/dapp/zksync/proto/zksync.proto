syntax = "proto3";
package types;
option go_package = "../types";

message ZksyncAction {
  oneof value {
    Deposit  deposit = 1;
    Withdraw withdraw = 2;
    ContractToLeaf contractToLeaf = 3;
    LeafToContract leafToContract = 4;
    Transfer transfer = 5;
    TransferToNew transferToNew = 6;
    ForceQuit forceQuit = 7;
    SetPubKey setPubKey = 8;
    VerifyKey           setVerifyKey = 10;
    CommitProof         commitProof  = 11;

  }

  int32 ty = 9;
}


message ZkSignature {
  PubKey pubKey = 1;
  bytes signInfo = 2;
  Msg msg = 3;
}

message Msg {
  string first = 1;
  string second = 2;
  string third = 3;
}

message PubKey {
  string  x = 1;
  string  y = 2;
}

//某个token的余额
message TokenBalance {
  uint64 tokenId = 1;
  string balance = 2;
}

message AccountTree {
  uint64 index = 1;//当前的叶子索引
  uint64 totalIndex = 2;  //总计叶子索引
  uint64 maxCurrentIndex = 3;  //当前索引最大值，超过最大值会进行归档
  repeated SubTree subTrees = 8; //当前未归档的子树
}

message Leaf {
  uint64 accountId = 2; //accountId其实就是叶子的totalIndex
  string ethAddress = 5; //账户对应的以太坊地址
  PubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  string tokenHash = 8; //叶子下token的hash
  repeated uint64 tokenIds = 9; //叶子下拥有的tokenId
}

message RootInfo {
  string rootHash = 1; //归档Merkle Tree的根hash
  int32 height = 2; //归档的高度
  uint64 startIndex = 3; //开始的全局index
}

message SubTree {
  int32 height = 1;
  bytes rootHash = 2; //子树的根hash
}

message MerkleTreeProof {
  string rootHash = 1;
  repeated string proofSet = 2;
  repeated string helpers = 3;
}

message Deposit {
  uint64 tokenId = 1;
  string amount = 2;
  string ethAddress = 3;
  string chain33Addr = 4;
  ZkSignature signature = 5;
}

message Withdraw {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message ContractToLeaf {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message LeafToContract {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message Transfer {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  uint64 toAccountId = 4;
  ZkSignature signature = 5;
}

message TransferToNew {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  string toEthAddress = 4;
  string toChain33Address = 5;
  ZkSignature signature = 6;
}

message ForceQuit {
  uint64 tokenId = 1;
  uint64 accountId = 2;
  ZkSignature signature = 3;
}

message SetPubKey {
  uint64 accountId = 1;
  PubKey  pubKey = 2;
  ZkSignature signature = 3;
}

//电路验证key
message VerifyKey {
  string key = 1;
}

message ReceiptSetVerifyKey {
  VerifyKey prev = 1;
  VerifyKey current = 2;
}

//commit proof tx data
message CommitProof {
  uint64 blockStart  = 1;
  uint64 blockEnd    = 2;
  string oldTreeRoot = 3;
  string newTreeRoot = 4;
  //proof serialized public input
  string publicInput = 5;
  string proof       = 6;
  //all tx pub datas
  repeated string pubDatas = 7;
}

//commit proof stat, pubdata保存到localdb
message CommitProofState {
  uint64 blockStart  = 1;
  uint64 blockEnd    = 2;
  string oldTreeRoot = 3;
  string newTreeRoot = 4;
  string publicInput = 5;   //proof serialized public input
  string proof       = 6;
}

message ReceiptCommitProof {
  CommitProofState prev = 1;
  CommitProofState current = 2;
}

//zk relayer operators
message RelayerOperators {
  repeated string operators   = 1;
}

// leaf merkle proof票据日志
message ReceiptLeaf {
  Leaf leaf = 1;
  TokenBalance token = 2;
  MerkleTreeProof treeProof = 3;
  MerkleTreeProof tokenProof = 4;
}


service zksync{}
