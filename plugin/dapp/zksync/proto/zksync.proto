syntax = "proto3";
package types;
option go_package = "../types";

message ZksyncAction {
  oneof value {
    Deposit  deposit = 1;
    Withdraw withdraw = 2;
    ContractToLeaf contractToLeaf = 3;
    LeafToContract leafToContract = 4;
    Transfer transfer = 5;
    TransferToNew transferToNew = 6;
    ForceQuit forceQuit = 7;
    SetPubKey setPubKey = 8;
  }

  int32 ty = 9;
}


message Signature {
  PubKey pubKey = 1;
  bytes signInfo = 2;
  Msg msg = 3;
}

message Msg {
  string first = 1;
  string second = 2;
  string third = 3;
}

message PubKey {
  string  x = 1;
  string  y = 2;
}

//某个token的余额
message TokenBalance {
  uint64 tokenId = 1;
  string balance = 2;
}

message AccountTree {
  uint64 index = 1;//当前的叶子索引
  uint64 totalIndex = 2;  //总计叶子索引
  uint64 maxCurrentIndex = 3;  //当前索引最大值，超过最大值会进行归档
  repeated SubTree subTrees = 8; //当前未归档的子树
}

message Leaf {
  uint64 accountId = 2; //accountId其实就是叶子的totalIndex
  string ethAddress = 5; //账户对应的以太坊地址
  PubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  string tokenHash = 8; //叶子下token的hash
  repeated uint64 tokenIds = 9; //叶子下拥有的tokenId
}

message RootInfo {
  string rootHash = 1; //归档Merkle Tree的根hash
  int32 height = 2; //归档的高度
  uint64 startIndex = 3; //开始的全局index
}

message SubTree {
  int32 height = 1;
  bytes rootHash = 2; //子树的根hash
}

message MerkleTreeProof {
  string rootHash = 1;
  repeated string proofSet = 2;
  repeated string helpers = 3;
}

message Deposit {
  uint64 tokenId = 1;
  string amount = 2;
  string ethAddress = 3;
  string chain33Addr = 4;
  Signature signature = 5;
}

message Withdraw {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  Signature signature = 4;
}

message ContractToLeaf {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  Signature signature = 4;
}

message LeafToContract {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  Signature signature = 4;
}

message Transfer {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  uint64 toAccountId = 4;
  Signature signature = 5;
}

message TransferToNew {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  string toEthAddress = 4;
  string toChain33Address = 5;
  Signature signature = 6;
}

message ForceQuit {
  uint64 tokenId = 1;
  uint64 accountId = 2;
  Signature signature = 3;
}

message SetPubKey {
  uint64 accountId = 1;
  PubKey  pubKey = 2;
  Signature signature = 3;
}

// leaf merkle proof票据日志
message ReceiptLeaf {
  Leaf leaf = 1;
  TokenBalance token = 2;
  MerkleTreeProof treeProof = 3;
  MerkleTreeProof tokenProof = 4;
}

message SiblingPath {
  repeated string path    = 1;
  repeated string helper  = 2;
}

message AccountWitness {
  uint64 ID             = 1;
  string ethAddr        = 2;
  string chain33Addr    = 3;
  string tokenTreeRoot  = 4; //sub chain token tree root
  PubKey pubKey         = 5;
  SiblingPath sibling   = 6;

}

message TokenWitness {
  uint64 ID     = 1; //eth contract define token ID
  string balance        = 2; //eth balance u128
  SiblingPath sibling   = 3;
}

//one operation branch
message OperationMetaBranch {
  AccountWitness accountWitness       = 1;
  TokenWitness   tokenWitness         = 2;
}

// before and after operation data
message OperationPairBranch {
  OperationMetaBranch before = 1;
  OperationMetaBranch after  = 2;
}

message OperationInfo {
  uint64    blockHeight   = 1;
  uint32    txIndex       = 2;

  uint32    txType        = 3;
  uint64    accountID     = 4;
  uint64    tokenID       = 5;
  string    amount        = 6;

  Signature sigData       = 7;

  repeated string  roots  = 8; //每个操作后的root

  //每个operation data由一对 操作前后数据组成，不同操作可以有多个操作数据，deposit:1,transfer:2
  repeated OperationPairBranch operationBranches = 9;

  //操作特殊数据,像订单数据
  OperationSpecialInfo specialInfo = 10;
}

message OperationSpecialInfo {
  repeated OperationSpecialData specialDatas = 1;
}

message OrderPricePair {
  uint64 sell = 1;
  uint64 buy  = 2;
}

message OperationSpecialData {
  uint64 accountID           = 1;
  uint64 recipientID         = 2; //accountID侧设置的recipientID
  string recipientAddr       = 3; //accountID侧设置的recipientAddr
  repeated string amount     = 4;  //accountID侧最初设置的amount
  repeated uint32 chainID    = 5;
  repeated uint64 tokenID    = 6;
  repeated OrderPricePair pricePair  = 7;
  Signature sigData         = 8;

}


service zksync{}