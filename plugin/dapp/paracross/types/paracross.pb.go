// Code generated by protoc-gen-go. DO NOT EDIT.
// source: paracross.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	paracross.proto

It has these top-level messages:
	ParacrossStatusDetails
	ParacrossHeightStatus
	ParacrossStatus
	ParacrossConsensusStatus
	ParaNodeAddrConfig
	ParaNodeVoteDetail
	ParaNodeAddrStatus
	ReceiptParaNodeConfig
	ReceiptParaNodeVoteRecord
	ReceiptParaNodeVoteDone
	ReqParacrossNodeInfo
	RespParacrossNodeAddrs
	ParaBlock2MainMap
	ParaBlock2MainInfo
	ParacrossNodeStatus
	ParacrossCommitAction
	ParacrossMinerAction
	ParacrossAction
	ReceiptParacrossCommit
	ReceiptParacrossMiner
	ReceiptParacrossDone
	ReceiptParacrossRecord
	ParacrossTx
	ReqParacrossTitleHeight
	RespParacrossDone
	RespParacrossTitles
	ReqParacrossTitleHash
	ParacrossAsset
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types2 "github.com/33cn/chain33/types"
import types1 "github.com/33cn/chain33/types"
import types3 "github.com/33cn/chain33/types"
import _ "github.com/33cn/chain33/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// stateDB
type ParacrossStatusDetails struct {
	Addrs     []string `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
	BlockHash [][]byte `protobuf:"bytes,2,rep,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (m *ParacrossStatusDetails) Reset()                    { *m = ParacrossStatusDetails{} }
func (m *ParacrossStatusDetails) String() string            { return proto.CompactTextString(m) }
func (*ParacrossStatusDetails) ProtoMessage()               {}
func (*ParacrossStatusDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ParacrossStatusDetails) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *ParacrossStatusDetails) GetBlockHash() [][]byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type ParacrossHeightStatus struct {
	// ing, done
	Status  int32                   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Title   string                  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Height  int64                   `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Details *ParacrossStatusDetails `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
}

func (m *ParacrossHeightStatus) Reset()                    { *m = ParacrossHeightStatus{} }
func (m *ParacrossHeightStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossHeightStatus) ProtoMessage()               {}
func (*ParacrossHeightStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParacrossHeightStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ParacrossHeightStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossHeightStatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossHeightStatus) GetDetails() *ParacrossStatusDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type ParacrossStatus struct {
	Title     string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Height    int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,3,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (m *ParacrossStatus) Reset()                    { *m = ParacrossStatus{} }
func (m *ParacrossStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossStatus) ProtoMessage()               {}
func (*ParacrossStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ParacrossStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossStatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossStatus) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type ParacrossConsensusStatus struct {
	Title            string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	ChainHeight      int64  `protobuf:"varint,2,opt,name=chainHeight" json:"chainHeight,omitempty"`
	ConsensHeight    int64  `protobuf:"varint,3,opt,name=consensHeight" json:"consensHeight,omitempty"`
	ConsensBlockHash string `protobuf:"bytes,4,opt,name=consensBlockHash" json:"consensBlockHash,omitempty"`
}

func (m *ParacrossConsensusStatus) Reset()                    { *m = ParacrossConsensusStatus{} }
func (m *ParacrossConsensusStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossConsensusStatus) ProtoMessage()               {}
func (*ParacrossConsensusStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ParacrossConsensusStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossConsensusStatus) GetChainHeight() int64 {
	if m != nil {
		return m.ChainHeight
	}
	return 0
}

func (m *ParacrossConsensusStatus) GetConsensHeight() int64 {
	if m != nil {
		return m.ConsensHeight
	}
	return 0
}

func (m *ParacrossConsensusStatus) GetConsensBlockHash() string {
	if m != nil {
		return m.ConsensBlockHash
	}
	return ""
}

type ParaNodeAddrConfig struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Op    string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	Addr  string `protobuf:"bytes,3,opt,name=addr" json:"addr,omitempty"`
	Value string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *ParaNodeAddrConfig) Reset()                    { *m = ParaNodeAddrConfig{} }
func (m *ParaNodeAddrConfig) String() string            { return proto.CompactTextString(m) }
func (*ParaNodeAddrConfig) ProtoMessage()               {}
func (*ParaNodeAddrConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ParaNodeAddrConfig) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParaNodeAddrConfig) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *ParaNodeAddrConfig) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ParaNodeAddrConfig) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ParaNodeVoteDetail struct {
	Addrs []string `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
	Votes []string `protobuf:"bytes,2,rep,name=votes" json:"votes,omitempty"`
}

func (m *ParaNodeVoteDetail) Reset()                    { *m = ParaNodeVoteDetail{} }
func (m *ParaNodeVoteDetail) String() string            { return proto.CompactTextString(m) }
func (*ParaNodeVoteDetail) ProtoMessage()               {}
func (*ParaNodeVoteDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ParaNodeVoteDetail) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *ParaNodeVoteDetail) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

type ParaNodeAddrStatus struct {
	Status    int32               `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Title     string              `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ApplyAddr string              `protobuf:"bytes,3,opt,name=applyAddr" json:"applyAddr,omitempty"`
	Votes     *ParaNodeVoteDetail `protobuf:"bytes,4,opt,name=votes" json:"votes,omitempty"`
}

func (m *ParaNodeAddrStatus) Reset()                    { *m = ParaNodeAddrStatus{} }
func (m *ParaNodeAddrStatus) String() string            { return proto.CompactTextString(m) }
func (*ParaNodeAddrStatus) ProtoMessage()               {}
func (*ParaNodeAddrStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ParaNodeAddrStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ParaNodeAddrStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParaNodeAddrStatus) GetApplyAddr() string {
	if m != nil {
		return m.ApplyAddr
	}
	return ""
}

func (m *ParaNodeAddrStatus) GetVotes() *ParaNodeVoteDetail {
	if m != nil {
		return m.Votes
	}
	return nil
}

type ReceiptParaNodeConfig struct {
	Addr    string              `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Config  *ParaNodeAddrConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	Prev    *ParaNodeAddrStatus `protobuf:"bytes,3,opt,name=prev" json:"prev,omitempty"`
	Current *ParaNodeAddrStatus `protobuf:"bytes,4,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptParaNodeConfig) Reset()                    { *m = ReceiptParaNodeConfig{} }
func (m *ReceiptParaNodeConfig) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParaNodeConfig) ProtoMessage()               {}
func (*ReceiptParaNodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReceiptParaNodeConfig) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptParaNodeConfig) GetConfig() *ParaNodeAddrConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ReceiptParaNodeConfig) GetPrev() *ParaNodeAddrStatus {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptParaNodeConfig) GetCurrent() *ParaNodeAddrStatus {
	if m != nil {
		return m.Current
	}
	return nil
}

type ReceiptParaNodeVoteRecord struct {
	FromAddr string `protobuf:"bytes,1,opt,name=fromAddr" json:"fromAddr,omitempty"`
	VoteAddr string `protobuf:"bytes,2,opt,name=voteAddr" json:"voteAddr,omitempty"`
	Value    int32  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *ReceiptParaNodeVoteRecord) Reset()                    { *m = ReceiptParaNodeVoteRecord{} }
func (m *ReceiptParaNodeVoteRecord) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParaNodeVoteRecord) ProtoMessage()               {}
func (*ReceiptParaNodeVoteRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReceiptParaNodeVoteRecord) GetFromAddr() string {
	if m != nil {
		return m.FromAddr
	}
	return ""
}

func (m *ReceiptParaNodeVoteRecord) GetVoteAddr() string {
	if m != nil {
		return m.VoteAddr
	}
	return ""
}

func (m *ReceiptParaNodeVoteRecord) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ReceiptParaNodeVoteDone struct {
	Title      string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TargetAddr string `protobuf:"bytes,2,opt,name=targetAddr" json:"targetAddr,omitempty"`
	TotalNodes int32  `protobuf:"varint,3,opt,name=totalNodes" json:"totalNodes,omitempty"`
	TotalVote  int32  `protobuf:"varint,4,opt,name=totalVote" json:"totalVote,omitempty"`
	MostVote   int32  `protobuf:"varint,5,opt,name=mostVote" json:"mostVote,omitempty"`
	VoteRst    string `protobuf:"bytes,6,opt,name=voteRst" json:"voteRst,omitempty"`
	DoneStatus int32  `protobuf:"varint,7,opt,name=doneStatus" json:"doneStatus,omitempty"`
}

func (m *ReceiptParaNodeVoteDone) Reset()                    { *m = ReceiptParaNodeVoteDone{} }
func (m *ReceiptParaNodeVoteDone) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParaNodeVoteDone) ProtoMessage()               {}
func (*ReceiptParaNodeVoteDone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReceiptParaNodeVoteDone) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReceiptParaNodeVoteDone) GetTargetAddr() string {
	if m != nil {
		return m.TargetAddr
	}
	return ""
}

func (m *ReceiptParaNodeVoteDone) GetTotalNodes() int32 {
	if m != nil {
		return m.TotalNodes
	}
	return 0
}

func (m *ReceiptParaNodeVoteDone) GetTotalVote() int32 {
	if m != nil {
		return m.TotalVote
	}
	return 0
}

func (m *ReceiptParaNodeVoteDone) GetMostVote() int32 {
	if m != nil {
		return m.MostVote
	}
	return 0
}

func (m *ReceiptParaNodeVoteDone) GetVoteRst() string {
	if m != nil {
		return m.VoteRst
	}
	return ""
}

func (m *ReceiptParaNodeVoteDone) GetDoneStatus() int32 {
	if m != nil {
		return m.DoneStatus
	}
	return 0
}

// node query
type ReqParacrossNodeInfo struct {
	Title  string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Addr   string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *ReqParacrossNodeInfo) Reset()                    { *m = ReqParacrossNodeInfo{} }
func (m *ReqParacrossNodeInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqParacrossNodeInfo) ProtoMessage()               {}
func (*ReqParacrossNodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReqParacrossNodeInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqParacrossNodeInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqParacrossNodeInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type RespParacrossNodeAddrs struct {
	Addrs []*ParaNodeAddrStatus `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *RespParacrossNodeAddrs) Reset()                    { *m = RespParacrossNodeAddrs{} }
func (m *RespParacrossNodeAddrs) String() string            { return proto.CompactTextString(m) }
func (*RespParacrossNodeAddrs) ProtoMessage()               {}
func (*RespParacrossNodeAddrs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RespParacrossNodeAddrs) GetAddrs() []*ParaNodeAddrStatus {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type ParaBlock2MainMap struct {
	Height     int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	BlockHash  string `protobuf:"bytes,2,opt,name=blockHash" json:"blockHash,omitempty"`
	MainHeight int64  `protobuf:"varint,3,opt,name=mainHeight" json:"mainHeight,omitempty"`
	MainHash   string `protobuf:"bytes,4,opt,name=mainHash" json:"mainHash,omitempty"`
}

func (m *ParaBlock2MainMap) Reset()                    { *m = ParaBlock2MainMap{} }
func (m *ParaBlock2MainMap) String() string            { return proto.CompactTextString(m) }
func (*ParaBlock2MainMap) ProtoMessage()               {}
func (*ParaBlock2MainMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ParaBlock2MainMap) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParaBlock2MainMap) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *ParaBlock2MainMap) GetMainHeight() int64 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

func (m *ParaBlock2MainMap) GetMainHash() string {
	if m != nil {
		return m.MainHash
	}
	return ""
}

type ParaBlock2MainInfo struct {
	Items []*ParaBlock2MainMap `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ParaBlock2MainInfo) Reset()                    { *m = ParaBlock2MainInfo{} }
func (m *ParaBlock2MainInfo) String() string            { return proto.CompactTextString(m) }
func (*ParaBlock2MainInfo) ProtoMessage()               {}
func (*ParaBlock2MainInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ParaBlock2MainInfo) GetItems() []*ParaBlock2MainMap {
	if m != nil {
		return m.Items
	}
	return nil
}

// action
type ParacrossNodeStatus struct {
	MainBlockHash   []byte   `protobuf:"bytes,1,opt,name=mainBlockHash,proto3" json:"mainBlockHash,omitempty"`
	MainBlockHeight int64    `protobuf:"varint,2,opt,name=mainBlockHeight" json:"mainBlockHeight,omitempty"`
	Title           string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Height          int64    `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	PreBlockHash    []byte   `protobuf:"bytes,5,opt,name=preBlockHash,proto3" json:"preBlockHash,omitempty"`
	BlockHash       []byte   `protobuf:"bytes,6,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	PreStateHash    []byte   `protobuf:"bytes,7,opt,name=preStateHash,proto3" json:"preStateHash,omitempty"`
	StateHash       []byte   `protobuf:"bytes,8,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	TxCounts        uint32   `protobuf:"varint,9,opt,name=txCounts" json:"txCounts,omitempty"`
	TxResult        []byte   `protobuf:"bytes,10,opt,name=txResult,proto3" json:"txResult,omitempty"`
	TxHashs         [][]byte `protobuf:"bytes,11,rep,name=txHashs,proto3" json:"txHashs,omitempty"`
	CrossTxResult   []byte   `protobuf:"bytes,12,opt,name=crossTxResult,proto3" json:"crossTxResult,omitempty"`
	CrossTxHashs    [][]byte `protobuf:"bytes,13,rep,name=crossTxHashs,proto3" json:"crossTxHashs,omitempty"`
}

func (m *ParacrossNodeStatus) Reset()                    { *m = ParacrossNodeStatus{} }
func (m *ParacrossNodeStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossNodeStatus) ProtoMessage()               {}
func (*ParacrossNodeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ParacrossNodeStatus) GetMainBlockHash() []byte {
	if m != nil {
		return m.MainBlockHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetMainBlockHeight() int64 {
	if m != nil {
		return m.MainBlockHeight
	}
	return 0
}

func (m *ParacrossNodeStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossNodeStatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossNodeStatus) GetPreBlockHash() []byte {
	if m != nil {
		return m.PreBlockHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetPreStateHash() []byte {
	if m != nil {
		return m.PreStateHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetTxCounts() uint32 {
	if m != nil {
		return m.TxCounts
	}
	return 0
}

func (m *ParacrossNodeStatus) GetTxResult() []byte {
	if m != nil {
		return m.TxResult
	}
	return nil
}

func (m *ParacrossNodeStatus) GetTxHashs() [][]byte {
	if m != nil {
		return m.TxHashs
	}
	return nil
}

func (m *ParacrossNodeStatus) GetCrossTxResult() []byte {
	if m != nil {
		return m.CrossTxResult
	}
	return nil
}

func (m *ParacrossNodeStatus) GetCrossTxHashs() [][]byte {
	if m != nil {
		return m.CrossTxHashs
	}
	return nil
}

type ParacrossCommitAction struct {
	Status *ParacrossNodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ParacrossCommitAction) Reset()                    { *m = ParacrossCommitAction{} }
func (m *ParacrossCommitAction) String() string            { return proto.CompactTextString(m) }
func (*ParacrossCommitAction) ProtoMessage()               {}
func (*ParacrossCommitAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ParacrossCommitAction) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ParacrossMinerAction struct {
	Status *ParacrossNodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ParacrossMinerAction) Reset()                    { *m = ParacrossMinerAction{} }
func (m *ParacrossMinerAction) String() string            { return proto.CompactTextString(m) }
func (*ParacrossMinerAction) ProtoMessage()               {}
func (*ParacrossMinerAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ParacrossMinerAction) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ParacrossAction struct {
	// Types that are valid to be assigned to Value:
	//	*ParacrossAction_Commit
	//	*ParacrossAction_Miner
	//	*ParacrossAction_AssetTransfer
	//	*ParacrossAction_AssetWithdraw
	//	*ParacrossAction_Transfer
	//	*ParacrossAction_Withdraw
	//	*ParacrossAction_TransferToExec
	//	*ParacrossAction_NodeConfig
	Value isParacrossAction_Value `protobuf_oneof:"value"`
	Ty    int32                   `protobuf:"varint,2,opt,name=ty" json:"ty,omitempty"`
}

func (m *ParacrossAction) Reset()                    { *m = ParacrossAction{} }
func (m *ParacrossAction) String() string            { return proto.CompactTextString(m) }
func (*ParacrossAction) ProtoMessage()               {}
func (*ParacrossAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type isParacrossAction_Value interface {
	isParacrossAction_Value()
}

type ParacrossAction_Commit struct {
	Commit *ParacrossCommitAction `protobuf:"bytes,1,opt,name=commit,oneof"`
}
type ParacrossAction_Miner struct {
	Miner *ParacrossMinerAction `protobuf:"bytes,3,opt,name=miner,oneof"`
}
type ParacrossAction_AssetTransfer struct {
	AssetTransfer *types2.AssetsTransfer `protobuf:"bytes,4,opt,name=assetTransfer,oneof"`
}
type ParacrossAction_AssetWithdraw struct {
	AssetWithdraw *types2.AssetsWithdraw `protobuf:"bytes,5,opt,name=assetWithdraw,oneof"`
}
type ParacrossAction_Transfer struct {
	Transfer *types2.AssetsTransfer `protobuf:"bytes,6,opt,name=transfer,oneof"`
}
type ParacrossAction_Withdraw struct {
	Withdraw *types2.AssetsWithdraw `protobuf:"bytes,7,opt,name=withdraw,oneof"`
}
type ParacrossAction_TransferToExec struct {
	TransferToExec *types2.AssetsTransferToExec `protobuf:"bytes,8,opt,name=transferToExec,oneof"`
}
type ParacrossAction_NodeConfig struct {
	NodeConfig *ParaNodeAddrConfig `protobuf:"bytes,9,opt,name=nodeConfig,oneof"`
}

func (*ParacrossAction_Commit) isParacrossAction_Value()         {}
func (*ParacrossAction_Miner) isParacrossAction_Value()          {}
func (*ParacrossAction_AssetTransfer) isParacrossAction_Value()  {}
func (*ParacrossAction_AssetWithdraw) isParacrossAction_Value()  {}
func (*ParacrossAction_Transfer) isParacrossAction_Value()       {}
func (*ParacrossAction_Withdraw) isParacrossAction_Value()       {}
func (*ParacrossAction_TransferToExec) isParacrossAction_Value() {}
func (*ParacrossAction_NodeConfig) isParacrossAction_Value()     {}

func (m *ParacrossAction) GetValue() isParacrossAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ParacrossAction) GetCommit() *ParacrossCommitAction {
	if x, ok := m.GetValue().(*ParacrossAction_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *ParacrossAction) GetMiner() *ParacrossMinerAction {
	if x, ok := m.GetValue().(*ParacrossAction_Miner); ok {
		return x.Miner
	}
	return nil
}

func (m *ParacrossAction) GetAssetTransfer() *types2.AssetsTransfer {
	if x, ok := m.GetValue().(*ParacrossAction_AssetTransfer); ok {
		return x.AssetTransfer
	}
	return nil
}

func (m *ParacrossAction) GetAssetWithdraw() *types2.AssetsWithdraw {
	if x, ok := m.GetValue().(*ParacrossAction_AssetWithdraw); ok {
		return x.AssetWithdraw
	}
	return nil
}

func (m *ParacrossAction) GetTransfer() *types2.AssetsTransfer {
	if x, ok := m.GetValue().(*ParacrossAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *ParacrossAction) GetWithdraw() *types2.AssetsWithdraw {
	if x, ok := m.GetValue().(*ParacrossAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *ParacrossAction) GetTransferToExec() *types2.AssetsTransferToExec {
	if x, ok := m.GetValue().(*ParacrossAction_TransferToExec); ok {
		return x.TransferToExec
	}
	return nil
}

func (m *ParacrossAction) GetNodeConfig() *ParaNodeAddrConfig {
	if x, ok := m.GetValue().(*ParacrossAction_NodeConfig); ok {
		return x.NodeConfig
	}
	return nil
}

func (m *ParacrossAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ParacrossAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ParacrossAction_OneofMarshaler, _ParacrossAction_OneofUnmarshaler, _ParacrossAction_OneofSizer, []interface{}{
		(*ParacrossAction_Commit)(nil),
		(*ParacrossAction_Miner)(nil),
		(*ParacrossAction_AssetTransfer)(nil),
		(*ParacrossAction_AssetWithdraw)(nil),
		(*ParacrossAction_Transfer)(nil),
		(*ParacrossAction_Withdraw)(nil),
		(*ParacrossAction_TransferToExec)(nil),
		(*ParacrossAction_NodeConfig)(nil),
	}
}

func _ParacrossAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ParacrossAction)
	// value
	switch x := m.Value.(type) {
	case *ParacrossAction_Commit:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *ParacrossAction_Miner:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Miner); err != nil {
			return err
		}
	case *ParacrossAction_AssetTransfer:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssetTransfer); err != nil {
			return err
		}
	case *ParacrossAction_AssetWithdraw:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssetWithdraw); err != nil {
			return err
		}
	case *ParacrossAction_Transfer:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *ParacrossAction_Withdraw:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *ParacrossAction_TransferToExec:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToExec); err != nil {
			return err
		}
	case *ParacrossAction_NodeConfig:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ParacrossAction.Value has unexpected type %T", x)
	}
	return nil
}

func _ParacrossAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ParacrossAction)
	switch tag {
	case 1: // value.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParacrossCommitAction)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_Commit{msg}
		return true, err
	case 3: // value.miner
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParacrossMinerAction)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_Miner{msg}
		return true, err
	case 4: // value.assetTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types2.AssetsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_AssetTransfer{msg}
		return true, err
	case 5: // value.assetWithdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types2.AssetsWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_AssetWithdraw{msg}
		return true, err
	case 6: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types2.AssetsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_Transfer{msg}
		return true, err
	case 7: // value.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types2.AssetsWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_Withdraw{msg}
		return true, err
	case 8: // value.transferToExec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types2.AssetsTransferToExec)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_TransferToExec{msg}
		return true, err
	case 9: // value.nodeConfig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParaNodeAddrConfig)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_NodeConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ParacrossAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ParacrossAction)
	// value
	switch x := m.Value.(type) {
	case *ParacrossAction_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_Miner:
		s := proto.Size(x.Miner)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_AssetTransfer:
		s := proto.Size(x.AssetTransfer)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_AssetWithdraw:
		s := proto.Size(x.AssetWithdraw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_Withdraw:
		s := proto.Size(x.Withdraw)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_TransferToExec:
		s := proto.Size(x.TransferToExec)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_NodeConfig:
		s := proto.Size(x.NodeConfig)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// logs
type ReceiptParacrossCommit struct {
	Addr    string                 `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status  *ParacrossNodeStatus   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Prev    *ParacrossHeightStatus `protobuf:"bytes,3,opt,name=prev" json:"prev,omitempty"`
	Current *ParacrossHeightStatus `protobuf:"bytes,4,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptParacrossCommit) Reset()                    { *m = ReceiptParacrossCommit{} }
func (m *ReceiptParacrossCommit) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossCommit) ProtoMessage()               {}
func (*ReceiptParacrossCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReceiptParacrossCommit) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptParacrossCommit) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ReceiptParacrossCommit) GetPrev() *ParacrossHeightStatus {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptParacrossCommit) GetCurrent() *ParacrossHeightStatus {
	if m != nil {
		return m.Current
	}
	return nil
}

type ReceiptParacrossMiner struct {
	Status *ParacrossNodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ReceiptParacrossMiner) Reset()                    { *m = ReceiptParacrossMiner{} }
func (m *ReceiptParacrossMiner) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossMiner) ProtoMessage()               {}
func (*ReceiptParacrossMiner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReceiptParacrossMiner) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReceiptParacrossDone struct {
	TotalNodes     int32  `protobuf:"varint,1,opt,name=totalNodes" json:"totalNodes,omitempty"`
	TotalCommit    int32  `protobuf:"varint,2,opt,name=totalCommit" json:"totalCommit,omitempty"`
	MostSameCommit int32  `protobuf:"varint,3,opt,name=mostSameCommit" json:"mostSameCommit,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Height         int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	StateHash      []byte `protobuf:"bytes,6,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	TxCounts       uint32 `protobuf:"varint,7,opt,name=txCounts" json:"txCounts,omitempty"`
	TxResult       []byte `protobuf:"bytes,8,opt,name=txResult,proto3" json:"txResult,omitempty"`
}

func (m *ReceiptParacrossDone) Reset()                    { *m = ReceiptParacrossDone{} }
func (m *ReceiptParacrossDone) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossDone) ProtoMessage()               {}
func (*ReceiptParacrossDone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReceiptParacrossDone) GetTotalNodes() int32 {
	if m != nil {
		return m.TotalNodes
	}
	return 0
}

func (m *ReceiptParacrossDone) GetTotalCommit() int32 {
	if m != nil {
		return m.TotalCommit
	}
	return 0
}

func (m *ReceiptParacrossDone) GetMostSameCommit() int32 {
	if m != nil {
		return m.MostSameCommit
	}
	return 0
}

func (m *ReceiptParacrossDone) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReceiptParacrossDone) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReceiptParacrossDone) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ReceiptParacrossDone) GetTxCounts() uint32 {
	if m != nil {
		return m.TxCounts
	}
	return 0
}

func (m *ReceiptParacrossDone) GetTxResult() []byte {
	if m != nil {
		return m.TxResult
	}
	return nil
}

type ReceiptParacrossRecord struct {
	Addr   string               `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status *ParacrossNodeStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ReceiptParacrossRecord) Reset()                    { *m = ReceiptParacrossRecord{} }
func (m *ReceiptParacrossRecord) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossRecord) ProtoMessage()               {}
func (*ReceiptParacrossRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ReceiptParacrossRecord) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptParacrossRecord) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// LocalDB
// title-height-addr : txHash
type ParacrossTx struct {
	TxHash string `protobuf:"bytes,1,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *ParacrossTx) Reset()                    { *m = ParacrossTx{} }
func (m *ParacrossTx) String() string            { return proto.CompactTextString(m) }
func (*ParacrossTx) ProtoMessage()               {}
func (*ParacrossTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ParacrossTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// query
type ReqParacrossTitleHeight struct {
	Title  string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *ReqParacrossTitleHeight) Reset()                    { *m = ReqParacrossTitleHeight{} }
func (m *ReqParacrossTitleHeight) String() string            { return proto.CompactTextString(m) }
func (*ReqParacrossTitleHeight) ProtoMessage()               {}
func (*ReqParacrossTitleHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ReqParacrossTitleHeight) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqParacrossTitleHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RespParacrossDone struct {
	TotalNodes     int32  `protobuf:"varint,1,opt,name=totalNodes" json:"totalNodes,omitempty"`
	TotalCommit    int32  `protobuf:"varint,2,opt,name=totalCommit" json:"totalCommit,omitempty"`
	MostSameCommit int32  `protobuf:"varint,3,opt,name=mostSameCommit" json:"mostSameCommit,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Height         int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	StateHash      string `protobuf:"bytes,6,opt,name=stateHash" json:"stateHash,omitempty"`
	TxCounts       uint32 `protobuf:"varint,7,opt,name=txCounts" json:"txCounts,omitempty"`
	TxResult       string `protobuf:"bytes,8,opt,name=txResult" json:"txResult,omitempty"`
}

func (m *RespParacrossDone) Reset()                    { *m = RespParacrossDone{} }
func (m *RespParacrossDone) String() string            { return proto.CompactTextString(m) }
func (*RespParacrossDone) ProtoMessage()               {}
func (*RespParacrossDone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RespParacrossDone) GetTotalNodes() int32 {
	if m != nil {
		return m.TotalNodes
	}
	return 0
}

func (m *RespParacrossDone) GetTotalCommit() int32 {
	if m != nil {
		return m.TotalCommit
	}
	return 0
}

func (m *RespParacrossDone) GetMostSameCommit() int32 {
	if m != nil {
		return m.MostSameCommit
	}
	return 0
}

func (m *RespParacrossDone) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RespParacrossDone) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RespParacrossDone) GetStateHash() string {
	if m != nil {
		return m.StateHash
	}
	return ""
}

func (m *RespParacrossDone) GetTxCounts() uint32 {
	if m != nil {
		return m.TxCounts
	}
	return 0
}

func (m *RespParacrossDone) GetTxResult() string {
	if m != nil {
		return m.TxResult
	}
	return ""
}

type RespParacrossTitles struct {
	Titles []*RespParacrossDone `protobuf:"bytes,1,rep,name=titles" json:"titles,omitempty"`
}

func (m *RespParacrossTitles) Reset()                    { *m = RespParacrossTitles{} }
func (m *RespParacrossTitles) String() string            { return proto.CompactTextString(m) }
func (*RespParacrossTitles) ProtoMessage()               {}
func (*RespParacrossTitles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RespParacrossTitles) GetTitles() []*RespParacrossDone {
	if m != nil {
		return m.Titles
	}
	return nil
}

type ReqParacrossTitleHash struct {
	Title     string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (m *ReqParacrossTitleHash) Reset()                    { *m = ReqParacrossTitleHash{} }
func (m *ReqParacrossTitleHash) String() string            { return proto.CompactTextString(m) }
func (*ReqParacrossTitleHash) ProtoMessage()               {}
func (*ReqParacrossTitleHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReqParacrossTitleHash) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqParacrossTitleHash) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// 跨链转账相关
type ParacrossAsset struct {
	// input
	From       string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To         string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	IsWithdraw bool   `protobuf:"varint,3,opt,name=isWithdraw" json:"isWithdraw,omitempty"`
	TxHash     []byte `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Amount     int64  `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	Exec       string `protobuf:"bytes,6,opt,name=exec" json:"exec,omitempty"`
	Symbol     string `protobuf:"bytes,7,opt,name=symbol" json:"symbol,omitempty"`
	// 主链部分
	Height int64 `protobuf:"varint,10,opt,name=height" json:"height,omitempty"`
	// 平行链部分
	CommitDoneHeight int64 `protobuf:"varint,21,opt,name=commitDoneHeight" json:"commitDoneHeight,omitempty"`
	ParaHeight       int64 `protobuf:"varint,22,opt,name=paraHeight" json:"paraHeight,omitempty"`
	Success          bool  `protobuf:"varint,23,opt,name=success" json:"success,omitempty"`
}

func (m *ParacrossAsset) Reset()                    { *m = ParacrossAsset{} }
func (m *ParacrossAsset) String() string            { return proto.CompactTextString(m) }
func (*ParacrossAsset) ProtoMessage()               {}
func (*ParacrossAsset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ParacrossAsset) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ParacrossAsset) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ParacrossAsset) GetIsWithdraw() bool {
	if m != nil {
		return m.IsWithdraw
	}
	return false
}

func (m *ParacrossAsset) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ParacrossAsset) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ParacrossAsset) GetExec() string {
	if m != nil {
		return m.Exec
	}
	return ""
}

func (m *ParacrossAsset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ParacrossAsset) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossAsset) GetCommitDoneHeight() int64 {
	if m != nil {
		return m.CommitDoneHeight
	}
	return 0
}

func (m *ParacrossAsset) GetParaHeight() int64 {
	if m != nil {
		return m.ParaHeight
	}
	return 0
}

func (m *ParacrossAsset) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*ParacrossStatusDetails)(nil), "types.ParacrossStatusDetails")
	proto.RegisterType((*ParacrossHeightStatus)(nil), "types.ParacrossHeightStatus")
	proto.RegisterType((*ParacrossStatus)(nil), "types.ParacrossStatus")
	proto.RegisterType((*ParacrossConsensusStatus)(nil), "types.ParacrossConsensusStatus")
	proto.RegisterType((*ParaNodeAddrConfig)(nil), "types.ParaNodeAddrConfig")
	proto.RegisterType((*ParaNodeVoteDetail)(nil), "types.ParaNodeVoteDetail")
	proto.RegisterType((*ParaNodeAddrStatus)(nil), "types.ParaNodeAddrStatus")
	proto.RegisterType((*ReceiptParaNodeConfig)(nil), "types.ReceiptParaNodeConfig")
	proto.RegisterType((*ReceiptParaNodeVoteRecord)(nil), "types.ReceiptParaNodeVoteRecord")
	proto.RegisterType((*ReceiptParaNodeVoteDone)(nil), "types.ReceiptParaNodeVoteDone")
	proto.RegisterType((*ReqParacrossNodeInfo)(nil), "types.ReqParacrossNodeInfo")
	proto.RegisterType((*RespParacrossNodeAddrs)(nil), "types.RespParacrossNodeAddrs")
	proto.RegisterType((*ParaBlock2MainMap)(nil), "types.ParaBlock2MainMap")
	proto.RegisterType((*ParaBlock2MainInfo)(nil), "types.ParaBlock2MainInfo")
	proto.RegisterType((*ParacrossNodeStatus)(nil), "types.ParacrossNodeStatus")
	proto.RegisterType((*ParacrossCommitAction)(nil), "types.ParacrossCommitAction")
	proto.RegisterType((*ParacrossMinerAction)(nil), "types.ParacrossMinerAction")
	proto.RegisterType((*ParacrossAction)(nil), "types.ParacrossAction")
	proto.RegisterType((*ReceiptParacrossCommit)(nil), "types.ReceiptParacrossCommit")
	proto.RegisterType((*ReceiptParacrossMiner)(nil), "types.ReceiptParacrossMiner")
	proto.RegisterType((*ReceiptParacrossDone)(nil), "types.ReceiptParacrossDone")
	proto.RegisterType((*ReceiptParacrossRecord)(nil), "types.ReceiptParacrossRecord")
	proto.RegisterType((*ParacrossTx)(nil), "types.ParacrossTx")
	proto.RegisterType((*ReqParacrossTitleHeight)(nil), "types.ReqParacrossTitleHeight")
	proto.RegisterType((*RespParacrossDone)(nil), "types.RespParacrossDone")
	proto.RegisterType((*RespParacrossTitles)(nil), "types.RespParacrossTitles")
	proto.RegisterType((*ReqParacrossTitleHash)(nil), "types.ReqParacrossTitleHash")
	proto.RegisterType((*ParacrossAsset)(nil), "types.ParacrossAsset")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Paracross service

type ParacrossClient interface {
	GetTitle(ctx context.Context, in *types1.ReqString, opts ...grpc.CallOption) (*ParacrossConsensusStatus, error)
	ListTitles(ctx context.Context, in *types1.ReqNil, opts ...grpc.CallOption) (*RespParacrossTitles, error)
	GetTitleHeight(ctx context.Context, in *ReqParacrossTitleHeight, opts ...grpc.CallOption) (*RespParacrossDone, error)
	GetAssetTxResult(ctx context.Context, in *types1.ReqHash, opts ...grpc.CallOption) (*ParacrossAsset, error)
	IsSync(ctx context.Context, in *types1.ReqNil, opts ...grpc.CallOption) (*types3.IsCaughtUp, error)
}

type paracrossClient struct {
	cc *grpc.ClientConn
}

func NewParacrossClient(cc *grpc.ClientConn) ParacrossClient {
	return &paracrossClient{cc}
}

func (c *paracrossClient) GetTitle(ctx context.Context, in *types1.ReqString, opts ...grpc.CallOption) (*ParacrossConsensusStatus, error) {
	out := new(ParacrossConsensusStatus)
	err := grpc.Invoke(ctx, "/types.paracross/GetTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paracrossClient) ListTitles(ctx context.Context, in *types1.ReqNil, opts ...grpc.CallOption) (*RespParacrossTitles, error) {
	out := new(RespParacrossTitles)
	err := grpc.Invoke(ctx, "/types.paracross/ListTitles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paracrossClient) GetTitleHeight(ctx context.Context, in *ReqParacrossTitleHeight, opts ...grpc.CallOption) (*RespParacrossDone, error) {
	out := new(RespParacrossDone)
	err := grpc.Invoke(ctx, "/types.paracross/GetTitleHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paracrossClient) GetAssetTxResult(ctx context.Context, in *types1.ReqHash, opts ...grpc.CallOption) (*ParacrossAsset, error) {
	out := new(ParacrossAsset)
	err := grpc.Invoke(ctx, "/types.paracross/GetAssetTxResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paracrossClient) IsSync(ctx context.Context, in *types1.ReqNil, opts ...grpc.CallOption) (*types3.IsCaughtUp, error) {
	out := new(types3.IsCaughtUp)
	err := grpc.Invoke(ctx, "/types.paracross/IsSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Paracross service

type ParacrossServer interface {
	GetTitle(context.Context, *types1.ReqString) (*ParacrossConsensusStatus, error)
	ListTitles(context.Context, *types1.ReqNil) (*RespParacrossTitles, error)
	GetTitleHeight(context.Context, *ReqParacrossTitleHeight) (*RespParacrossDone, error)
	GetAssetTxResult(context.Context, *types1.ReqHash) (*ParacrossAsset, error)
	IsSync(context.Context, *types1.ReqNil) (*types3.IsCaughtUp, error)
}

func RegisterParacrossServer(s *grpc.Server, srv ParacrossServer) {
	s.RegisterService(&_Paracross_serviceDesc, srv)
}

func _Paracross_GetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types1.ReqString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParacrossServer).GetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.paracross/GetTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParacrossServer).GetTitle(ctx, req.(*types1.ReqString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paracross_ListTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types1.ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParacrossServer).ListTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.paracross/ListTitles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParacrossServer).ListTitles(ctx, req.(*types1.ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paracross_GetTitleHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParacrossTitleHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParacrossServer).GetTitleHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.paracross/GetTitleHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParacrossServer).GetTitleHeight(ctx, req.(*ReqParacrossTitleHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paracross_GetAssetTxResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types1.ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParacrossServer).GetAssetTxResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.paracross/GetAssetTxResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParacrossServer).GetAssetTxResult(ctx, req.(*types1.ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paracross_IsSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types1.ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParacrossServer).IsSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.paracross/IsSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParacrossServer).IsSync(ctx, req.(*types1.ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

var _Paracross_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.paracross",
	HandlerType: (*ParacrossServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTitle",
			Handler:    _Paracross_GetTitle_Handler,
		},
		{
			MethodName: "ListTitles",
			Handler:    _Paracross_ListTitles_Handler,
		},
		{
			MethodName: "GetTitleHeight",
			Handler:    _Paracross_GetTitleHeight_Handler,
		},
		{
			MethodName: "GetAssetTxResult",
			Handler:    _Paracross_GetAssetTxResult_Handler,
		},
		{
			MethodName: "IsSync",
			Handler:    _Paracross_IsSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paracross.proto",
}

func init() { proto.RegisterFile("paracross.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4b, 0x6f, 0x1c, 0x45,
	0x10, 0xde, 0xd9, 0xa7, 0xb7, 0xfc, 0x88, 0xdd, 0x89, 0x9d, 0xc9, 0x12, 0x60, 0x35, 0x0a, 0xc8,
	0x42, 0xe0, 0x80, 0x2d, 0x05, 0xa1, 0x08, 0x81, 0xe3, 0x44, 0x5e, 0x93, 0x87, 0xd0, 0xd8, 0x3c,
	0x2e, 0x48, 0x4c, 0x66, 0xdb, 0xf6, 0x88, 0xdd, 0x99, 0xc9, 0x74, 0x6f, 0x62, 0x1f, 0x11, 0xf0,
	0x03, 0xb8, 0xf0, 0x0b, 0x38, 0x73, 0xe1, 0x0f, 0x20, 0x8e, 0xfc, 0x0d, 0xfe, 0x08, 0xaa, 0xee,
	0x9e, 0x7e, 0xcc, 0x3e, 0x14, 0x05, 0x2e, 0xdc, 0xb6, 0xaa, 0xab, 0xeb, 0xf1, 0x55, 0x75, 0x55,
	0xcd, 0xc2, 0x95, 0x3c, 0x2a, 0xa2, 0xb8, 0xc8, 0x18, 0xdb, 0xc9, 0x8b, 0x8c, 0x67, 0xa4, 0xc5,
	0x2f, 0x73, 0xca, 0x7a, 0x1b, 0xbc, 0x88, 0x52, 0x16, 0xc5, 0x3c, 0xc9, 0x52, 0x79, 0xd2, 0x5b,
	0x89, 0xb3, 0xf1, 0x58, 0x53, 0xeb, 0x4f, 0x47, 0x59, 0xfc, 0x5d, 0x7c, 0x1e, 0x25, 0x25, 0x67,
	0x8d, 0x5e, 0xd0, 0x78, 0xc2, 0xb3, 0x42, 0xd2, 0xc1, 0x23, 0xd8, 0xfa, 0xbc, 0x54, 0x7e, 0xcc,
	0x23, 0x3e, 0x61, 0xf7, 0x29, 0x8f, 0x92, 0x11, 0x23, 0xd7, 0xa0, 0x15, 0x0d, 0x87, 0x05, 0xf3,
	0xbd, 0x7e, 0x63, 0xbb, 0x1b, 0x4a, 0x82, 0xdc, 0x84, 0xae, 0xd0, 0x39, 0x88, 0xd8, 0xb9, 0x5f,
	0xef, 0x37, 0xb6, 0x57, 0x42, 0xc3, 0x08, 0x7e, 0xf1, 0x60, 0x53, 0xab, 0x1b, 0xd0, 0xe4, 0xec,
	0x9c, 0x4b, 0xa5, 0x64, 0x0b, 0xda, 0x4c, 0xfc, 0xf2, 0xbd, 0xbe, 0xb7, 0xdd, 0x0a, 0x15, 0x85,
	0x56, 0x78, 0xc2, 0x47, 0xd4, 0xaf, 0xf7, 0x3d, 0xb4, 0x22, 0x08, 0x94, 0x3e, 0x17, 0xb7, 0xfd,
	0x46, 0xdf, 0xdb, 0x6e, 0x84, 0x8a, 0x22, 0x1f, 0x42, 0x67, 0x28, 0xdd, 0xf3, 0x9b, 0x7d, 0x6f,
	0x7b, 0x79, 0xf7, 0xf5, 0x1d, 0x81, 0xc4, 0xce, 0xec, 0x18, 0xc2, 0x52, 0x3a, 0xf8, 0x06, 0xae,
	0x54, 0x44, 0x8c, 0x65, 0x6f, 0xb6, 0xe5, 0xba, 0x63, 0xd9, 0x89, 0x1b, 0x9d, 0x72, 0xe2, 0xfe,
	0xd5, 0x03, 0x5f, 0xeb, 0x3f, 0xc8, 0x52, 0x46, 0x53, 0x36, 0x59, 0x6c, 0xa8, 0x0f, 0xcb, 0x22,
	0x2f, 0x03, 0xdb, 0x9a, 0xcd, 0x22, 0xb7, 0x60, 0x35, 0x96, 0xaa, 0x06, 0x36, 0x16, 0x2e, 0x93,
	0xbc, 0x03, 0xeb, 0x8a, 0x71, 0x4f, 0xfb, 0xd7, 0x14, 0x86, 0xa6, 0xf8, 0xc1, 0x10, 0x08, 0x7a,
	0xf9, 0x24, 0x1b, 0xd2, 0xfd, 0xe1, 0xb0, 0x38, 0xc8, 0xd2, 0xd3, 0xe4, 0x6c, 0x8e, 0x7f, 0x6b,
	0x50, 0xcf, 0x72, 0x95, 0x95, 0x7a, 0x96, 0x13, 0x02, 0x4d, 0xac, 0x00, 0xe1, 0x44, 0x37, 0x14,
	0xbf, 0xf1, 0xe6, 0xf3, 0x68, 0x34, 0xa1, 0xca, 0xa0, 0x24, 0x82, 0x4f, 0x8d, 0x95, 0x2f, 0x33,
	0x4e, 0x65, 0x2e, 0xe6, 0x94, 0x13, 0x6a, 0xc8, 0x38, 0x65, 0xa2, 0x94, 0x50, 0x03, 0x12, 0xc1,
	0xcf, 0x9e, 0xeb, 0xe8, 0x2b, 0xd5, 0xd0, 0x4d, 0xe8, 0x46, 0x79, 0x3e, 0xba, 0xdc, 0x37, 0x5e,
	0x1b, 0x06, 0xb9, 0x5d, 0x1a, 0x96, 0x75, 0x74, 0xc3, 0xaa, 0x23, 0xd7, 0xf1, 0xd2, 0xa7, 0x3f,
	0x3d, 0xd8, 0x0c, 0x69, 0x4c, 0x93, 0x9c, 0x97, 0x42, 0x0a, 0xbf, 0x12, 0x19, 0xcf, 0x42, 0xe6,
	0x03, 0x68, 0xc7, 0xe2, 0x54, 0xf8, 0x34, 0xad, 0xdf, 0xc0, 0x1f, 0x2a, 0x41, 0xf2, 0x1e, 0x34,
	0xf3, 0x82, 0x3e, 0x17, 0xae, 0xce, 0xbe, 0x20, 0x61, 0x08, 0x85, 0x18, 0xd9, 0x83, 0x4e, 0x3c,
	0x29, 0x0a, 0x9a, 0xf2, 0x39, 0x21, 0x58, 0x37, 0x4a, 0xc9, 0x20, 0x81, 0x1b, 0x95, 0x18, 0x30,
	0xd0, 0x90, 0xc6, 0x59, 0x31, 0x24, 0x3d, 0x58, 0x3a, 0x2d, 0xb2, 0xf1, 0xbe, 0x89, 0x45, 0xd3,
	0x78, 0x86, 0x30, 0x88, 0x33, 0x89, 0xb2, 0xa6, 0x4d, 0x15, 0x34, 0x44, 0x56, 0x54, 0x15, 0xfc,
	0xed, 0xc1, 0xf5, 0x19, 0xb6, 0xee, 0x67, 0x29, 0x9d, 0x53, 0x71, 0x6f, 0x00, 0xf0, 0xa8, 0x38,
	0xa3, 0xdc, 0xb2, 0x62, 0x71, 0xc4, 0x79, 0xc6, 0xa3, 0x11, 0xaa, 0x62, 0xca, 0x98, 0xc5, 0xc1,
	0x84, 0x0b, 0x0a, 0xcd, 0x08, 0x4c, 0x5a, 0xa1, 0x61, 0x60, 0x04, 0xe3, 0x8c, 0x71, 0x71, 0xd8,
	0x12, 0x87, 0x9a, 0x26, 0x3e, 0x74, 0x30, 0x9a, 0x90, 0x71, 0xbf, 0x2d, 0xcc, 0x96, 0x24, 0xda,
	0x1c, 0x66, 0x29, 0x95, 0x38, 0xfa, 0x1d, 0x69, 0xd3, 0x70, 0x82, 0xaf, 0xe1, 0x5a, 0x48, 0x9f,
	0xe9, 0xa7, 0x8f, 0x8e, 0x1c, 0xa5, 0xa7, 0xd9, 0x9c, 0x08, 0xcb, 0x4a, 0xa9, 0x5b, 0x95, 0x62,
	0x8a, 0xba, 0x61, 0x17, 0x75, 0x70, 0x04, 0x5b, 0x21, 0x65, 0xb9, 0xa3, 0x7a, 0x5f, 0xbc, 0x99,
	0xdb, 0xf6, 0x4b, 0x5a, 0x98, 0x77, 0x29, 0x17, 0xfc, 0xe4, 0xc1, 0x06, 0x9e, 0x8a, 0x46, 0xb0,
	0xfb, 0x38, 0x4a, 0xd2, 0xc7, 0x51, 0x6e, 0x75, 0x3a, 0x6f, 0x7e, 0xa7, 0x93, 0x9e, 0x1a, 0x06,
	0x02, 0x32, 0x36, 0x5d, 0x4b, 0x76, 0x24, 0x8b, 0x23, 0x60, 0x46, 0xca, 0xb4, 0x21, 0x4d, 0x07,
	0xf7, 0xe5, 0xab, 0x36, 0x6e, 0x08, 0xa8, 0x76, 0xa0, 0x95, 0x70, 0x3a, 0x2e, 0xc3, 0xf1, 0xad,
	0x70, 0x1c, 0x87, 0x43, 0x29, 0x16, 0xfc, 0xde, 0x80, 0xab, 0x0e, 0x2a, 0xaa, 0x3b, 0xdc, 0x82,
	0x55, 0xb4, 0x64, 0xba, 0xa0, 0x27, 0xba, 0xb4, 0xcb, 0x24, 0xdb, 0x70, 0xc5, 0x30, 0xec, 0xd6,
	0x5b, 0x65, 0x9b, 0x14, 0x36, 0x66, 0xcf, 0x87, 0xa6, 0x83, 0x5a, 0x00, 0x2b, 0x79, 0x41, 0x8d,
	0xf1, 0x96, 0x30, 0xee, 0xf0, 0x5c, 0x64, 0xdb, 0x95, 0x19, 0xa2, 0x34, 0x60, 0x30, 0x54, 0x08,
	0x74, 0xb4, 0x06, 0xcd, 0x43, 0x0d, 0x4c, 0x0b, 0x2c, 0x49, 0x0d, 0x9a, 0x81, 0xd8, 0xf3, 0x8b,
	0x83, 0x6c, 0x92, 0x72, 0xe6, 0x77, 0xfb, 0xde, 0xf6, 0x6a, 0xa8, 0x69, 0x79, 0x16, 0x52, 0x36,
	0x19, 0x71, 0x1f, 0xc4, 0x45, 0x4d, 0x63, 0xf9, 0xf3, 0x0b, 0xd4, 0xc0, 0xfc, 0x65, 0x31, 0xd1,
	0x4b, 0x52, 0x8c, 0x20, 0x84, 0xf9, 0xa4, 0xbc, 0xba, 0x22, 0x31, 0x75, 0x98, 0xe8, 0xb9, 0x62,
	0x48, 0x25, 0xab, 0x42, 0x89, 0xc3, 0x0b, 0x1e, 0x5a, 0x8b, 0xc1, 0x41, 0x36, 0x1e, 0x27, 0x7c,
	0x5f, 0xac, 0x2d, 0x64, 0xd7, 0x69, 0xea, 0xcb, 0xbb, 0xbd, 0xea, 0x44, 0x37, 0x29, 0xd6, 0x6f,
	0xe3, 0x33, 0xb8, 0xa6, 0x8f, 0x1f, 0x27, 0x29, 0x2d, 0xfe, 0x85, 0xae, 0x1f, 0x9a, 0xd6, 0x6a,
	0xa0, 0xf4, 0xdc, 0xc1, 0xee, 0x8d, 0x3e, 0x2a, 0x3d, 0x37, 0xab, 0x7a, 0xec, 0x08, 0x06, 0xb5,
	0x50, 0x49, 0x93, 0x3d, 0x68, 0x8d, 0xd1, 0x1d, 0xd5, 0xc3, 0x5f, 0xab, 0x5e, 0xb3, 0x7c, 0x1d,
	0xd4, 0x42, 0x29, 0x4b, 0x3e, 0x86, 0xd5, 0x88, 0x31, 0xca, 0x4f, 0x70, 0x97, 0x3b, 0xa5, 0x85,
	0x6a, 0xe7, 0x9b, 0xea, 0xf2, 0x3e, 0x9e, 0xb1, 0xf2, 0x70, 0x50, 0x0b, 0x5d, 0x69, 0x7d, 0xfd,
	0xab, 0x84, 0x9f, 0x0f, 0x8b, 0xe8, 0x85, 0xa8, 0xbc, 0xea, 0xf5, 0xf2, 0x50, 0x5f, 0x2f, 0x19,
	0x64, 0x0f, 0x96, 0x78, 0x69, 0xb8, 0xbd, 0xd8, 0xb0, 0x16, 0xc4, 0x4b, 0x2f, 0x4a, 0x73, 0x9d,
	0xc5, 0xe6, 0xb4, 0x20, 0x79, 0x00, 0x6b, 0xa5, 0x82, 0x93, 0xec, 0xc1, 0x05, 0x8d, 0x45, 0x01,
	0x1b, 0x94, 0x5c, 0x7b, 0x52, 0x64, 0x50, 0x0b, 0x2b, 0x97, 0xc8, 0x5d, 0x80, 0x54, 0xcf, 0x5e,
	0x51, 0xe6, 0x8b, 0xa6, 0xeb, 0xa0, 0x16, 0x5a, 0xe2, 0xb8, 0xd4, 0xf0, 0x4b, 0xf1, 0xe0, 0x5b,
	0x61, 0x9d, 0x5f, 0xde, 0xeb, 0xa8, 0xd1, 0x15, 0xfc, 0xe5, 0x61, 0xbb, 0xd5, 0xd3, 0xca, 0x4a,
	0xf2, 0xcc, 0xf1, 0x6e, 0x0a, 0xad, 0xfe, 0xb2, 0x85, 0x46, 0xde, 0x77, 0xe6, 0xfb, 0x54, 0x49,
	0xd9, 0xdb, 0xb2, 0x1a, 0xf1, 0x77, 0xaa, 0x23, 0x7e, 0xf1, 0x25, 0x3d, 0xe5, 0x1f, 0x3a, 0x9b,
	0x8a, 0xa9, 0xbc, 0x57, 0x7a, 0x1f, 0x3f, 0xd6, 0x71, 0xc4, 0xb9, 0xda, 0xc4, 0x10, 0x77, 0xc7,
	0xb1, 0x37, 0x35, 0x8e, 0xfb, 0xb0, 0x2c, 0x28, 0x09, 0xa3, 0x02, 0xdd, 0x66, 0x91, 0xb7, 0x61,
	0x0d, 0x47, 0xf0, 0x71, 0x34, 0xa6, 0x4a, 0x48, 0x8e, 0xc0, 0x0a, 0xd7, 0x74, 0xe2, 0xe6, 0xec,
	0x4e, 0xdc, 0xaa, 0xce, 0x2f, 0xd3, 0x23, 0xdb, 0x8b, 0x7a, 0x64, 0x67, 0x41, 0x8f, 0x5c, 0x72,
	0x7b, 0x64, 0xf0, 0xed, 0x74, 0x7d, 0xa8, 0xb5, 0xe9, 0x3f, 0xaa, 0x8f, 0xe0, 0x2d, 0x58, 0xd6,
	0xc7, 0x27, 0x17, 0x18, 0x9e, 0xec, 0xc2, 0x4a, 0xb1, 0xa2, 0x82, 0x43, 0x5c, 0xab, 0xcc, 0xc6,
	0x71, 0x82, 0x58, 0x54, 0x27, 0xd6, 0xcb, 0x7c, 0xd1, 0x04, 0xdf, 0xd7, 0x61, 0xc3, 0xd9, 0x30,
	0xfe, 0x5f, 0x59, 0xed, 0xbe, 0x6a, 0x56, 0xbb, 0x56, 0x56, 0x0f, 0xe1, 0xaa, 0x03, 0x81, 0x40,
	0x13, 0x9f, 0x6a, 0x5b, 0x78, 0x53, 0xdd, 0x49, 0xa6, 0xe0, 0x0a, 0x95, 0x9c, 0x7c, 0x72, 0xd5,
	0xac, 0xa0, 0x67, 0xb3, 0x73, 0x32, 0xb5, 0x63, 0x39, 0x5f, 0x93, 0xbf, 0xd5, 0x61, 0xcd, 0x8c,
	0x24, 0x6c, 0x8b, 0x58, 0x64, 0xb8, 0x8b, 0x97, 0x45, 0x86, 0xbf, 0x45, 0x33, 0xcb, 0xca, 0x2f,
	0x34, 0x9e, 0x61, 0xea, 0x12, 0xdd, 0x7a, 0x05, 0xe8, 0x4b, 0xa1, 0xc5, 0xb1, 0x2a, 0xaa, 0x29,
	0x2c, 0x2a, 0x0a, 0xf9, 0xd1, 0x18, 0xb1, 0x2a, 0x21, 0x97, 0x14, 0xda, 0xa4, 0xd8, 0xa6, 0x25,
	0xda, 0xe2, 0xb7, 0xd8, 0x56, 0x2f, 0xc7, 0x4f, 0xb3, 0x91, 0x80, 0xb9, 0x1b, 0x2a, 0xca, 0x4a,
	0x1b, 0x38, 0x69, 0x13, 0x5f, 0xa7, 0x98, 0x6e, 0x44, 0x4b, 0xed, 0x5b, 0x9b, 0x42, 0x62, 0x8a,
	0x8f, 0xfe, 0xe7, 0x51, 0x11, 0x29, 0xa9, 0x2d, 0xb9, 0x5a, 0x1a, 0x0e, 0xae, 0x29, 0x6c, 0x12,
	0xc7, 0x94, 0x31, 0xff, 0xba, 0x08, 0xae, 0x24, 0x77, 0xff, 0xa8, 0x43, 0x57, 0xff, 0x45, 0x42,
	0x3e, 0x81, 0xa5, 0x43, 0xca, 0x45, 0x0a, 0xc8, 0xba, 0xce, 0xdc, 0xb3, 0x63, 0x5e, 0x24, 0xe9,
	0x59, 0xef, 0xcd, 0xe9, 0x59, 0xee, 0x7c, 0xae, 0x07, 0x35, 0xf2, 0x11, 0xc0, 0xa3, 0x84, 0x71,
	0x55, 0x0c, 0xab, 0x46, 0xc5, 0x93, 0x64, 0xd4, 0xeb, 0xcd, 0xaa, 0x05, 0x29, 0x1a, 0xd4, 0xc8,
	0x23, 0x58, 0x2b, 0x6d, 0x97, 0x51, 0x99, 0xeb, 0xb3, 0x1e, 0x6d, 0x6f, 0x6e, 0x6d, 0x05, 0x35,
	0x72, 0x17, 0xd6, 0x0f, 0x29, 0x17, 0x15, 0xa0, 0x97, 0xad, 0x35, 0xa3, 0x0f, 0xb3, 0xd7, 0xdb,
	0xac, 0xc6, 0x23, 0xc4, 0x83, 0x1a, 0x79, 0x17, 0xda, 0x47, 0xec, 0xf8, 0x32, 0x8d, 0xab, 0x11,
	0x6c, 0x28, 0xf2, 0x88, 0x1d, 0x44, 0x93, 0xb3, 0x73, 0xfe, 0x45, 0x1e, 0xd4, 0x9e, 0xb6, 0xc5,
	0xdf, 0x41, 0x7b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x69, 0x19, 0xcd, 0x46, 0x6b, 0x12, 0x00,
	0x00,
}
